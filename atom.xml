<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>codewithstyle.info</title>
  
  <subtitle>Web Development &amp; Functional Programming.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://codewithstyle.info/"/>
  <updated>2019-12-02T21:26:20.062Z</updated>
  <id>https://codewithstyle.info/</id>
  
  <author>
    <name>Miłosz Piechocki</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>The ultimate explanation of TypeScript generics: functions</title>
    <link href="https://codewithstyle.info/TypeScript-generics-demystified/"/>
    <id>https://codewithstyle.info/TypeScript-generics-demystified/</id>
    <published>2019-10-15T20:15:34.000Z</published>
    <updated>2019-12-02T21:26:20.062Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I surveyed the readers of this blog to find out what TypeScript features people find difficult to understand. Generics were mentioned quite often. In this article, I’m going to equip you with a mental model that will let you understand <strong>generic functions</strong> properly (I’ll focus on <strong>generic types</strong> in another article).</p><p>The concept of generics is not a very new one - it has been present in different programming languages (such as Java, C# or C++) for a long time. However, for folks without background in a statically typed language, generics might appear complicated. Therefore, I’m not going to make any assumptions and will explain generics completely from scratch.</p><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>Let’s say you are adding types to some JavaScript codebase and you encounter this function:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNames</span>(<span class="params">persons</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> results = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> person <span class="keyword">of</span> persons) &#123;</span><br><span class="line">    results.push(person.name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Typing this function is straightforward. It accepts an array of person objects as a parameter and returns an array of names (strings). For the person object, you can either create a <code>Person</code> interface or use one that you’ve already created.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNames</span>(<span class="params">persons: Person[]</span>): <span class="title">string</span>[] </span>&#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Next, you notice that you don’t actually need this function. Instead, you can use the built-in <code>Array.map</code> method.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> persons: Person[] = [</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> names = persons.map(<span class="function"><span class="params">person</span> =&gt;</span> person.name);</span><br></pre></td></tr></table></figure><p>Hmm, but what about types? You check the type of <code>names</code> and realize that it has been correctly inferred to <code>string[]</code>! How does TypeScript achieve such an effect?</p><p>To properly understand this, let’s try to type the following implementation of <code>map</code> function.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>(<span class="params">items, mappingFunction</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> results = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> items) &#123;</span><br><span class="line">    results.push(mappingFunction(item));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> names = map(persons, person =&gt; person.name);</span><br></pre></td></tr></table></figure><p>The main issue with typing <code>map</code> is that you don’t know anything about the type of the elements of the array it will be called with. What makes <code>map</code> so cool is that it works with <em>any</em> kind of array!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Works with array of Persons</span></span><br><span class="line"><span class="keyword">const</span> names = map(persons, person =&gt; person.name);</span><br><span class="line"><span class="comment">// Works with array of names too</span></span><br><span class="line"><span class="keyword">const</span> uppercaseNames = map(names, name =&gt; name.toUpperCase());</span><br><span class="line"><span class="comment">// Works even with an array of numbers!</span></span><br><span class="line"><span class="keyword">const</span> evenNumbers = map([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], n =&gt; n * <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h2 id="Let’s-use-any"><a href="#Let’s-use-any" class="headerlink" title="Let’s use any!"></a>Let’s use <code>any</code>!</h2><p>As a first step, let’s try using <code>any</code> type to <code>map</code> this function.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function map(items: any[], mappingFunction: (item: any) =&gt; any): any[] &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s break this down. <code>map</code> has two parameters. The type of the first one (<code>items</code>) is <code>any[]</code>. We tell the type system that we want <code>items</code> to be an array, but we don’t care about the type of those items. The type of the second parameter (<code>mappingFunction</code>) is a function that takes <code>any</code> and returns <code>any</code>. Finally, the return type is again <code>any[]</code> - an array of <em>anything</em>.</p><p>Did we gain anything by doing this? Sure! TypeScript now won’t allow us to call <code>map</code> with some nonsensical arguments:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 🔴 Error: 'hello' is not an array</span></span><br><span class="line">map(<span class="string">"hello"</span>, <span class="function">(<span class="params">person: Person</span>) =&gt;</span> person.name);</span><br><span class="line"><span class="comment">// 🔴 Error: 1000 is not a function</span></span><br><span class="line">map(persons, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>Unfortunately, the types we provided are not precise enough. The purpose of TypeScript is to catch possible runtime errors earlier, at compile-time. However, the following calls won’t give any compile errors.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The second argument is a function that only works on numbers, not on `Person` objects.</span></span><br><span class="line"><span class="comment">// This would result in a runtime error.</span></span><br><span class="line">map(persons, <span class="function"><span class="params">n</span> =&gt;</span> n + <span class="number">5</span>);</span><br><span class="line"><span class="comment">// We tell TypeScript that `numbers` is an array of strings while in fact it will be an array of numbers.</span></span><br><span class="line"><span class="comment">// The second line results in a runtime error.</span></span><br><span class="line"><span class="keyword">const</span> names: <span class="built_in">string</span>[] = map(persons, <span class="function"><span class="params">person</span> =&gt;</span> person.age);</span><br><span class="line">names[<span class="number">0</span>].toLowerCase();</span><br></pre></td></tr></table></figure><p>How can we improve the typing of <code>map</code> so that above examples would result in a compile-time error? Enter generics.</p><h2 id="Generic-functions"><a href="#Generic-functions" class="headerlink" title="Generic functions"></a>Generic functions</h2><p>Generic function is (in this case) a way of saying “this function works with any kind of array” and maintaining type safety at the same time.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>&lt;<span class="title">TElement</span>, <span class="title">TResult</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  items: TElement[],</span></span></span><br><span class="line">  mappingFunction: (item: TElement) =&gt; TResult</span><br><span class="line">): TResult[] &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We replaced <code>any</code> with <code>TElement</code> and <code>TResult</code> type parameters. Type parameters are like <em>named <code>any</code>s</em>. Typing <code>items</code> as <code>TElement[]</code> still means that it is an array of anything. However, because it’s <em>named</em>, it lets us establish relationships between types of function parameters and the return type.</p><p>Here, we’ve just expressed the following relationships:</p><ul><li><code>mappingFunction</code> takes anything as a parameter, but it must be <em>the same type of “anything”</em> as the type of elements of <code>items</code> array</li><li><code>mappingFunction</code> can return anything, but whatever type it returns, it will be used as the type of elements of the array returned by <code>map</code> function</li></ul><p>The picture below demonstrates these relationships. Shapes of the same color have to be of the same type.</p><p><img src="/images/posts/generic-functions.png" alt="Generic `map`"></p><p>You might have noticed the <code>&lt;TElement, TResult&gt;</code> thing that we added next to <code>map</code>. Type parameters have to be declared explicitly using this notation. Otherwise, TypeScript wouldn’t know if <code>TElement</code> is a type argument or an actual type.</p><p>BTW, for some reason, it is a common convention to use single-character names for type parameters (with a strong preference for <code>T</code>). I’d strongly recommend using full names, especially when you are not that experienced with generics. On the other hand, it’s a good idea to prefix type arguments with <code>T</code>, so that they’re easily distinguishable from regular types.</p><h2 id="Calling-generic-functions"><a href="#Calling-generic-functions" class="headerlink" title="Calling generic functions"></a>Calling generic functions</h2><p>How to call a generic function? As we saw, generic functions have type parameters. These parameters are replaced with actual types “when” the function is called (technically, it’s all happening at compile-time). You can provide the actual types using angle brackets notation.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map&lt;Person, <span class="built_in">string</span>&gt;(persons, <span class="function"><span class="params">person</span> =&gt;</span> person.name);</span><br></pre></td></tr></table></figure><p>Imagine that by providing type arguments <code>TElement</code> and <code>TResult</code> become replaced with <code>Person</code> and <code>string</code>.</p><p><img src="/images/posts/generic-functions-2.png" alt="Generic `map`"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>&lt;<span class="title">TElement</span>, <span class="title">TResult</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  items: TElement[],</span></span></span><br><span class="line">  mappingFunction: (item: TElement) =&gt; TResult</span><br><span class="line">): TResult[] &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...becomes...</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  items: Person[],</span></span></span><br><span class="line">  mappingFunction: (item: Person) =&gt; string</span><br><span class="line">): <span class="built_in">string</span>[] &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Having to provide type arguments, when calling generic functions would be cumbersome. Fortunately, TypeScript can infer them by looking at the types of the arguments passed to the function. Therefore, we end up with the following code.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> names = map(persons, <span class="function"><span class="params">person</span> =&gt;</span> person.name);</span><br></pre></td></tr></table></figure><p>Whoohoo! It looks exactly as the JavaScript version, except it’s type-safe! Contrary to the first version of <code>map</code>, the type of <code>names</code> is <code>string[]</code> instead of <code>any[]</code>. What’s more, TypeScript is now capable of throwing a compile error for the following call.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 🔴 Error! Operator '+' cannot be applied to Person and 5.</span></span><br><span class="line">map(persons, <span class="function"><span class="params">n</span> =&gt;</span> n + <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>Here is a very simplified sequence of steps that leads the compiler to throw an error.</p><ol><li>Compiler looks at the type of <code>persons</code>. It sees <code>Person[]</code>.</li><li>According to the definition of <code>map</code>, the type of the first parameter is <code>TElement[]</code>. Compiler deduces that <code>TElement</code> is <code>Person</code>.</li><li>Compiler looks at the second parameter. It should be a function from <code>Person</code> to <code>TResult</code>. It doesn’t know what <code>TResult</code> is yet.</li><li>It checks the body of the function provided as the second argument. It infers that the type of <code>n</code> is <code>Person</code>.</li><li>It sees that you’re trying to add <code>5</code> to <code>n</code>, which is of type <code>Person</code>. This doesn’t make sense, so it throws an error.</li></ol><h2 id="When-to-use-generic-functions"><a href="#When-to-use-generic-functions" class="headerlink" title="When to use generic functions?"></a>When to use generic functions?</h2><p>The good news is that, most likely, you will not be creating generic functions very often. It’s much more common to call generic functions then to define them. However, it’s still very useful to know how generic functions work, as it can help you better understand compiler errors.</p><p>As exemplified by <code>map</code>, functions that take arrays as parameters are often generic functions. If you look at the typings for <code>lodash</code> library, you will see that nearly all of them are typed as generic functions. Such functions are only interested in the fact that the argument is an array, they don’t care about the type of its elements.</p><p>In React framework, Higher Order Components are generic functions, as they only care about the argument being a component. The type of the component’s properties is not important.</p><p>In RxJs, most operators are generic functions. They care about the input being and <code>Observable</code>, but they’re not interested in the type of values being emitted by the observable.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Wrapping up:</p><ul><li>generic functions let you achieve type safety for functions that work with many different types of inputs;</li><li>type arguments are very much like <code>any</code> type, except they can be used to express relationships between function parameters and the return type;</li><li>calling a generic function is very straightforward thanks to type inference.</li></ul><p>I hope this article helped you finally understand generic functions. If not, please let me know!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently I surveyed the readers of this blog to find out what TypeScript features people find difficult to understand. Generics were ment
      
    
    </summary>
    
    
      <category term="typescript" scheme="https://codewithstyle.info/tags/typescript/"/>
    
      <category term="basics" scheme="https://codewithstyle.info/tags/basics/"/>
    
      <category term="generics" scheme="https://codewithstyle.info/tags/generics/"/>
    
  </entry>
  
  <entry>
    <title>Two cool features coming soon to JavaScript</title>
    <link href="https://codewithstyle.info/Two-cool-features-coming-soon-to-JavaScript/"/>
    <id>https://codewithstyle.info/Two-cool-features-coming-soon-to-JavaScript/</id>
    <published>2019-09-08T11:29:52.000Z</published>
    <updated>2019-12-02T21:26:20.061Z</updated>
    
    <content type="html"><![CDATA[<p>Recently two TC39 proposals have advanced to Stage 3.</p><p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">WE JUST MOVED OPTIONAL CHAINING IN JS TO STAGE 3 🎉🎉🎉🎉🎉🎉🎉</p>&mdash; Daniel Rosenwasser (@drosenwasser) <a href="https://twitter.com/drosenwasser/status/1154456633642119168?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">July 25, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p><p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Today I got to present nullish coalescing at TC39 and it progressed to stage 3! The cherry on top? <a href="https://twitter.com/rkirsling?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">@rkirsling</a> already has a patch out for it in JavaScriptCore! <a href="https://t.co/o3jHs2Ieo9" target="_blank" rel="noopener">https://t.co/o3jHs2Ieo9</a></p>&mdash; Daniel Rosenwasser (@drosenwasser) <a href="https://twitter.com/drosenwasser/status/1153906097431777280?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">July 24, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p><p>What it means to us, developers, is that two new exciting language features will soon become part of the ECMAScript standard.</p><p>Let’s have a quick look at these additions and see how to take advantage of them.</p><h2 id="What’s-the-deal-with-TC39-proposals"><a href="#What’s-the-deal-with-TC39-proposals" class="headerlink" title="What’s the deal with TC39 proposals?"></a>What’s the deal with TC39 proposals?</h2><p><a href="https://tc39.es" target="_blank" rel="noopener">TC39</a> is a group of people that drives the development of the ECMAScript (the standard of which JavaScript language is an implementation). They meet regularly to discuss proposals of new language features. Every proposal goes through a number of stages. Once it reaches Stage 4, it is ready to be included in the next version of the ECMAScript standard.</p><p>When a proposal reaches Stage 3, it is already quite mature. The specification has been approved and is unlikely to change. There might already be some browsers implementing the new feature. While Stage 3 proposal is not guaranteed to become part of the standard, it’s very likely to.</p><p>The two proposals we’re looking at are:</p><ul><li><a href="https://github.com/tc39/proposal-optional-chaining" target="_blank" rel="noopener">Optional Chaining for JavaScript</a></li><li><a href="https://github.com/tc39/proposal-nullish-coalescing" target="_blank" rel="noopener">Nullish Coalescing for JavaScript</a></li></ul><h2 id="Optional-chaining"><a href="#Optional-chaining" class="headerlink" title="Optional chaining"></a>Optional chaining</h2><p>Optional chaining aims to provide nice and short syntax for a very common pattern: accessing a nested property of an object in a safe way.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> customers = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"John"</span>,</span><br><span class="line">    company: &#123;</span><br><span class="line">      name: <span class="string">"Acme"</span>,</span><br><span class="line">      address: <span class="string">"London"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"Jane"</span>,</span><br><span class="line">    company: &#123;</span><br><span class="line">      address: <span class="string">"New York"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"Judith"</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>This array contains objects representing customers. They all follow a similar structure, but some of the properties are optional. Let’s say we’d like to iterate over the array and print the company name in upper case for each customer.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> customer <span class="keyword">of</span> customers) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(customer.company.name.toUpperCase());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you might have guessed, the above code is not safe. It will result in runtime errors for the second and the third array elements. We can fix it by using the following popular pattern.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  customer &amp;&amp;</span><br><span class="line">    customer.company &amp;&amp;</span><br><span class="line">    customer.company.name &amp;&amp;</span><br><span class="line">    customer.company.name.toUpperCase()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Logical <em>and</em> operator (<code>&amp;&amp;</code>) in JavaScript behaves differently from most programming languages. It works on any value type, not only booleans. <code>a &amp;&amp; b</code> translates to: if <code>a</code> is <em>falsy</em> (can be converted to <code>false</code>), return <code>a</code>. Otherwise, return <code>b</code>.</p><p>Unfortunately, this solution is rather verbose. There is a lot of repetition and it gets worse the deeper the objects are nested. What’s more, it checks for a value to be <em>falsy</em>, not <code>null</code> or <code>undefined</code>. Therefore, it would return <code>0</code> for the following object, while it might be preferable to return <code>undefined</code> instead.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  name: <span class="string">"John"</span>,</span><br><span class="line">  company: &#123;</span><br><span class="line">    name: <span class="number">0</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Optional chaining comes to the rescue! With this new feature, we can shorten the above piece to a single line.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">customer?.company?.name?.toUpperCase();</span><br></pre></td></tr></table></figure><p>The <code>customer?.company</code> expression will check whether <code>customer</code> is <code>null</code> or <code>undefined</code>. If this is the case, it will evaluate to <code>undefined</code>. Otherwise, it will return <code>company</code>. In other words, <code>customer?.company</code> is equivalent to <code>customer != null ? customer : undefined</code>. The new <code>?.</code> operator is particularly useful when chained, hence the name (optional <em>chaining</em>).</p><p>Be careful when replacing existing <code>&amp;&amp;</code> chains with <code>?.</code> operator! Bear in mind the subtle difference it treatment of falsy values.</p><h2 id="Nullish-coalescing"><a href="#Nullish-coalescing" class="headerlink" title="Nullish coalescing"></a>Nullish coalescing</h2><p>The second proposal introduces <code>??</code> operator which you can use to provide a default value when accessing a property/variable that you expect can be <code>null</code> or <code>undefined</code>.</p><p>But hey, why not simply use <code>||</code> for this? Similarly to <code>&amp;&amp;</code>, logical _or_ can operator on non-boolean values as well. <code>a || b</code> returns <code>a</code> if it’s truthy, or <code>b</code> otherwise.</p><p>However, it comes with the same problem as <code>&amp;&amp;</code> - it checks for a <em>truthy</em> value. For example, an empty string (<code>&#39;&#39;</code>) will not be treated as a valid value and the default value would be returned instead.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> customer = &#123;</span><br><span class="line">  name: <span class="string">"John"</span>,</span><br><span class="line">  company: &#123;</span><br><span class="line">    name: <span class="string">""</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">customer.company.name || <span class="string">"no company"</span>; <span class="comment">// === 'no company'</span></span><br></pre></td></tr></table></figure><p>Nullish coalescing operator can be nicely combined with optional chaining.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(customer?.company?.name ?? <span class="string">"no company"</span>).toUpperCase();</span><br></pre></td></tr></table></figure><p>While the benefit of optional chaining is clear (less verbose code), nullish coalescing is a little bit more subtle. We’ve all been using <code>||</code> for providing a default value for a long time. However, this pattern can potentially be a source of nasty bugs, when a falsy value is skipped in favour of the default value. In most cases, the semantics of <code>??</code> is what you’re actually looking for.</p><h2 id="How-can-I-use-it"><a href="#How-can-I-use-it" class="headerlink" title="How can I use it?"></a>How can I use it?</h2><p>Since those proposals have not reached Stage 4 yet, you need transpile the code that uses them (for example with Babel). You can play with <a href="https://babeljs.io/repl" target="_blank" rel="noopener">Babel’s on-line REPL</a> to see what do they get compiled to.</p><p>At the moment of writing, optional chaining is <a href="https://www.chromestatus.com/feature/5748330720133120" target="_blank" rel="noopener">available in Chrome behind a feature flag</a>.</p><p>Optional chaining will also be available in the upcoming <a href="https://github.com/microsoft/TypeScript/issues/16#issuecomment-515160784" target="_blank" rel="noopener">TypeScript 3.7 release</a>!</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Recent ECMAScript versions didn’t bring many syntactical additions to the language. It’s likely to change with the next edition. Some people say that JavaScript is getting bloated. I personally think that these two pieces of syntactic sugar are long overdue, as they’ve been available in many modern programming languages and they address real-life, common development scenarios.</p><p>What do you think? 😉</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently two TC39 proposals have advanced to Stage 3.&lt;/p&gt;
&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;WE JUST MOVED OPTIO
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://codewithstyle.info/tags/javascript/"/>
    
      <category term="es-next" scheme="https://codewithstyle.info/tags/es-next/"/>
    
      <category term="tc39" scheme="https://codewithstyle.info/tags/tc39/"/>
    
  </entry>
  
  <entry>
    <title>Typing a useReducer React hook in TypeScript</title>
    <link href="https://codewithstyle.info/Typing-a-useReducer-React-hook-in-TypeScript/"/>
    <id>https://codewithstyle.info/Typing-a-useReducer-React-hook-in-TypeScript/</id>
    <published>2019-08-26T18:48:08.000Z</published>
    <updated>2019-12-02T21:26:20.062Z</updated>
    
    <content type="html"><![CDATA[<p>Hooks are a recent addition to React that enable more of your components to be written as functions by providing less complex alternatives to class features. One significant advantage is that typing function components in TypeScript is simpler and more direct.</p><p>In this article we will implement a common data fetching scenario with the useReducer hook. We will see how to take advantage of TypeScript’s discriminated unions to correctly type reducer’s actions. Finally, we will introduce a useful pattern for representing the state of data fetching operations.</p><p><strong>This post has been originally published on <a href="https://www.sumologic.com/blog/react-hook-typescript/" target="_blank" rel="noopener">SumoLogic company blog</a></strong>. </p><h2 id="Do-we-need-a-reducer"><a href="#Do-we-need-a-reducer" class="headerlink" title="Do we need a reducer?"></a>Do we need a reducer?</h2><p>We will base our code on an example from the official <a href="https://reactjs.org/docs/hooks-faq.html#how-can-i-do-data-fetching-with-hooks" target="_blank" rel="noopener">React documentation</a>. The demo linked from this article is a simple implementation of a very common pattern - fetching a list of items from some backend service. In this case, we’re fetching a list of <a href="https://news.ycombinator.com" target="_blank" rel="noopener">Hacker News</a> article headers.</p><p>What functionality is missing in this little demo? When fetching data from backend it’s useful to indicate to the user that an operation is in progress and  if the operation fails, to show the error to the user. Neither is included in the demo as coded.</p><p>The attached code uses <code>useState</code> hook to store the list of items after it is retrieved. We will need two additional pieces of state to implement our enhancements - a boolean indicating whether an action is in progress and an optional string containing the error message.</p><p>We could use more <code>useState</code> hooks to store this information. There’s a better way to do this, though. Notice that we’re modifying multiple pieces of state at the same time as a result of certain actions. For example, when data is retrieved from the backend, we update both the data piece and the loading indicator piece. What’s more, we’re modifying the state in multiple places. Wouldn’t it be cleaner and easier to follow if we there was only a single place in the component where the state is updated?</p><p>We can achieve it by using the <code>useReducer</code> hook. It will allow us to centralize all state modification, making them easier to track and reason about.</p><h2 id="The-type-of-useReducer"><a href="#The-type-of-useReducer" class="headerlink" title="The type of useReducer"></a>The type of <code>useReducer</code></h2><p>Let’s take a look at <code>useReducer</code>’s type signature (I simplified the code slightly by taking initializer out of the picture).</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useReducer</span>&lt;<span class="title">R</span> <span class="title">extends</span> <span class="title">Reducer</span>&lt;<span class="title">any</span>, <span class="title">any</span>&gt;&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">   reducer: R,</span></span></span><br><span class="line"><span class="function"><span class="params">   initialState: ReducerState&lt;R&gt;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): [<span class="title">ReducerState</span>&lt;<span class="title">R</span>&gt;, <span class="title">Dispatch</span>&lt;<span class="title">ReducerAction</span>&lt;<span class="title">R</span>&gt;&gt;]</span>;</span><br></pre></td></tr></table></figure><p>Our hook is a function (yes, React hooks are just functions). It accepts two parameters: <code>reducer</code> and <code>initialState</code>.</p><p>The first parameter’s type must extend <code>Reducer&lt;any, any&gt;</code>. <code>Reducer</code> is just an alias for a function type that takes a state object and an action and returns an updated version of the state object. In other words, reducer describes how to update the state based on some action.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Reducer&lt;S, A&gt; = <span class="function">(<span class="params">prevState: S, action: A</span>) =&gt;</span> S;</span><br></pre></td></tr></table></figure><p>The second parameter allows us to provide the initial version of the state. <code>ReducerState</code> is a conditional type that extracts the type of the state from <code>Reducer</code> type.</p><p>Finally, <code>useReducer</code> returns a tuple. The first element in the tuple is the recent version of the state object. We will render our component based on values contained in this object. The second item is a dispatch function. It is a function that will let us dispatch actions that will trigger state changes. Similarly to <code>ReducerState</code>, <code>ReducerAction</code> extracts action type from <code>Reducer</code>.</p><p>Behold the power of static typing - reading a well typed function’s signature is often enough to understand its purpose.</p><h2 id="Typing-state"><a href="#Typing-state" class="headerlink" title="Typing state"></a>Typing state</h2><p>Now is the time to fill in the gaps and define types representing state and actions.</p><p>It was already mentioned that apart from the data received from the server, we’re also going to store a flag indicating whether we’re loading that data and an optional error message.</p><p>Therefore, the shape of state can be described with the following types:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> State = &#123;</span><br><span class="line"> data?: HNResponse;</span><br><span class="line"> isLoading: <span class="built_in">boolean</span>;</span><br><span class="line"> error?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HNResponse = &#123;</span><br><span class="line"> hits: &#123;</span><br><span class="line">   title: <span class="built_in">string</span>;</span><br><span class="line">   objectID: <span class="built_in">string</span>;</span><br><span class="line">   url: <span class="built_in">string</span>;</span><br><span class="line"> &#125;[]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>HNResponse</code> interface is based on the response received from <a href="https://hn.algolia.com/api/v1/search" target="_blank" rel="noopener">https://hn.algolia.com/api/v1/search</a> endpoint which we’re going to use in this example. It is a free service that returns headers of Hacker News articles.</p><h2 id="Typing-actions-with-discriminated-unions"><a href="#Typing-actions-with-discriminated-unions" class="headerlink" title="Typing actions with discriminated unions"></a>Typing actions with discriminated unions</h2><p>Action is an object that represents some event in our application and result in modification of the state. What kind of actions are there in our app?</p><ul><li>The first action describes the fact that the user typed some text into the search text field. This action will initiate a backend request.</li><li>The second action will be triggered when the data from the backend is fetched. Action object should contain this data.</li><li>The third action will represent an error that occurred during data fetching. It should encompass the error message.</li></ul><p>How to represent the type of all these actions in TypeScript? We can take advantage of a very useful concept called discriminated union type.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Action =</span><br><span class="line"> | &#123; <span class="keyword">type</span>: <span class="string">'request'</span> &#125;</span><br><span class="line"> | &#123; <span class="keyword">type</span>: <span class="string">'success'</span>, results: HNResponse &#125;</span><br><span class="line"> | &#123; <span class="keyword">type</span>: <span class="string">'failure'</span>, error: <span class="built_in">string</span> &#125;;</span><br></pre></td></tr></table></figure><p>Action is a union of three object types. What makes it special is the fact that all of those types have a common property called type. The type of this property in each interface is a different literal type. This lets us distinguish between those types.</p><p>Why is this useful? TypeScript creates automatic type guards for discriminated unions. This means that if we write an if statement in which we compare the type property of given Action object with a specific type (e.g. <code>success</code>), the type of the object inside the statement’s body will be narrowed to the matching component of the union type.</p><p>For example, in the following code, accessing action.results will not cause a compile error because the type of action inside the body of the if statement will be appropriately narrowed!</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params">action: Action</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (action.type === <span class="string">'success'</span>) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(action.results);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Implementing-the-reducer"><a href="#Implementing-the-reducer" class="headerlink" title="Implementing the reducer"></a>Implementing the reducer</h2><p>We’re all good to implement the reducer. As already mentioned, it takes a state and an action and returns an updated state.</p><p>For request action, we’re going to set isLoading flag to true.</p><p>The success action will disable isLoading flag and also set data to the results received from the server.</p><p>Finally, failure action will also disable isLoading and set the error message.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state: State, action: Action</span>): <span class="title">State</span> </span>&#123;</span><br><span class="line"> <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="string">'request'</span>:</span><br><span class="line">     <span class="keyword">return</span> &#123; isLoading: <span class="literal">true</span> &#125;;</span><br><span class="line">   <span class="keyword">case</span> <span class="string">'success'</span>:</span><br><span class="line">     <span class="keyword">return</span> &#123; isLoading: <span class="literal">false</span>, data: action.results &#125;;</span><br><span class="line">   <span class="keyword">case</span> <span class="string">'failure'</span>:</span><br><span class="line">     <span class="keyword">return</span> &#123; isLoading: <span class="literal">false</span>, error: action.error &#125;;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Thanks to discriminated unions, we can access action’s properties inside case blocks in a type-safe way.</p><h2 id="Using-the-hook"><a href="#Using-the-hook" class="headerlink" title="Using the hook"></a>Using the hook</h2><p>All that is left is to pass our reducer to useReducer hook.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [&#123;</span><br><span class="line">  data,</span><br><span class="line">  isLoading,</span><br><span class="line">  error</span><br><span class="line">&#125;, dispatch] = useReducer(reducer, &#123; isLoading: <span class="literal">false</span> &#125;);</span><br></pre></td></tr></table></figure><p>I’m passing the reducer function to the hook along with initial state which has isLoading set to false and the remaining properties undefined. The result is a pair with the current state object as first element (which I’m instantly destructuring) and dispatch function as the second element.</p><p>Next, I need to update the usage of useEffect hook so that it dispatches relevant actions.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> ignore = <span class="literal">false</span>;</span><br><span class="line">    dispatch(&#123; <span class="keyword">type</span>: <span class="string">'request'</span> &#125;);</span><br><span class="line">    axios(<span class="string">`https://hn.algolia.com/api/v1/search?query=<span class="subst">$&#123;query&#125;</span>`</span>).then(</span><br><span class="line">        (results) =&gt; &#123; <span class="keyword">if</span> (!ignore) dispatch(&#123; <span class="keyword">type</span>: <span class="string">'success'</span>, results: results.data &#125;); &#125;,</span><br><span class="line">        (error) =&gt; dispatch(&#123; <span class="keyword">type</span>: <span class="string">'failure'</span>, error &#125;),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123; ignore = <span class="literal">true</span>; &#125;</span><br><span class="line">&#125;, [query]);</span><br></pre></td></tr></table></figure><p>Finally, we should update the JSX to take the new pieces of state into account and show the loading indicator and the error message when available.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input value=&#123;query&#125; onChange=&#123;<span class="function"><span class="params">e</span> =&gt;</span> setQuery(e.target.value)&#125; /&gt;</span><br><span class="line">        &#123;isLoading &amp;&amp; &lt;span&gt;Loading...&lt;<span class="regexp">/span&gt;&#125;</span></span><br><span class="line"><span class="regexp">        &#123;error &amp;&amp; &lt;span&gt;Error: &#123;error&#125;&lt;/</span>span&gt;&#125;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">        &#123;data &amp;&amp; data.hits &amp;&amp; data.hits.map(<span class="function"><span class="params">item</span> =&gt;</span> (</span><br><span class="line">            &lt;li key=&#123;item.objectID&#125;&gt;</span><br><span class="line">            &lt;a href=&#123;item.url&#125;&gt;&#123;item.title&#125;&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>li&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>The whole component implementation can be found here. Note that we’re still using <code>useState</code> hook to store the query. This information is completely unrelated to the rest of the state, therefore there would be no advantage in including it the state managed by <code>useReducer</code>.</p><h2 id="Even-better-state-representation"><a href="#Even-better-state-representation" class="headerlink" title="Even better state representation"></a>Even better state representation</h2><p>If we take a look at the interface representing state of this component, we will notice that some combinations of properties are not valid.</p><p>For example, it is not possible that <code>isLoading === true</code> while <code>data</code> is not empty.</p><p>Similarly, <code>error</code> and <code>data</code> cannot be both defined at the same time.</p><p>How can we improve this? Let’s use discriminated unions again!</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> State =</span><br><span class="line"> | &#123; status: <span class="string">'empty'</span> &#125;</span><br><span class="line"> | &#123; status: <span class="string">'loading'</span> &#125;</span><br><span class="line"> | &#123; status: <span class="string">'error'</span>, error: <span class="built_in">string</span> &#125;</span><br><span class="line"> | &#123; status: <span class="string">'success'</span>, data: HNResponse &#125;</span><br></pre></td></tr></table></figure><p>Why is this approach better? Because it makes illegal states unrepresentable. The previous interface definition allowed certain combinations of property values even though we were sure that they would never occur in reality.</p><p>In a more complex component this could force us to add some type casts or handle impossible situations. Thanks to discriminated unions we can eliminate this issue.</p><p>It is generally a good idea to make your types match reality as closely as possible.</p><p>Please find the updated implementation here.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In this article we have looked at typing the useReducer React hook in a real-world scenario. What’s more, we’ve learned some patterns of typing state and actions using discriminated unions. Finally, we’ve seen how advanced TypeScript features can help make our types more precise.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hooks are a recent addition to React that enable more of your components to be written as functions by providing less complex alternative
      
    
    </summary>
    
    
      <category term="typescript" scheme="https://codewithstyle.info/tags/typescript/"/>
    
      <category term="react" scheme="https://codewithstyle.info/tags/react/"/>
    
      <category term="hooks" scheme="https://codewithstyle.info/tags/hooks/"/>
    
  </entry>
  
  <entry>
    <title>Using React useState hook with TypeScript</title>
    <link href="https://codewithstyle.info/Using-React-useState-hook-with-TypeScript/"/>
    <id>https://codewithstyle.info/Using-React-useState-hook-with-TypeScript/</id>
    <published>2019-08-21T20:33:26.000Z</published>
    <updated>2019-12-02T21:26:20.062Z</updated>
    
    <content type="html"><![CDATA[<p>React hooks are a recent addition to React that make function components have almost the same capabilities as class components. Most of the time, using React hooks in TypeScript is straightforward. </p><p>However, there are some situations when deeper understanding of hooks’ types might prove very useful. In this article, we’re going to focus on the <code>useState</code> hook.</p><p>I’m going to assume that you have a basic understanding of this hook. If this is not the case, please read <a href="https://reactjs.org/docs/hooks-state.html" target="_blank" rel="noopener">this</a> first.</p><h2 id="Reading-the-types"><a href="#Reading-the-types" class="headerlink" title="Reading the types"></a>Reading the types</h2><p>First of all, let’s take a look at the type signature of <code>useState</code>. You’ll see how much information you can extract solely from types, without looking at the docs (or the implementation).</p><p>If you’re only interested in practical examples, skip to the <a href="#Usage-examples">next section</a>.</p><h3 id="Overloads"><a href="#Overloads" class="headerlink" title="Overloads"></a>Overloads</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useState</span>&lt;<span class="title">S</span> = <span class="title">undefined</span>&gt;(<span class="params"></span>): [<span class="title">S</span> | <span class="title">undefined</span>, <span class="title">Dispatch</span>&lt;<span class="title">SetStateAction</span>&lt;<span class="title">S</span> | <span class="title">undefined</span>&gt;&gt;]</span>;</span><br><span class="line">function useState&lt;S&gt;(initialState: S | (() =&gt; S)): [S, Dispatch&lt;SetStateAction&lt;S&gt;&gt;];</span><br></pre></td></tr></table></figure><p>As you can see, there are two <em>versions</em> of <code>useState</code> function. TypeScript lets you define multiple type signatures for a function as it is often the case in JavaScript that a function supports different types of parameters. Multiple type signatures for a single function are called <strong>overloads</strong>.</p><p>Both overloads are generic functions. The type parameter <code>S</code> represents the type of the piece of state stored by the hook. The type argument in the second overload can be inferred from <code>initialState</code>. However, in the first overload, it defaults to <code>undefined</code> unless the type argument is explicitly provided. <strong>If you don’t pass initial state to <code>useState</code>, you should provide the type argument explicitly.</strong></p><h3 id="useState-parameters"><a href="#useState-parameters" class="headerlink" title="useState parameters"></a><code>useState</code> parameters</h3><p>The first overload doesn’t take any parameters - it’s used when you call <code>useState</code> without providing any initial state.</p><p>The second overload accepts <code>initialState</code> as parameter. It’s type is a union of <code>S</code> and <code>() =&gt; S</code>. Why would you pass a function that returns initial state instead of passing the initial state directly? Computing initial state can be expensive. It’s only needed during when the component is mounted. However, in a function component, it would be calculated on every render. <strong>Therefore, you have an option to pass a function that calculates initial state - expensive computation will only be executed once, not on every render.</strong></p><h3 id="useState-return-type"><a href="#useState-return-type" class="headerlink" title="useState return type"></a><code>useState</code> return type</h3><p>Let’s move to the return type. It’s a <strong>tuple</strong> in both cases. Tuple is like an array that has a specific length and contains elements with specific types.</p><p>For the second overload, the return type is <code>[S, Dispatch&lt;SetStateAction&lt;S&gt;&gt;]</code>. The first element of the tuple has type <code>S</code> - the type of the piece of state. It will contain the value retrieved from the component’s state.</p><p>The second element’s type is <code>Dispatch&lt;SetStateAction&lt;S&gt;&gt;</code>. <code>Dispatch&lt;A&gt;</code> is simply defined as <code>(value: A) =&gt; void</code> - a function that takes a value and doesn’t return anything. <code>SetStateAction&lt;S&gt;</code> is defined as <code>S | ((prevState: S) =&gt; S)</code>. Therefore, the type of <code>Dispatch&lt;SetStateAction&lt;S&gt;&gt;</code> is actually <code>(value: S | ((prevState: S) =&gt; S)) =&gt; void</code>. It is a function that takes either an updated version of the piece of state OR a function that produces the updated version based on the previous version. In both cases, we can deduce that the second element of the tuple returned by <code>setState</code> is a function that we can call to update the component’s state.</p><p>The return type of the first overload is the same, but here instead of <code>S</code>, <code>S | undefined</code> is used anywhere. If we don’t provide initial state it will store <code>undefined</code> initially. It means that <code>undefined</code> has to be included in the type of the piece of state stored by the hook.</p><h2 id="Usage-examples"><a href="#Usage-examples" class="headerlink" title="Usage examples"></a>Usage examples</h2><p>Most of the time you don’t need to bother with providing type arguments to <code>useState</code> - the compiler will infer the correct type for you. However, in some situations type inference might not be enough.</p><h3 id="Empty-initial-state"><a href="#Empty-initial-state" class="headerlink" title="Empty initial state"></a>Empty initial state</h3><p>The first type of situation is when you don’t want to provide initial state to <code>useState</code>. </p><p>As we saw in the type definition, the type argument <code>S</code> for the parameterless defaults to <code>undefined</code>. Therefore, the type of <code>pill</code> should be inferred to <code>undefined</code>. However, due to a <a href="https://github.com/microsoft/TypeScript/issues/32003" target="_blank" rel="noopener">design limitation in TypeScript</a>, it’s actually inferred to <code>any</code>. </p><p>Similarly, <code>setPill</code>‘s type is inferred to <code>React.Dispatch&lt;any&gt;</code>. It’s really bad, as nothing would stop us from calling it with invalid argument: <code>setPill({ hello: 5 })</code>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> PillSelector: React.FunctionComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [pill, setPill] = useState();</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;button onClick=&#123;<span class="function"><span class="params">()</span> =&gt;</span> setPill(<span class="string">'red'</span>)&#125;&gt;Red pill&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;button onClick=&#123;() =&gt; setPill('blue')&#125;&gt;Blue pill&lt;/</span>button&gt;</span><br><span class="line">            &lt;span&gt;You chose &#123;pill&#125; pill!&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In order to fix this issue, we need to pass a type argument to <code>setState</code>. We treat <code>pill</code> as text in JSX, so our fist bet could be <code>string</code>. However, let’s be more precise and limit the type to only allow values that we expect.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [pill, setPill] = useState&lt;<span class="string">'red'</span> | <span class="string">'blue'</span>&gt;();</span><br></pre></td></tr></table></figure><p>Note that the inferred type of <code>pill</code> is now <code>&quot;red&quot; | &quot;blue&quot; | undefined</code> (because this piece of state is initially empty). With <code>strictNullChecks</code> enabled TypeScript wouldn’t let us call anything on <code>pill</code>:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 🛑 Object is possibly 'undefined'.ts(2532)</span></span><br><span class="line">&lt;span&gt;You chose &#123;pill.toUpperCase()&#125; pill!&lt;<span class="regexp">/span&gt;</span></span><br></pre></td></tr></table></figure><p>…unless we check the value first:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✅ No errors!</span></span><br><span class="line">&#123;pill &amp;&amp; &lt;span&gt;You chose &#123;pill.toUpperCase()&#125; pill!&lt;<span class="regexp">/span&gt;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Clearable-state"><a href="#Clearable-state" class="headerlink" title="Clearable state"></a>Clearable state</h3><p>Another kind of situation when you would provide a type argument to <code>useState</code> is when initial state is defined, but you want to be able to <strong>clear</strong> the state later.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> PillSelector: React.FunctionComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [pill, setPill] = useState(<span class="string">'blue'</span>);</span><br><span class="line">    <span class="keyword">return</span> (&lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="function"><span class="params">()</span> =&gt;</span> setPill(<span class="string">'red'</span>)&#125;&gt;Red pill&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;() =&gt; setPill('blue')&#125;&gt;Blue pill&lt;/</span>button&gt;</span><br><span class="line">        <span class="comment">// 🛑 Argument of type 'undefined' is not assignable </span></span><br><span class="line">        <span class="comment">// to parameter of type 'SetStateAction&lt;string&gt;'.</span></span><br><span class="line">        &lt;button onClick=&#123;<span class="function"><span class="params">()</span> =&gt;</span> setPill(<span class="literal">undefined</span>)&#125;&gt;Reset&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &#123;pill &amp;&amp; &lt;span&gt;You chose &#123;pill.toUpperCase()&#125; pill!&lt;/</span>span&gt;&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>Since initial state is passed to <code>useState</code>, the type of <code>pill</code> gets inferred to <code>string</code>. Therefore, when you try to pass <code>undefined</code> to it, TypeScript will error.</p><p>You can fix the problem by providing the type argument.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [pill, setPill] = useState&lt;<span class="string">'blue'</span> | <span class="string">'red'</span> | <span class="literal">undefined</span>&gt;(<span class="string">'blue'</span>);</span><br></pre></td></tr></table></figure><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Wrapping up, we’ve analysed the type definitions of <code>useState</code> function thoroughly. Based on this information, we saw when providing the type argument to <code>useState</code> might be necessary and when the inferred type is sufficient.</p><p>I like how hooks are great example of how much information can be read from type definitions. They really show off the power of static typing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;React hooks are a recent addition to React that make function components have almost the same capabilities as class components. Most of t
      
    
    </summary>
    
    
      <category term="typescript" scheme="https://codewithstyle.info/tags/typescript/"/>
    
      <category term="react" scheme="https://codewithstyle.info/tags/react/"/>
    
      <category term="generics" scheme="https://codewithstyle.info/tags/generics/"/>
    
      <category term="hooks" scheme="https://codewithstyle.info/tags/hooks/"/>
    
  </entry>
  
  <entry>
    <title>Typing Higher Order Components in React</title>
    <link href="https://codewithstyle.info/Typing-Higher-Order-Components-in-React/"/>
    <id>https://codewithstyle.info/Typing-Higher-Order-Components-in-React/</id>
    <published>2019-08-14T21:12:18.000Z</published>
    <updated>2019-12-02T21:26:20.062Z</updated>
    
    <content type="html"><![CDATA[<p>Some time ago <a href="https://codewithstyle.info/TypeScript-3-4-hidden-gem-propagated-generic-type-arguments/">I wrote about</a> generic type arguments propagation feature added in TypeScript version 3.4. I explained how this improvement makes point-free style programming possible in TypeScript. </p><p>As it turns out, there are more cases in which propagation of generic type arguments is desirable. One of them is passing a generic component to a Higher Order Component in React.</p><p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">.<a href="https://twitter.com/orta?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">@orta</a> Do you know how to Propagate Generics across higher-order-components?<br><br>I have a generic component A, whose props is type Props = PubProps&lt;B&gt; &amp; InjectedProps<br>I have a <code>bind()</code>-HoC that injects InjectedProps<br><br>I want return value from bind:<br>APrime&lt;B&gt; accepting PubProps&lt;B&gt;</p>&mdash; Frederic Barthelemy (@fbartho) <a href="https://twitter.com/fbartho/status/1154542230641623040?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">July 26, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p><p><em>The post is inspired by the problem <a href="https://twitter.com/fbartho" target="_blank" rel="noopener">Frederic Barthelemy</a> tweeted about and asked me to have a look at.</em></p><h2 id="Higher-Order-Components"><a href="#Higher-Order-Components" class="headerlink" title="Higher Order Components"></a>Higher Order Components</h2><p>I’m not going to give a detailed explanation, as there are already plenty to be found on the internet. <strong>Higher Order Component (HOC)</strong> is a concept of the React framework that lets you abstract cross-cutting functionality and provide it to multiple components.</p><p>Technically, HOC is a function that takes a component and returns another component. It usually augments the source component with some behavior or provides some properties required by the source component.</p><p>Here is an example of a HOC in TypeScript:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> withLoadingIndicator = </span><br><span class="line">    &lt;P <span class="keyword">extends</span> &#123;&#125;&gt;(Component: ComponentType&lt;P&gt;): ComponentType&lt;P &amp; &#123; isLoading: <span class="built_in">boolean</span> &#125;&gt; =&gt; </span><br><span class="line">        (&#123; isLoading, ...props &#125;) =&gt;</span><br><span class="line">            isLoading </span><br><span class="line">                ? &lt;span&gt;Loading...&lt;<span class="regexp">/span&gt; </span></span><br><span class="line"><span class="regexp">                : &lt;Component &#123;...props as P&#125; /</span>&gt;;</span><br></pre></td></tr></table></figure><p>As you can deduce from the type signature, <code>withLoadingIndicator</code> is a function that accepts a component with <code>P</code>-shaped properties and returns a component that additionally has <code>isLoading</code> property. It adds the behavior of displaying loading indicator based on <code>isLoading</code> property.</p><p><img src="/images/posts/hoc.png" alt="HOC type"></p><h2 id="Problem-passing-a-generic-component-to-a-HOC"><a href="#Problem-passing-a-generic-component-to-a-HOC" class="headerlink" title="Problem: passing a generic component to a HOC"></a>Problem: passing a generic component to a HOC</h2><p>So far so good. However, let’s imagine that we have a <strong>generic component</strong> <code>Header</code>:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Header&lt;TContent&gt; <span class="keyword">extends</span> React.Component&lt;HeaderProps&lt;TContent&gt;&gt; &#123; &#125;</span><br></pre></td></tr></table></figure><p>…where <code>HeaderProps</code> is a generic type that represents <code>Header</code>‘s props given the type of associated content (<code>TContent</code>):</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> HeaderProps&lt;TContent&gt; = &#123;</span><br><span class="line">    content: TContent;</span><br><span class="line">    title: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Next, let’s use <code>withLoadingIndicator</code> with this <code>Header</code> component.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HeaderWithLoader = withLoadingIndicator(Header);</span><br></pre></td></tr></table></figure><p>The question is, what is the inferred type of <code>HeaderWithLoader</code>? Unfortunately, it’s <code>React.ComponentType&lt;HeaderProps&lt;unknown&gt; &amp; { isLoading: boolean; }&gt;</code> in TypeScript 3.4 and later or <code>React.ComponentType&lt;HeaderProps&lt;{}&gt; &amp; { isLoading: boolean; }&gt;</code> in previous versions. </p><p>As you can see, <code>HeaderWithLoader</code> is <strong>not</strong> a generic component. In other words, generic type argument of <code>Header</code> was <strong>not propagated</strong>. Wait… doesn’t TypeScript 3.4 introduce generic type argument propagation?</p><h2 id="Solution-use-function-components"><a href="#Solution-use-function-components" class="headerlink" title="Solution: use function components!"></a>Solution: use function components!</h2><p>Actually, it does. However, it only works for <strong>functions</strong>. <code>Header</code> is a generic class, not a generic function. Therefore, the improvement introduced in TypeScript 3.4 doesn’t apply here ☹️</p><p>Fortunately, we have <strong>function components</strong> in React. We can make type argument propagation work if we limit <code>withLoadingIndicator</code> to only work with function components.</p><p>Unfortunately, we cannot use <code>FunctionComponent</code> type since it is defined as an interface, not a function type. However, a function component is nothing else but a generic function that takes props and returns <code>React.ReactElement</code>. Let’s define our own type representing function components.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> SimpleFunctionComponent&lt;P&gt; = <span class="function">(<span class="params">props: P</span>) =&gt;</span> React.ReactElement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> withLoadingIndicator: </span><br><span class="line">    &lt;P&gt;<span class="function">(<span class="params">Component: SimpleFunctionComponent&lt;P&gt;</span>) =&gt;</span> </span><br><span class="line">        (SimpleFunctionComponent&lt;P &amp; &#123; isLoading: <span class="built_in">boolean</span> &#125;&gt;);</span><br></pre></td></tr></table></figure><p><em>By using <code>SimpleFunctionComponent</code> instead of <code>FunctionComponent</code> we loose access to properties such as <code>defaultProps</code>, <code>propTypes</code>, etc., which we don’t need anyway.</em></p><p>Obviously, we need to change <code>Header</code> to be a function component, not a class component:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> Header: &lt;TContent&gt;<span class="function">(<span class="params">props: HeaderProps&lt;TContent&gt;</span>) =&gt;</span> React.ReactElement;</span><br></pre></td></tr></table></figure><p><em>We wouldn’t be able to use <code>FunctionComponent</code> here anyway, since <code>Header</code> is a generic component</em>.</p><p>Let’s now take a look at the inferred type of <code>HeaderWithLoader</code>. It’s…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;TContent&gt;(props: HeaderProps&lt;TContent&gt; &amp; &#123; isLoading: boolean &#125;) =&gt; React.ReactElement</span><br></pre></td></tr></table></figure><p>…which looks very much like a generic function component!</p><p>Indeed, we can use <code>Header</code> as a regular component in JSX:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Foo <span class="keyword">extends</span> React.Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;HeaderWithLoader </span><br><span class="line">                title=<span class="string">"Hello"</span> </span><br><span class="line">                content=&#123;<span class="number">12345</span>&#125; </span><br><span class="line">                isLoading=&#123;<span class="literal">false</span>&#125; /&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Most importantly, <code>HeaderWithLoader</code> is typed correctly!</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>As you can see, typing HOCs in React can get tricky. The proposed solution is really a workaround - ideally, TypeScript should be able to propagate generic type arguments for all generic types (not only functions). </p><p>Anyway, this example demonstrates how important it is to stay on top of the features introduced in new TypeScript releases. Before version 3.4, it wouldn’t be even possible to get this HOC typed correctly.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Some time ago &lt;a href=&quot;https://codewithstyle.info/TypeScript-3-4-hidden-gem-propagated-generic-type-arguments/&quot;&gt;I wrote about&lt;/a&gt; generic
      
    
    </summary>
    
    
      <category term="typescript" scheme="https://codewithstyle.info/tags/typescript/"/>
    
      <category term="functional programming" scheme="https://codewithstyle.info/tags/functional-programming/"/>
    
      <category term="react" scheme="https://codewithstyle.info/tags/react/"/>
    
      <category term="generics" scheme="https://codewithstyle.info/tags/generics/"/>
    
  </entry>
  
  <entry>
    <title>5 Commandments for TypeScript programmers</title>
    <link href="https://codewithstyle.info/5-commandments-for-TypeScript-programmers/"/>
    <id>https://codewithstyle.info/5-commandments-for-TypeScript-programmers/</id>
    <published>2019-07-16T18:09:53.000Z</published>
    <updated>2019-12-02T21:26:20.060Z</updated>
    
    <content type="html"><![CDATA[<p>More and more projects and teams are adopting TypeScript. However, there is a massive difference between just using TypeScript and taking the most out of it. </p><p>I present to you this list of high-level TypeScript best practices that will help you take advantage of TypeScript to the fullest possible extent.</p><p><strong>This article is also available in Russian: <a href="https://habr.com/ru/post/461565" target="_blank" rel="noopener">5 заповедей TypeScript-разработчика</a></strong> (by <a href="https://dev.to/bevalorous" target="_blank" rel="noopener">Vadim Belorussov</a>).</p><h2 id="Do-not-lie"><a href="#Do-not-lie" class="headerlink" title="Do not lie"></a>Do not lie</h2><p><strong>Types are a contract.</strong> What does it mean? When you implement a function, its type is a promise to other developers (or to your future self!) that when they call it, it will return a specific kind of value.</p><p>In the following example, the type of <code>getUser</code> promises that it will return an object that will <strong>always</strong> have two properties: <code>name</code> and <code>age</code>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params">id: <span class="built_in">number</span></span>): <span class="title">User</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure><p>TypeScript is a very flexible language. It’s full of compromises made in order to make its adoption easier. For example, it allows you to implement <code>getUser</code> like this:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params">id: <span class="built_in">number</span></span>): <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; age: <span class="number">12</span> &#125; <span class="keyword">as</span> User;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Don’t do this! It’s a LIE. By doing this, you LIE to other developers (who will use this function in their functions). They expect the object returned by <code>getUser</code> to always have some <code>name</code>. But it doesn’t! Then, what happens when your teammate writes <code>getUser(1).name.toString()</code>? You know it well…</p><p>Of course, this lie seems very obvious. However, when working with a huge codebase, you will often find yourself in a situation when a value you want to return (or pass) <em>almost</em> matches the expected type. <strong>Figuring out the reason for type mismatch takes time and effort</strong> and you are in a hurry… so you decide to cast. </p><p>However, by doing this, you <strong>violate the holy contract</strong>. It’s ALWAYS better to take time to figure out why types do not match than to do the cast. It’s very likely that some runtime bug is lurking under the surface.</p><p><strong>Don’t lie. Respect your contracts.</strong></p><h2 id="Be-precise"><a href="#Be-precise" class="headerlink" title="Be precise"></a>Be precise</h2><p><strong>Types are documentation.</strong> When you document a function, don’t you want to convey as much information as possible?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Returns an object</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params">id</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns an object with two properies: name and age</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params">id</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If id is a number and a user with given id exists,</span></span><br><span class="line"><span class="comment">// returns an object with two properies: name and age.</span></span><br><span class="line"><span class="comment">// Otherwise, returns undefined.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params">id</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure><p>Which comment for <code>getUser</code> would you prefer? The more you know about what it returns, the better. For example, knowing that it could return <code>undefined</code>, you can write an <code>if</code> statement to check if the value it returned is defined before accessing its properties.</p><p>It’s exactly the same with types. The more precise a type is, the more information it conveys. </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserType</span>(<span class="params">id: <span class="built_in">number</span></span>): <span class="title">string</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserType</span>(<span class="params">id: <span class="built_in">number</span></span>): '<span class="title">standard</span>' | '<span class="title">premium</span>' | '<span class="title">admin</span>' </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure><p>The second version of <code>getUserType</code> is much more informative, and hence it puts the caller in a much better situation. It’s easier to handle a value if you know that it is <strong>for sure</strong> (contracts, remember?) one of the three strings than if it can be any string. For starters, you know for sure that the value is not an empty string.</p><p>Let’s see a more realistic example. <code>State</code> type represents the state of a component that fetches some data from the backend. Is this type precise?</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> State &#123;</span><br><span class="line">  isLoading: <span class="built_in">boolean</span>;</span><br><span class="line">  data?: <span class="built_in">string</span>[];</span><br><span class="line">  errorMessage?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The consumer of this type must handle some unlikely combinations of property values. For example, it’s not possible that both <code>data</code> and <code>errorMessage</code> will be defined (data fetching can either be successful or result in an error). </p><p>We can make the type much more precise with the help of discriminated union types:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> State =</span><br><span class="line">   | &#123; status: <span class="string">'loading'</span> &#125;</span><br><span class="line">   | &#123; status: <span class="string">'successful'</span>, data: <span class="built_in">string</span>[] &#125;</span><br><span class="line">   | &#123; status: <span class="string">'failed'</span>, errorMessage: <span class="built_in">string</span> &#125;;</span><br></pre></td></tr></table></figure><p>Now, the consumer of this type has much more information. They don’t need to handle illegal combinations of property values.</p><p><strong>Be precise. Convey as much information as possible in your types.</strong></p><h2 id="Start-with-types"><a href="#Start-with-types" class="headerlink" title="Start with types"></a>Start with types</h2><p>Since types are both contract and documentation, they’re great for <strong>designing</strong> your functions (or methods).</p><p>There are many articles around in the internet that advise software engineers to <strong>think before they write code</strong>. I totally agree with this approach. It’s tempting to jump straight into code, but it often leads to some bad decisions. Spending some time thinking about the implementation always pays off.</p><p>Types are super helpful in this process. <em>Thinking</em> can result in writing down the type signatures of functions involved in your solution. It’s awesome because it lets you focus on <em>what</em> your functions do instead of <em>how</em> they achive it.</p><p>React JS has a concept of Higher Order Components. They are functions that augment given component in some way. For example, you could create a <code>withLoadingIndicator</code> Higher Order Component that adds a loading indicator to an existing component.</p><p>Let’s write the type signature for this function. It takes a component and returns a component. We can use React’s <code>ComponentType</code> to indicate a component.</p><p><code>ComponentType</code> is a generic type parameterized by the type of properties of the component. <code>withLoadingIndicator</code> takes a component and returns a new component that either shows the original component or shows a loading indicator. The decision is made based on the value of a new boolean property <code>isLoading</code>. Therefore, the resulting component should require the same properties as the original component plus the new property.</p><p>Let’s finalize the type. <code>withLoadingIndicator</code> takes a component of type <code>ComponentType&lt;P&gt;</code> where <code>P</code> denotes the type of the properties. It returns a component with augmented properties of type <code>P &amp; { isLoading: boolean }</code>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> withLoadingIndicator = &lt;P&gt;(Component: ComponentType&lt;P&gt;) </span><br><span class="line">    : ComponentType&lt;P &amp; &#123; isLoading: <span class="built_in">boolean</span> &#125;&gt; =&gt;</span><br><span class="line">        (&#123; isLoading, ...props &#125;) =&gt; &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure><p>Figuring out the type of this function forced us to think about its input and its output. In other words, it made us <em>design it</em>. Writing the implementation is a piece of cake now.</p><p><strong>Start with types. Let types force you to design before implementing.</strong></p><h2 id="Embrace-strictness"><a href="#Embrace-strictness" class="headerlink" title="Embrace strictness"></a>Embrace strictness</h2><p>The first three points require you to pay a lot of attention to types. Fortunately, you are not alone in the task - TypeScript compiler will often let you know when your types lie or when they’re not precise enough.</p><p>You can make the compiler even more helpful by enabling <code>--strict</code> compiler flag. It is a meta flag that enables all strict type checking options: <code>--noImplicitAny</code>, <code>--noImplicitThis</code>, <code>--alwaysStrict</code>, <code>--strictBindCallApply</code>, <code>--strictNullChecks</code>, <code>--strictFunctionTypes</code> and <code>--strictPropertyInitialization</code>.</p><p>What do they do? In general, enabling them results in more TypeScript compiler errors. This is good! More compiler errors mean more help from the compiler.</p><p>Let’s see how enabling <code>--strictNullChecks</code> helps you identify a lie.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params">id: <span class="built_in">number</span></span>): <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (id &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; name: <span class="string">'John'</span>, age: <span class="number">12</span> &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The type of <code>getUser</code> promises that it will always return a <code>User</code>. However, as you can see in the implementation, it can also return an <code>undefined</code> value!</p><p>Fortunately, enabling  <code>--strictNullChecks</code> results in a compiler error:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Type &apos;undefined&apos; is not assignable to type &apos;User&apos;.</span><br></pre></td></tr></table></figure><p>TypeScript compiler detected the lie. You can get rid of the error by telling the truth: </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params">id: <span class="built_in">number</span></span>): <span class="title">User</span> | <span class="title">undefined</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure><p><strong>Embrace type checking strictness. Let the compiler watch your steps.</strong></p><h2 id="Stay-up-to-date"><a href="#Stay-up-to-date" class="headerlink" title="Stay up to date"></a>Stay up to date</h2><p>TypeScript language is being developed at a very fast pace. There is a new release every two months. Each release brings in significant language improvements and new features.</p><p>It is often the case that new language features allow for more precise types and stricter type checking.</p><p>For example, version 2.0 introduced Discriminated Union Types (which I mentioned in <em>Be precise</em>).</p><p>Version 3.2 introduced <code>--strictBindCallApply</code> compiler option which enables correct typing of <code>bind</code>, <code>call</code> and <code>apply</code> functions.</p><p><a href="/TypeScript-3-4-hidden-gem-propagated-generic-type-arguments/">Version 3.4 improved type inference in higher order functions</a>, making it easier to use precise type when writing code in functional style.</p><p>My point here is that it really pays off to be familiar with language features introduced in the latest releases of TypeScript. They can often help you adhere to the other four commandments from this list.</p><p>A good starting point is <a href="https://github.com/Microsoft/TypeScript/wiki/Roadmap" target="_blank" rel="noopener">the official TypeScript roadmap</a>. It’s also a good idea to check out <a href="https://devblogs.microsoft.com/typescript/" target="_blank" rel="noopener">TypeScript section of the Microsoft Devblog</a> regularly as all release announcements are made there.</p><p><strong>Stay up to date with new language features and make the work for you.</strong></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>I hope you find the list useful. Like anything in life, these commandments shouldn’t be followed blindly. However, I firmly believe those rules will make you a better TypeScript programmer.</p><p>I’d love to hear your thoughts about it in the comments section.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;More and more projects and teams are adopting TypeScript. However, there is a massive difference between just using TypeScript and taking
      
    
    </summary>
    
    
      <category term="typescript" scheme="https://codewithstyle.info/tags/typescript/"/>
    
      <category term="best practices" scheme="https://codewithstyle.info/tags/best-practices/"/>
    
  </entry>
  
  <entry>
    <title>The meaning of union and intersection types</title>
    <link href="https://codewithstyle.info/The-meaning-of-union-and-intersection-types/"/>
    <id>https://codewithstyle.info/The-meaning-of-union-and-intersection-types/</id>
    <published>2019-06-27T20:44:02.000Z</published>
    <updated>2019-12-02T21:26:20.061Z</updated>
    
    <content type="html"><![CDATA[<p>Union types are fairly popular in TypeScript. You might have already used them multiple times. Intersection types are slightly less common. They seem to cause a little bit more confusion.</p><p>Did you ever wonder where do those names come from? While you might have some intuition about what a union of two types is, the intersection is usually not understood well.</p><p>After reading this article, you will have a better understanding of those types which will make you more confident when using them in your codebases.</p><h2 id="Simple-union-types"><a href="#Simple-union-types" class="headerlink" title="Simple union types"></a>Simple union types</h2><p>Union type is very often used with either <code>null</code> or <code>undefined</code>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sayHello = <span class="function">(<span class="params">name: <span class="built_in">string</span> | <span class="literal">undefined</span></span>) =&gt;</span> &#123; <span class="comment">/* ... */</span> &#125;;</span><br></pre></td></tr></table></figure><p>For example, the type of <code>name</code> here is <code>string | undefined</code> which means that either a <code>string</code> OR an <code>undefined</code> value can be passed to <code>sayHello</code>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sayHello(<span class="string">"milosz"</span>);</span><br><span class="line">sayHello(<span class="literal">undefined</span>);</span><br></pre></td></tr></table></figure><p>Looking at the example, you can intuit that a union of types <code>A</code> and <code>B</code> is a type that accepts both <code>A</code> and <code>B</code> values.</p><h2 id="Union-and-intersection-of-object-types"><a href="#Union-and-intersection-of-object-types" class="headerlink" title="Union and intersection of object types"></a>Union and intersection of object types</h2><p>This intuition also works for complex types.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Foo &#123;</span><br><span class="line">    foo: <span class="built_in">string</span>;</span><br><span class="line">    xyz: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Bar &#123;</span><br><span class="line">    bar: <span class="built_in">string</span>;</span><br><span class="line">    xyz: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sayHello = <span class="function">(<span class="params">obj: Foo | Bar</span>) =&gt;</span> &#123; <span class="comment">/* ... */</span> &#125;;</span><br><span class="line"></span><br><span class="line">sayHello(&#123; foo: <span class="string">"foo"</span>, xyz: <span class="string">"xyz"</span> &#125;);</span><br><span class="line">sayHello(&#123; bar: <span class="string">"bar"</span>, xyz: <span class="string">"xyz"</span> &#125;);</span><br></pre></td></tr></table></figure><p><code>Foo | Bar</code> is a type that has either all required properties of <code>Foo</code> OR all required properties of <code>Bar</code>. Inside <code>sayHello</code> it’s only possible to access <code>obj.xyz</code> because it’s the only property that is included in both types.</p><p>What about the intersection of <code>Foo</code> and <code>Bar</code>, though?</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sayHello = <span class="function">(<span class="params">obj: Foo &amp; Bar</span>) =&gt;</span> &#123; <span class="comment">/* ... */</span> &#125;;</span><br><span class="line"></span><br><span class="line">sayHello(&#123; foo: <span class="string">"foo"</span>, bar: <span class="string">"bar"</span>, xyz: <span class="string">"xyz"</span> &#125;);</span><br></pre></td></tr></table></figure><p>Now <code>sayHello</code> requires the argument to have both <code>foo</code> AND <code>bar</code> properties. Inside <code>sayHello</code> it’s possible to access both <code>obj.foo</code>, <code>obj.bar</code> and <code>obj.xyz</code>.</p><p>Hmm, but what does it have to <em>intersection</em>? One could argue that since <code>obj</code> has properties of both <code>Foo</code> and <code>Bar</code>, it sounds more like a union of properties, not intersection. Similarly, a union of two object types gives you a type that only has the intersection of properties of constituent types.</p><p>It sounds confusing. I even stumbled upon a <a href="https://github.com/Microsoft/TypeScript/issues/18383" target="_blank" rel="noopener">GitHub issue</a> in TypeScript repository ranting about naming of these types. To understand the naming better we need to look at types from a different perspective.</p><h2 id="Set-theory"><a href="#Set-theory" class="headerlink" title="Set theory"></a>Set theory</h2><p>Do you remember a concept called <em>sets</em> from math classes? In mathematics, a set is a collection of objects (for example numbers). For example, <code>{1, 2, 7}</code> is a set. All positive numbers can also form a set (an infinite one).</p><p>Sets can be added together (a <strong>union</strong>). A union of <code>{1, 2}</code> and <code>{4, 5}</code> is <code>{1, 2, 4, 5}</code>.</p><p>Sets can also be intersected. <strong>Intersection</strong> of two sets is a set that only contains those numbers that are present in both sets. So, an intersection of <code>{1, 2, 3}</code> and <code>{3, 4, 5}</code> is <code>{3}</code>.</p><p>Let’s imagine two sets: <code>Squares</code> and <code>RedThings</code>.</p><p>The union of <code>Squares</code> and <code>RedThings</code> is a set that contains both squares and red things.</p><p>However, the intersection of <code>Squares</code> and <code>RedThings</code> is a set that only contains <strong>red squares</strong>.</p><p><img src="/images/posts/intersection-shapes.png" alt="Intersection of sets"></p><h2 id="Relationship-between-types-and-sets"><a href="#Relationship-between-types-and-sets" class="headerlink" title="Relationship between types and sets"></a>Relationship between types and sets</h2><p>Computer science and mathematics overlap in many places. One of such places is type systems.</p><p>A type, when looked at from a mathematical perspective, is a <strong>set of all possible values of that type</strong>. For example the <code>string</code> type is a set of all possible strings: <code>{&#39;a&#39;, &#39;b&#39;, &#39;ab&#39;, ...}</code>. Of course, it’s an infinite set.</p><p>Similarly, <code>number</code> type is a set of all possible numbers: <code>{1, 2, 3, 4, ...}</code>.</p><p>Type <code>undefined</code> is a set that only contains a single value: <code>{ undefined }</code>.</p><p>What about object types (such as interfaces)? Type <code>Foo</code> is a <strong>set of all object that contain <code>foo</code> and <code>xyz</code> properties</strong>.</p><h2 id="Understanding-union-and-intersection-types"><a href="#Understanding-union-and-intersection-types" class="headerlink" title="Understanding union and intersection types"></a>Understanding union and intersection types</h2><p>Armed with this knowledge, you’re now ready to understand the meaning of union and intersection types.</p><p>Union type <code>A | B</code> represents a set that is a union of the set of values associated with type <code>A</code> and the set of values associated with type <code>B</code>.</p><p>Intersection type <code>A &amp; B</code> represents a set that is an intersection of the set of values associated with type <code>A</code> and the set of values associated with type <code>B</code>.</p><p>Therefore, <code>Foo | Bar</code> represents <strong>a union</strong> of the set of objects having <code>foo</code> and <code>xyz</code> properties and the set of objects having <code>bar</code> and <code>xyz</code>. Objects belonging to such set all have <code>xyz</code> property. Some of them have <code>foo</code> property and the others have <code>bar</code> property.</p><p><code>Foo &amp; Bar</code> represents <strong>an intersection</strong> of the set of objects having <code>foo</code> and <code>xyz</code> properties and the set of objects having <code>bar</code> and <code>xyz</code>. In other words, the set contains objects that belong to sets represented by both <code>Foo</code> and <code>Bar</code>. Only objects that have all three properties (<code>foo</code>, <code>bar</code> and <code>xyz</code>) belong to the intersection.</p><h2 id="Real-world-example-of-intersection-type"><a href="#Real-world-example-of-intersection-type" class="headerlink" title="Real-world example of intersection type"></a>Real-world example of intersection type</h2><p>Union types are quite widespread so let’s focus on an example of an intersection type.</p><p>In React, when you declare a class component, you can parameterise it with thy type of its properties:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Counter <span class="keyword">extends</span> Component&lt;CounterProps&gt; &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure><p>Inside the class, you can access the properies via <code>this.props</code>. However, the type of <code>this.props</code> is not simply <code>CounterProps</code>, but: </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Readonly&lt;CounterProps&gt; &amp; Readonly&lt;&#123; children?: ReactNode; &#125;&gt;</span><br></pre></td></tr></table></figure><p>The reason for this is that React components can accept children elements:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Counter&gt;&lt;span&gt;Hello&lt;<span class="regexp">/span&gt;&lt;/</span>Counter&gt;</span><br></pre></td></tr></table></figure><p>The children element tree is accessible to the component via <code>children</code> prop. The type of <code>this.props</code> reflects that. It’s an intersection of (readonly) <code>CounterProps</code> and a (readonly) object type with an optional <code>children</code> property. </p><p>In terms of sets, it’s an intersecion of the set of objects that have properties as defined in <code>CounterProps</code> and the set of objects that have optional <code>children</code> property. The result is a set of objects that have both all properties of <code>CounterProps</code> and the optional <code>children</code> property.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>That’s it! I hope this article helps you wrap your head around union and intersection types. As it’s often the case in computer science, understanding the fundamentals makes you better at grasping programming concepts.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Union types are fairly popular in TypeScript. You might have already used them multiple times. Intersection types are slightly less commo
      
    
    </summary>
    
    
      <category term="typescript" scheme="https://codewithstyle.info/tags/typescript/"/>
    
      <category term="basics" scheme="https://codewithstyle.info/tags/basics/"/>
    
  </entry>
  
  <entry>
    <title>Strict function types in TypeScript: covariance, contravariance and bivariance</title>
    <link href="https://codewithstyle.info/Strict-function-types-in-TypeScript-covariance-contravariance-and-bivariance/"/>
    <id>https://codewithstyle.info/Strict-function-types-in-TypeScript-covariance-contravariance-and-bivariance/</id>
    <published>2019-05-30T19:45:55.000Z</published>
    <updated>2019-12-02T21:26:20.061Z</updated>
    
    <content type="html"><![CDATA[<p>Let’s talk about one of the less well known strict type checking options - <code>strictFunctionTypes</code>. It helps you avoid another class of bugs, and it’s also an excellent opportunity to learn about some fundamental computer science concepts: <strong>covariance</strong>, <strong>contravariance</strong>, and <strong>bivariance</strong>.</p><p>Strict function type checking was introduced in TypeScript 2.6. Its definition in TypeScript documentation refers to an enigmatic term: <strong>bivariance</strong>.</p><blockquote><p>Disable bivariant parameter checking for function types.</p></blockquote><h2 id="What-bugs-can-strictFunctionTypes-catch"><a href="#What-bugs-can-strictFunctionTypes-catch" class="headerlink" title="What bugs can strictFunctionTypes catch?"></a>What bugs can <code>strictFunctionTypes</code> catch?</h2><p>First of all, let’s see an example of a bug that can be caught by enabling this flag.</p><p>In the following example, <code>fetchArticle</code> is a function that accepts a callback to be executed after an article is fetched from some backend service. </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Article &#123;</span><br><span class="line">    title: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function fetchArticle(onSuccess: (article: Article) =&gt; void) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Interestingly, TypeScript with default settings compiles the following code without errors.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ArticleWithContent <span class="keyword">extends</span> Article &#123;</span><br><span class="line">    content: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fetchArticle(<span class="function">(<span class="params">r: ArticleWithContent</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(r.content.toLowerCase());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Unfortunately, this code can result in a runtime error. The function passed as a callback to <code>fetchArticle</code> only knows how to deal with with a specific subset of <code>Article</code> objects - those that also have <code>content</code> property.</p><p>However, <code>fetchArticle</code> can fetch all kinds of articles - including those that only have <code>title</code> defined. In such case, <code>r.content</code> is undefined, and runtime exception is thrown.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: undefined is not an object (evaluating &apos;r.content.toLowerCase&apos;)</span><br></pre></td></tr></table></figure><p>Fortunately, enabling <code>strictFunctionTypes</code> results in a <strong>compile-time error</strong>. A compile-time error is always better than a runtime error, as it surfaces before users run your code.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Argument of type &apos;(r: ArticleWithContent) =&gt; void&apos; is not assignable to parameter of type &apos;(article: Article) =&gt; void&apos;.</span><br></pre></td></tr></table></figure><h2 id="Covariance-contravariance-and-bivariance"><a href="#Covariance-contravariance-and-bivariance" class="headerlink" title="Covariance, contravariance, and bivariance"></a>Covariance, contravariance, and bivariance</h2><p>If you just wanted to learn what <code>strictFunctionTypes</code> does, you can stop reading right now. However, I encourage you to follow along and learn some background behind this check.</p><p>First, let’s introduce a type to represent generic single-argument callbacks.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Callback&lt;T&gt; = <span class="function">(<span class="params">value: T</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchArticle</span>(<span class="params">onSuccess: Callback&lt;Article&gt;</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> callback: Callback&lt;ArticleWithContent&gt;;</span><br><span class="line">fetchArticle(callback);</span><br></pre></td></tr></table></figure><p>The reason <code>fetchArticle</code> shouldn’t accept <code>callback</code> is that the callback is too specific. It only works on a subset of things that can be fed into it.</p><p>The type of <code>callback</code> should not be assignable to the type of <code>onSuccess</code> parameter. </p><p>In other words, the fact that <code>ArticleWithContent</code> is assignable to <code>Article</code> does <em>not</em> imply that<br><code>Callback&lt;ArticleWithContent&gt;</code> is assignable to <code>Callback&lt;Article&gt;</code>. If such implication were true, <code>Callback</code> type would be <strong>covariant</strong>. </p><p>In our case, the opposite is true - <code>Callback&lt;Article&gt;</code> is assignable to <code>Callback&lt;ArticleWithContent&gt;</code>. That’s because a callback that can handle all articles is also able to handle <code>ArticleWithContent</code>. Therefore, <code>Callback</code> is <strong>contravariant</strong>.</p><p>If both implications were true at the same time, then <code>Callback</code> would be <strong>bivariant</strong>.</p><p>Let’s now revisit the definition of <code>strictFunctionTypes</code>.</p><blockquote><p>Disable bivariant parameter checking for function types.</p></blockquote><p>Does it make sense now? With the check enabled, function type parameter positions are checked contravariantly instead of bivariantly.</p><p>On a side note, some function types are excluded from strict function type checks - e.g., function arguments to methods and constructors are still checked bivariantly.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Wrapping up, <code>strictFunctionTypes</code> is a useful compiler flag that helps you catch a class of bugs related to passing function arguments, such as callbacks. </p><p>The concept behind this flag is contravariance, which is a property of a type (type constructor, strictly speaking) that describes its assignability with respect to its type argument.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let’s talk about one of the less well known strict type checking options - &lt;code&gt;strictFunctionTypes&lt;/code&gt;. It helps you avoid another c
      
    
    </summary>
    
    
      <category term="typescript" scheme="https://codewithstyle.info/tags/typescript/"/>
    
      <category term="strict mode" scheme="https://codewithstyle.info/tags/strict-mode/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 3.4 hidden gem: propagated generic type arguments</title>
    <link href="https://codewithstyle.info/TypeScript-3-4-hidden-gem-propagated-generic-type-arguments/"/>
    <id>https://codewithstyle.info/TypeScript-3-4-hidden-gem-propagated-generic-type-arguments/</id>
    <published>2019-03-18T21:18:05.000Z</published>
    <updated>2019-12-02T21:26:20.061Z</updated>
    
    <content type="html"><![CDATA[<p>Everyone’s excited about incremental builds in the upcoming TypeScript version. However, there is another, at least as interesting, feature in this release. Hidden at the very bottom of the <a href="https://devblogs.microsoft.com/typescript/announcing-typescript-3-4-rc/" target="_blank" rel="noopener">TypeScript 3.4 RC announcement</a> lies a humble section called <em>Propagated generic type arguments</em>.</p><p>In fact, <a href="https://en.wikipedia.org/wiki/Anders_Hejlsberg" target="_blank" rel="noopener">Anders Hejlsberg</a> himself is excited about this feature 😉</p><p><blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Really excited about this one…<a href="https://t.co/bbTF9bdFO5" target="_blank" rel="noopener">https://t.co/bbTF9bdFO5</a></p>&mdash; Anders Hejlsberg (@ahejlsberg) <a href="https://twitter.com/ahejlsberg/status/1102694547262328832?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">March 4, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </p><p>So, what’s the meaning of this enigmatic update in TypeScript?</p><p><strong>Note:</strong> at the moment of writing TypeScript 3.4 is still a Release Candidate. You can install it by running <code>npm install typescript@next</code>.</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Let’s have a look at the following example. Imagine that you’re fetching a collection of objects from some backend service and you need to map this collection to an array of identifiers.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  id: <span class="built_in">string</span>;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  birthYear: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getIds</span>(<span class="params">persons: Person[]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> persons.map(<span class="function"><span class="params">person</span> =&gt;</span> person.id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Next, you decide to generalize <code>getIds</code> function so that it works on any collection of objects having the <code>id</code> property.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getIds</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Record</span>&lt;'<span class="title">id</span>', <span class="title">string</span>&gt;&gt;(<span class="params">elements: T[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> elements.map(<span class="function"><span class="params">el</span> =&gt;</span> el.id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Fair enough. However, the code for this simple function is quite verbose. Can we make it more concise?</p><h2 id="Pointfree-style"><a href="#Pointfree-style" class="headerlink" title="Pointfree style"></a>Pointfree style</h2><p>Sure, we can take advantage of a functional programming technique called <strong>pointfree style</strong>. <a href="http://ramdajs.com" target="_blank" rel="noopener">Ramda</a> is a nice library that will let us compose this function from other functions: <code>map</code> and <code>prop</code>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> R <span class="keyword">from</span> <span class="string">'ramda'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getIds = R.map(R.prop(<span class="string">'id'</span>));</span><br></pre></td></tr></table></figure><p><code>map</code> is <em>partially applied</em> with a mapper function <code>prop</code> which extracts the <code>id</code> property from any object. The result of <code>getIds</code> is a function that accepts a collection of object. You can read a more detailed explanation in my article about <a href="https://codewithstyle.info/Better-RxJS-code-with-pointfree-style/">pointfree style</a>.</p><p>Sadly, TypeScript (pre 3.4) has bad news for you. The type of <code>getIds</code> is infered to <code>(list: {}) =&gt; {}</code> which is not exactly what you’d expect.</p><p>You can explicitly type <code>map</code> but it makes the expression really verbose:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getIds = R.map&lt;Record&lt;<span class="string">'id'</span>, <span class="built_in">string</span>&gt;, <span class="built_in">string</span>&gt;(R.prop(<span class="string">'id'</span>));</span><br></pre></td></tr></table></figure><p>This is where <em>propagated generic type arguments</em> come in. In TypeScript 3.4 the type of <code>getIds</code> will correctly infer to <code>&lt;T&gt;(list: readonly Record&lt;&quot;id&quot;, T&gt;[]) =&gt; T[]</code>. Success!</p><h2 id="Propagated-generic-type-arguments"><a href="#Propagated-generic-type-arguments" class="headerlink" title="Propagated generic type arguments"></a>Propagated generic type arguments</h2><p>Now that we now what <em>propagated generic type arguments</em> is about, let’s decipher the name.</p><p><code>R.map(R.prop(&#39;id&#39;))</code> is an example of a situation when we pass a generic function as an argument to another generic function. </p><p>Before version 3.4 TypeScript the type of parameters of inner function type was not <em>propagated</em> to the result type of the call.</p><h2 id="Why-should-I-care"><a href="#Why-should-I-care" class="headerlink" title="Why should I care?"></a>Why should I care?</h2><p>Even if you’re not particularly excited about pointfree style programming, bear in mind that some popular libraries that rely on function composition and partial application and will also benefit from this change.</p><p>For example, in <a href="https://rxjs.dev" target="_blank" rel="noopener">RxJS</a> it is possible to compose new operators from existing ones using <code>pipe</code> <strong>function</strong> (as opposed to <code>pipe</code> method). TypeScript 3.4 will certainly improve typing in such scenarios.</p><p>Other examples include Redux (<code>compose</code> for middleware) and Reselect.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Introduction of <em>propagated generic type arguments</em> has significany consequences for pointfree style programming. Before this update, using libraries such as <code>ramda</code> or <code>lodash/fp</code> with TypeScript was really cumbersome - you had to explicitly provide type arguments to certain calls which made the code far less readable. </p><p><strong>TL;DR</strong>: <em>Propagated generic type arguments</em> pave the way for wider adoption of functional programming techniques in TypeScript.</p><hr><p>Cover photo: <a href="https://pixabay.com/pl/users/JamesDeMers-3416/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=82592" target="_blank" rel="noopener"> JamesDeMers</a> from <a href="https://pixabay.com/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=82592" target="_blank" rel="noopener"> Pixabay</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Everyone’s excited about incremental builds in the upcoming TypeScript version. However, there is another, at least as interesting, featu
      
    
    </summary>
    
    
      <category term="typescript" scheme="https://codewithstyle.info/tags/typescript/"/>
    
      <category term="functional programming" scheme="https://codewithstyle.info/tags/functional-programming/"/>
    
      <category term="pointfree style" scheme="https://codewithstyle.info/tags/pointfree-style/"/>
    
  </entry>
  
  <entry>
    <title>Comprehensive list of built-in utility types in TypeScript</title>
    <link href="https://codewithstyle.info/Comprehensive-list-of-useful-built-in-types-in-TypeScript/"/>
    <id>https://codewithstyle.info/Comprehensive-list-of-useful-built-in-types-in-TypeScript/</id>
    <published>2019-03-09T18:55:34.000Z</published>
    <updated>2019-12-02T21:26:20.061Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.typescriptlang.org/docs/handbook/advanced-types.html" target="_blank" rel="noopener">Advanced types</a> section of TypeScript docs mentions some very useful built-in types as examples of conditional types and mapped types. </p><p>I was surprised to learn that there are more such types and some of them seem to be undocumented. This article contains a list of all such types.</p><p>The list is based on what I could find in <code>es5.d.ts</code> on <a href="https://github.com/Microsoft/TypeScript/blob/4ff71ecb98ccbd882feb1738b0c6f1cc93c2ea66/src/lib/es5.d.ts" target="_blank" rel="noopener">github</a>.</p><h2 id="List-of-types"><a href="#List-of-types" class="headerlink" title="List of types"></a>List of types</h2><h3 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a><code>Partial</code></h3><p><code>Partial&lt;T&gt;</code> returns a type that has the same properties as <code>T</code> but all of them are optional. This is mostly useful when <code>strictNullChecks</code> flag is enabled.</p><p><code>Partial</code> works on a single level - it doesn’t affect nested objects.</p><p>A common use case for <code>Partial</code> is when you need to type a function that lets you override default values of properties of some object.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultSettings: Settings = &#123; <span class="comment">/* ... */</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSettings</span>(<span class="params">custom: Partial&lt;Settings&gt;</span>): <span class="title">Settings</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; ...defaultSettings, ...custom &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Update:</strong></p><p>However, this technique is not 100% type-safe. As pointed out by <a href="https://www.reddit.com/r/typescript/comments/b2xftx/comprehensive_list_of_builtin_utility_types_in/eiw15mm?utm_source=share&amp;utm_medium=web2x" target="_blank" rel="noopener">AngularBeginner</a>, if <code>custom</code> has a property that has been explicitly set to <code>undefined</code>, the result will end up having this property undefined as well. Therefore, its type (<code>Settings</code>) will be a lie.</p><p>A more type-safe version of <code>getSettings</code> would look like this:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSettings</span>(<span class="params">custom: Partial&lt;Settings&gt;</span>): <span class="title">Partial</span>&lt;<span class="title">Settings</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; ...defaultSettings, ...custom &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Microsoft/TypeScript/blob/4ff71ecb98ccbd882feb1738b0c6f1cc93c2ea66/src/lib/es5.d.ts#L1404" target="_blank" rel="noopener">See implementation</a>.</p><h3 id="Required"><a href="#Required" class="headerlink" title="Required"></a><code>Required</code></h3><p><code>Required&lt;T&gt;</code> removes optionality from <code>T</code>‘s properties. Again, you’ll most likely need it if you have <code>strictNullChecks</code> enabled (which you should 😉).</p><p>Similarly to <code>Required</code>, <code>Partial</code> works on the top level only.</p><p>The example is somehow symmetrical to the previous one. Here, we accept an object that has some optional properties. Then, we apply default values when a property is not present. The result is an object with no optional properties - <code>Required&lt;Settings&gt;</code>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">applySettings</span>(<span class="params">settings: Settings</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> actualSettings: Required&lt;Settings&gt; = &#123;</span><br><span class="line">    width: settings.width || <span class="number">100</span>,</span><br><span class="line">    height: settings.height || <span class="number">200</span>,</span><br><span class="line">    title: settings.title || <span class="string">''</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// do something...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Microsoft/TypeScript/blob/4ff71ecb98ccbd882feb1738b0c6f1cc93c2ea66/src/lib/es5.d.ts#L1411" target="_blank" rel="noopener">See implementation</a>.</p><h3 id="Readonly"><a href="#Readonly" class="headerlink" title="Readonly"></a><code>Readonly</code></h3><p>This one you probably have heard of. <code>Readonly&lt;T&gt;</code> returns a type that has the same properties as <code>T</code> but they are all <code>readonly</code>. It is extremally useful for functional programming because it lets you ensure immutability at compile time. An obvious example would be to use it for Redux state.</p><p>Once again, <code>Readonly</code> doesn’t affect nested objects.</p><p><a href="https://github.com/Microsoft/TypeScript/blob/4ff71ecb98ccbd882feb1738b0c6f1cc93c2ea66/src/lib/es5.d.ts#L1418" target="_blank" rel="noopener">See implementation</a>.</p><h3 id="Pick"><a href="#Pick" class="headerlink" title="Pick"></a><code>Pick</code></h3><p><code>Pick</code> lets you create a type that only has selected properties of another type.</p><p>An example would be letting the caller override only a specific subset of some default properties.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function updateSize(overrides: Pick&lt;Settings, 'width' | 'height'&gt;) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; ...defaultSettings, ...overrides&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Microsoft/TypeScript/blob/4ff71ecb98ccbd882feb1738b0c6f1cc93c2ea66/src/lib/es5.d.ts#L1425" target="_blank" rel="noopener">See implementation</a>.</p><h3 id="Record"><a href="#Record" class="headerlink" title="Record"></a><code>Record</code></h3><p><code>Record</code> lets you define a dictionary with keys belonging to a specific type.</p><p>JavaScript objects can be very naturally used as dictionaries. However, in TypeScript you usually work with objects using interfaces where the set of keys is predefined. You can work this around by writing something like:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Options &#123;</span><br><span class="line">  [key: <span class="built_in">string</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Record</code> lets you do this in a more concise way: <code>type Options = Record&lt;string, string&gt;</code>.</p><p><a href="https://github.com/Microsoft/TypeScript/blob/4ff71ecb98ccbd882feb1738b0c6f1cc93c2ea66/src/lib/es5.d.ts#L1432" target="_blank" rel="noopener">See implementation</a>.</p><h3 id="Exclude"><a href="#Exclude" class="headerlink" title="Exclude"></a><code>Exclude</code></h3><p><code>Exclude</code> makes a lot of sense when you look at types in terms of sets of possible values. For example, <code>number</code> type can be looked at as a set containing all numerical numbers. <code>A | B</code> is called a union because its set of possible values is a sum of possible values of <code>A</code> and possible values of <code>B</code>.</p><p><code>Exclude&lt;T, U&gt;</code> returns a type whose set of values is the same as the set of values of type <code>T</code> but with all <code>U</code> values removed. It is a bit like substruction, but defined on sets.</p><p>A good example of using <code>Exclude</code> is to define <code>Omit</code>. <code>Omit</code> takes a type and its key and returns a type without this key. </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Settings &#123;</span><br><span class="line">  width: <span class="built_in">number</span>;</span><br><span class="line">  height: <span class="built_in">number</span>;</span><br><span class="line">  title: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SizeSettings = Omit&lt;Settings, <span class="string">'title'</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type SizeSettings = &#123;</span></span><br><span class="line"><span class="comment">//   width: number;</span></span><br><span class="line"><span class="comment">//   height: number;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p><code>Omit&lt;T, K&gt;</code> can be defined by picking all keys from <code>T</code> except <code>K</code>. First, we’ll <code>Exclude</code> <code>K</code> from the set of keys of <code>T</code>. Next, we will use this set of keys to <code>Pick</code> from <code>T</code>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Omit&lt;T, K <span class="keyword">extends</span> keyof T&gt; = Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Microsoft/TypeScript/blob/4ff71ecb98ccbd882feb1738b0c6f1cc93c2ea66/src/lib/es5.d.ts#L1439" target="_blank" rel="noopener">See implementation</a>.</p><h3 id="Extract"><a href="#Extract" class="headerlink" title="Extract"></a><code>Extract</code></h3><p><code>Extract&lt;T, U&gt;</code> return those types included in <code>T</code> that are assignable to <code>U</code>. You can say that it returns a <em>common part</em> of <code>T</code> and <code>U</code>. However, the types don’t have to be exactly the same - it suffices that a type from <code>T</code> is assignable to <code>U</code>.</p><p>For example, you can use <code>Extract</code> to filter out function types from a union type:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Functions = Extract&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | <span class="function">(<span class="params">(<span class="params"></span>) =&gt; <span class="built_in">void</span></span>), <span class="params">Function</span>&gt;;  // <span class="params">()</span> =&gt;</span> <span class="built_in">void</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/Microsoft/TypeScript/blob/4ff71ecb98ccbd882feb1738b0c6f1cc93c2ea66/src/lib/es5.d.ts#L1444" target="_blank" rel="noopener">See implementation</a>.</p><h3 id="NonNullable"><a href="#NonNullable" class="headerlink" title="NonNullable"></a><code>NonNullable</code></h3><p><code>NonNullable&lt;T&gt;</code> removes <code>null</code> and <code>undefined</code> from the set of possible values of <code>T</code>.</p><p>It is mostly useful when working with <code>strictNullChecks</code> and optional properties and arguments. It has no effect on a type that is already not nullable.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Foo = NonNullable&lt;<span class="built_in">string</span> | <span class="literal">null</span> | <span class="literal">undefined</span>&gt;; <span class="comment">// string</span></span><br></pre></td></tr></table></figure><p>You can find a good usage example of <code>NonNullable</code> in my <a href="https://codewithstyle.info/Deep-property-access-in-TypeScript/">previous article</a>.</p><p><a href="https://github.com/Microsoft/TypeScript/blob/4ff71ecb98ccbd882feb1738b0c6f1cc93c2ea66/src/lib/es5.d.ts#L1449" target="_blank" rel="noopener">See implementation</a>.</p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a><code>Parameters</code></h3><p>This useful type returns a tuple of types of parameters of given function.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchData</span>(<span class="params">id: <span class="built_in">number</span>, filter: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> FetchDataParams = Parameters&lt;<span class="keyword">typeof</span> fetchData&gt;; <span class="comment">// [number, string]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IdType = FetchDataParams[<span class="number">0</span>]; <span class="comment">// number</span></span><br></pre></td></tr></table></figure><p>One interesting usage is typing wrapper functions without having to repeat the parameter list.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchDataLogged</span>(<span class="params">...params: Parameters&lt;<span class="keyword">typeof</span> fetchData&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'calling fetchData'</span>);</span><br><span class="line">  fetchData(...params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Microsoft/TypeScript/blob/4ff71ecb98ccbd882feb1738b0c6f1cc93c2ea66/src/lib/es5.d.ts#L1454" target="_blank" rel="noopener">See implementation</a>.</p><h3 id="ConstructorParameters"><a href="#ConstructorParameters" class="headerlink" title="ConstructorParameters"></a><code>ConstructorParameters</code></h3><p><code>ConstructorParameters</code> is exactly the same as <code>Parameters</code> but works with constructor functions.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Foo &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> FooConstructorParams = ConstructorParameters&lt;<span class="keyword">typeof</span> Foo&gt;;</span><br></pre></td></tr></table></figure><p>One caveat is that you have to remember about <code>typeof</code> in front of the class name.</p><p><a href="https://github.com/Microsoft/TypeScript/blob/4ff71ecb98ccbd882feb1738b0c6f1cc93c2ea66/src/lib/es5.d.ts#L1459" target="_blank" rel="noopener">See implementation</a>.</p><h3 id="ReturnType"><a href="#ReturnType" class="headerlink" title="ReturnType"></a><code>ReturnType</code></h3><p>The name is pretty self-explanatory - it returns a type returned by given function. I found this type really useful.</p><p>One example is in Redux where you define action creators and reducers. A reducer accepts a state object and an action object. You can use <code>ReturnType</code> of the action creator to type the action object.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchDataSuccess</span>(<span class="params">data: <span class="built_in">string</span>[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">'fetchDataSuccess'</span>,</span><br><span class="line">    payload: data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduceFetchDataSuccess</span>(<span class="params">state: State, &#123; payload &#125;: ReturnType&lt;<span class="keyword">typeof</span> fetchDataSuccess&gt;</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Microsoft/TypeScript/blob/4ff71ecb98ccbd882feb1738b0c6f1cc93c2ea66/src/lib/es5.d.ts#L1464" target="_blank" rel="noopener">See implementation</a>.</p><h3 id="InstanceType"><a href="#InstanceType" class="headerlink" title="InstanceType"></a><code>InstanceType</code></h3><p><code>InstanceType</code> is an interesting one. You can say that it is complimentary to <code>typeof</code> operator. </p><p>It accepts a type of a constructor function and returns an instance type of this function.</p><p>In TypeScript, <code>class C</code> defines two things:</p><ul><li>a constructor function <code>C</code> for creating new instances of class <code>C</code></li><li>an interface for objects of class <code>C</code> - the <em>instance type</em></li></ul><p><code>typeof C</code> returns the type of the constructor function.</p><p><code>InstanceType&lt;typeof C&gt;</code> takes the constructor function and returns type of the instances produced by this function: <code>C</code>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> C &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CInstance = InstanceType&lt;<span class="keyword">typeof</span> C&gt;;  <span class="comment">// C</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/Microsoft/TypeScript/blob/4ff71ecb98ccbd882feb1738b0c6f1cc93c2ea66/src/lib/es5.d.ts#L1469" target="_blank" rel="noopener">See implementation</a>.</p><hr><p>Cover photo: <a href="https://pixabay.com/pl/users/TeroVesalainen-809550/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2077020" target="_blank" rel="noopener"> TeroVesalainen</a> from <a href="https://pixabay.com/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2077020" target="_blank" rel="noopener"> Pixabay</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/advanced-types.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Advanced types&lt;/a&gt; section of T
      
    
    </summary>
    
    
      <category term="typescript" scheme="https://codewithstyle.info/tags/typescript/"/>
    
      <category term="advanced types" scheme="https://codewithstyle.info/tags/advanced-types/"/>
    
  </entry>
  
  <entry>
    <title>Deep property access in TypeScript</title>
    <link href="https://codewithstyle.info/Deep-property-access-in-TypeScript/"/>
    <id>https://codewithstyle.info/Deep-property-access-in-TypeScript/</id>
    <published>2019-02-26T17:04:28.000Z</published>
    <updated>2019-12-02T21:26:20.061Z</updated>
    
    <content type="html"><![CDATA[<p>Strict null checking (enabled with <code>strictNullChecks</code> compiler flag) is one of the best things that happened to TypeScript. Thanks to this feature you can make your code a lot safer by eliminating a whole class of bugs during compile time.</p><p>However, enabling strict null checks comes at a cost. Adding appropriate conditions might make your code more verbose. This is especially painful in case of accessing deeply nested properties.</p><p>In this article, you’ll see how to take advantage of <strong>mapped types</strong> to deal with nested properties in an elegant, concise way.</p><p>Check out the source code with snippets used in this article <a href="https://stackblitz.com/edit/deep-properties" target="_blank" rel="noopener">here</a>.</p><p>Many thanks to <a href="https://twitter.com/m_gol" target="_blank" rel="noopener">mgol</a> for the inspiration for the idea behind this article.</p><hr><p><strong>Update 1:</strong> <em>Check out an interesting this discussion on the topic in this <a href="https://www.reddit.com/r/typescript/comments/aynx0o/safe_deep_property_access_in_typescript/" target="_blank" rel="noopener">reddit thread</a>.</em></p><p><strong>Update 2:</strong> <em>Many thanks to <a href="https://www.reddit.com/user/Useless-Pickles" target="_blank" rel="noopener">Useless-Pickles</a> who pointed out some issues with the initial version of code in this post. Check out <a href="https://www.reddit.com/r/typescript/comments/aynx0o/safe_deep_property_access_in_typescript/ei65qw6/?context=3" target="_blank" rel="noopener">theirs implementation</a> with improved type safety.</em></p><h2 id="Deeply-nested-properties"><a href="#Deeply-nested-properties" class="headerlink" title="Deeply nested properties"></a>Deeply nested properties</h2><p>Imagine you’re working with the following interface:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Customer &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  company?: &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    address?: &#123;</span><br><span class="line">      city: <span class="built_in">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>At some point, you might want to find out the city of the company of given customer. Without <code>strictNullChecks</code>, it would be pretty straightforward. </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> c: Customer = <span class="comment">/* ... */</span>;</span><br><span class="line"><span class="keyword">const</span> city = c.company.address.city;</span><br></pre></td></tr></table></figure><p>Of course, this is very unsafe. With strict null checking enabled, TypeScript forces you to ensure that an object is defined before accessing its property. The least verbose way of doing this is to use the <code>&amp;&amp;</code> operator.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> city = </span><br><span class="line">    c &amp;&amp; </span><br><span class="line">    c.company &amp;&amp; </span><br><span class="line">    c.company.address &amp;&amp; </span><br><span class="line">    c.company.address.city;</span><br></pre></td></tr></table></figure><p>This is not bad, but can we do better?</p><h2 id="Let’s-try-lodash"><a href="#Let’s-try-lodash" class="headerlink" title="Let’s try lodash?"></a>Let’s try <code>lodash</code>?</h2><p><a href="https://lodash.com" target="_blank" rel="noopener">Lodash</a> library has a nice utility function <code>get</code>. It lets you access a deeply nested property in a safe way. Basically, you can specify a path to the property. If any object on the path is undefined, the function will return undefined. Otherwise, it will return the value of the property.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">get</span> &#125; <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> safeCity = <span class="keyword">get</span>(c, <span class="string">'company.address.city'</span>);</span><br></pre></td></tr></table></figure><p>This code is pretty neat and concise. However, the problem with this approach is that it’s not type-safe. There is nothing stopping you from making a silly typo and then spending hours figuring that out</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span>(c, <span class="string">'company.addres.city'</span>);</span><br></pre></td></tr></table></figure><p>So, is there a way to make <code>get</code> type-safe?</p><h2 id="Introducing-index-type-query-operator"><a href="#Introducing-index-type-query-operator" class="headerlink" title="Introducing index type query operator"></a>Introducing index type query operator</h2><p>Let’s write our own version of <code>get</code>. In the first iteration <code>get</code> will only accept a single level of nesting (ie. it will handle <code>get(c, &#39;company&#39;)</code> properly).</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>&lt;</span></span><br><span class="line"><span class="function">  <span class="title">T</span>, </span></span><br><span class="line"><span class="function">  <span class="title">P</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">NonNullable</span>&lt;<span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function">&gt;(<span class="params">obj: T | <span class="literal">undefined</span>, prop: P</span>): <span class="title">NonNullable</span>&lt;<span class="title">T</span>&gt;[<span class="title">P</span>] | <span class="title">undefined</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj) &#123;</span><br><span class="line">    <span class="keyword">return</span> (obj <span class="keyword">as</span> NonNullable&lt;T&gt;)[prop];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The function body is pretty straightforward. What’s interesting here is the type signature. <code>get</code> is a generic function with two type parameters. </p><p>The first one (<code>T</code>) is the type of object from which we want to read the property.</p><p>The second one (<code>P</code>) is a type that is assignable from <code>keyof NonNullable&lt;T&gt;</code>. What is <code>keyof NonNullable&lt;T&gt;</code>? It returns a type that is a union of literal types corresponding to all property names of <code>NonNullable&lt;T&gt;</code>.</p><p>For example, <code>keyof Customer</code> is equal to <code>&quot;name&quot; | &quot;company&quot;</code>.</p><p>Literal type is a type that only has a single possible value. In this instance, <code>prop</code> would have to be a string that is equal to either <code>&quot;name&quot;</code> or <code>&quot;company&quot;</code>.</p><p>Finally, why do we use <code>NonNullable&lt;T&gt;</code> instead of <code>T</code>? <code>T</code> can be any type, including one that accepts <code>null</code> and <code>undefined</code> values. We want to access a property of <code>T</code>, so first we need to make sure that it is not <code>null</code> nor <code>undefined</code>. Hence, we wrap it with <code>NonNullable</code>.</p><p>Thanks to this type signature, the compiler will make sure that we use a correct string when passing the <code>prop</code> argument. Indeed, the following code returns a type error.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span>(c, <span class="string">'kompany'</span>)</span><br></pre></td></tr></table></figure><h2 id="Going-deeper"><a href="#Going-deeper" class="headerlink" title="Going deeper"></a>Going deeper</h2><p>This is cool, but how about deeper nesting?</p><p>This is going to be tricky. We need a way to say that the type of N-th argument somehow depends on the type of (N-1)-th argument.</p><p>In fact, it is not currently possible to do this for an arbitrary number of arguments in TypeScript. It is one of the limitations of its otherwise powerful type system.</p><p>Fear not, the hope is not lost yet! We can cheat a little. In practice, how many levels of nesting are you going to need? 3? 4? 10? The number is not big. We can take advantage of this fact and defined a finite number of overloads for <code>get</code>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>&lt;</span></span><br><span class="line"><span class="function">  <span class="title">T</span>, </span></span><br><span class="line"><span class="function">  <span class="title">P1</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">NonNullable</span>&lt;<span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function">&gt;(<span class="params">obj: T, prop1: P1</span>): <span class="title">NonNullable</span>&lt;<span class="title">T</span>&gt;[<span class="title">P1</span>] | <span class="title">undefined</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>&lt;</span></span><br><span class="line"><span class="function">  <span class="title">T</span>, </span></span><br><span class="line"><span class="function">  <span class="title">P1</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">NonNullable</span>&lt;<span class="title">T</span>&gt;,</span></span><br><span class="line"><span class="function">  <span class="title">P2</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">NonNullable</span>&lt;<span class="title">NonNullable</span>&lt;<span class="title">T</span>&gt;[<span class="title">P1</span>]&gt;</span></span><br><span class="line"><span class="function">&gt;(<span class="params">obj: T, prop1: P1, prop2: P2</span>): <span class="title">NonNullable</span>&lt;<span class="title">NonNullable</span>&lt;<span class="title">T</span>&gt;[<span class="title">P1</span>]&gt;[<span class="title">P2</span>] | <span class="title">undefined</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>&lt;</span></span><br><span class="line"><span class="function">  <span class="title">T</span>, </span></span><br><span class="line"><span class="function">  <span class="title">P1</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">NonNullable</span>&lt;<span class="title">T</span>&gt;,</span></span><br><span class="line"><span class="function">  <span class="title">P2</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">NonNullable</span>&lt;<span class="title">NonNullable</span>&lt;<span class="title">T</span>&gt;[<span class="title">P1</span>]&gt;,</span></span><br><span class="line"><span class="function">  <span class="title">P3</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">NonNullable</span>&lt;<span class="title">NonNullable</span>&lt;<span class="title">NonNullable</span>&lt;<span class="title">T</span>&gt;[<span class="title">P1</span>]&gt;[<span class="title">P2</span>]&gt;</span></span><br><span class="line"><span class="function">&gt;(<span class="params">obj: T, prop1: P1, prop2: P2, prop3: P3</span>): <span class="title">NonNullable</span>&lt;<span class="title">NonNullable</span>&lt;<span class="title">NonNullable</span>&lt;<span class="title">T</span>&gt;[<span class="title">P1</span>]&gt;[<span class="title">P2</span>]&gt;[<span class="title">P3</span>] | <span class="title">undefined</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...and so on...</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">obj: <span class="built_in">any</span>, ...props: <span class="built_in">string</span>[]</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj &amp;&amp; props.reduce(</span><br><span class="line">    (result, prop) =&gt; result == <span class="literal">null</span> ? <span class="literal">undefined</span> : result[prop],</span><br><span class="line">    obj</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TypeScript lets us provide multiple type signatures for a function that can handle any number of arguments. We define one signature for each level of nesting that we want to support. For given level of nesting N, we need to define a signature that takes the object and N property names. The type of each property name will have to be one of the keys of the previous property. Once you understand the mechanism, it’s pretty straightforward to create these overloads.</p><p>We now have a nice, type-safe way to access deeply nested properties!</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span>(c, <span class="string">'company'</span>, <span class="string">'address'</span>, <span class="string">'city'</span>)</span><br></pre></td></tr></table></figure><p>In fact, this technique is widely used in libraries and frameworks. <a href="https://github.com/ReactiveX/rxjs/blob/master/src/internal/util/pipe.ts" target="_blank" rel="noopener">Here</a>, you can observe it being used in RxJS.</p><p>BTW, this type signature sometimes gives false negatives. If all properties and the source object itself are not nullable, then the result type should not include <code>undefined</code>. Check out <a href="https://www.reddit.com/r/typescript/comments/aynx0o/safe_deep_property_access_in_typescript/ei65qw6/?context=3" target="_blank" rel="noopener">this implementation</a> for more details.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In this article, you’ve seen how to solve a common problem of safely accessing deeply nested properties. On the way, you have learned about index types (the <code>keyof</code> operator), literal types and the generic technique of typing functions that accept multiple arguments whose types depend on each other.</p><p>Please leave a comment if you enjoyed this article!</p><hr><p>Cover photo: <a href="https://pixabay.com/pl/photos/przestrzeń-deep-space-galaktyka-2638126/" target="_blank" rel="noopener">source</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Strict null checking (enabled with &lt;code&gt;strictNullChecks&lt;/code&gt; compiler flag) is one of the best things that happened to TypeScript. Th
      
    
    </summary>
    
    
      <category term="typescript" scheme="https://codewithstyle.info/tags/typescript/"/>
    
      <category term="advanced types" scheme="https://codewithstyle.info/tags/advanced-types/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript conditional types real-life example</title>
    <link href="https://codewithstyle.info/TypeScript-conditional-types-real-life-example/"/>
    <id>https://codewithstyle.info/TypeScript-conditional-types-real-life-example/</id>
    <published>2019-02-19T21:42:24.000Z</published>
    <updated>2019-12-02T21:26:20.062Z</updated>
    
    <content type="html"><![CDATA[<p>I love the <a href="https://www.typescriptlang.org/docs/handbook/advanced-types.html" target="_blank" rel="noopener">Advanced Types</a> section of TypeScript docs. There are some amazing features out there. However, the first time I saw some of them, I didn’t immediately see what could they be used for. In this article, I’d like to show you a real-world example of using <strong>conditional types</strong>.</p><p>You can play with the code <a href="https://stackblitz.com/edit/conditional-types" target="_blank" rel="noopener">here</a>.</p><h2 id="Extracting-React-component’s-properties"><a href="#Extracting-React-component’s-properties" class="headerlink" title="Extracting React component’s properties"></a>Extracting React component’s properties</h2><p>I love using React together with TypeScript. Being able to safely (type-wise) pass properties in JSX is a big win to me. However, once you want to do something non-standard, typing your code properly becomes less obvious.</p><p>Some time ago I was implementing a generic function that took a React component as a parameter and returned a type that was based on the type of the component’s <code>props</code>. I needed a mechanism that would <em>extract</em> the type of <code>props</code> from the component’s type. It turned out that this can be achieved with a direct application of TypeScript’s conditional types.</p><h2 id="Conditional-types"><a href="#Conditional-types" class="headerlink" title="Conditional types"></a>Conditional types</h2><p>Conditional types bring conditional logic to the world of types. They allow you to define something like a <em>function on types</em> that takes a type as an input and based on some condition returns another type.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> IsString&lt;T&gt; = T <span class="keyword">extends</span> <span class="built_in">string</span> ? <span class="string">"yes"</span> : <span class="string">"no"</span>;</span><br></pre></td></tr></table></figure><p>In this example <code>IsString</code> takes <code>T</code> and examines it. If <code>T</code> is a string then the result would be a <code>&quot;yes&quot;</code> literal type (a type whose only possible value is <code>&quot;yes&quot;</code> string). Otherwise, it will be a <code>&quot;no&quot;</code>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = IsString&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line"><span class="keyword">const</span> a: A = <span class="string">"hello"</span>;</span><br><span class="line"><span class="comment">// Type '"hello"' is not assignable to type '"no"'.</span></span><br></pre></td></tr></table></figure><p>Look how similiar this is to a regular TypeScript function:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isString = <span class="function">(<span class="params">x: <span class="built_in">any</span></span>) =&gt;</span> <span class="keyword">typeof</span> x === <span class="string">"string"</span> ? <span class="string">"yes"</span> : <span class="string">"no"</span>;</span><br></pre></td></tr></table></figure><p>The difference is that a conditional type operates in the world of types while a regular function operates in the world of values.</p><h2 id="Back-to-React"><a href="#Back-to-React" class="headerlink" title="Back to React"></a>Back to React</h2><p>How can we take advantage of this mechanism and use it to extract the type of React component properties? Let’s create a conditional type that checks whether a given type is a React component. </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> IsReactComponent&lt;T&gt; =</span><br><span class="line">  T <span class="keyword">extends</span> React.Component&lt;<span class="built_in">any</span>&gt; ? <span class="string">"yes"</span> : <span class="string">"no"</span>;</span><br></pre></td></tr></table></figure><p>We had to specify the type parameter for <code>React.Component</code> so we used <code>any</code>. However, TypeScript lets us do something cooler - we can use the <code>infer</code> keyword instead.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> IsReactComponent&lt;T&gt; =</span><br><span class="line">  T <span class="keyword">extends</span> <span class="string">`React.Component`</span>&lt;infer P&gt; ? <span class="string">"yes"</span> : <span class="string">"no"</span>;</span><br></pre></td></tr></table></figure><p><code>infer</code> creates a new type variable <code>P</code> that will store the type parameter of <code>T</code> if it indeed extends <code>React.Component</code>. In our case, it will be exactly what we’re looking for - the type of <code>props</code>! So, instead of returning <code>&quot;yes&quot;</code> literal type, let’s simply return <code>P</code>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> IsReactComponent&lt;T&gt; =</span><br><span class="line">  T <span class="keyword">extends</span> React.Component&lt;infer P&gt; ? P : <span class="string">"no"</span>;</span><br></pre></td></tr></table></figure><p>Now, we can assume that this type will only be used with actual React components. We’d like the compilation to fail otherwise. Instead of returning <code>&quot;no&quot;</code>, let’s return the <code>never</code> type. It’s a special type that is intended exactly for such situations. We return <code>never</code> when we don’t want something to happen. If a variable has <code>never</code> type then nothing can be assigned to it.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> PropsType&lt;C&gt; =</span><br><span class="line">  C <span class="keyword">extends</span> React.Component&lt;infer P&gt; ? P : never;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Article <span class="keyword">extends</span> React.Component&lt;&#123; content: <span class="built_in">string</span> &#125;&gt; &#123;</span><br><span class="line">  render = <span class="function"><span class="params">()</span> =&gt;</span> &lt;p&gt;&#123;<span class="keyword">this</span>.props.content&#125;&lt;<span class="regexp">/p&gt;;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">type ArticleProps = PropsType&lt;Article&gt;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ type ArticleProps = &#123;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/   content: string;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ &#125;</span></span><br></pre></td></tr></table></figure><p>And that’s it!</p><h2 id="What-about-Functional-Components"><a href="#What-about-Functional-Components" class="headerlink" title="What about Functional Components?"></a>What about Functional Components?</h2><p>But hey, React is all about functional components now, isn’t it? Let’s adjust <code>PropsType</code> to take this into account.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> PropsType&lt;C&gt; =</span><br><span class="line">  C <span class="keyword">extends</span> React.Component&lt;infer P&gt; ? P : </span><br><span class="line">  C <span class="keyword">extends</span> React.FunctionComponent&lt;infer P&gt; ? P :</span><br><span class="line">  never;</span><br></pre></td></tr></table></figure><p>A piece of cake! Conditions in conditional types can be nested, just like a regular ternary operator. Also, note that <code>extends</code> is not just about classes inheriting from other classes. The condition checks <strong>if a type is assignable from another type</strong>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Header: React.FunctionComponent&lt;&#123; text: <span class="built_in">string</span> &#125;&gt;</span><br><span class="line">  = <span class="function">(<span class="params">props</span>) =&gt;</span> &lt;h1&gt;&#123;props.text&#125;&lt;<span class="regexp">/h1&gt;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">type HeaderProps = PropsType&lt;typeof Header&gt;;</span></span><br></pre></td></tr></table></figure><h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><p>As pointed out in <a href="https://disqus.com/by/voreny/" target="_blank" rel="noopener">voreny</a>‘s comment, there is a better way to handle both functional and class components. <code>PropsType</code> can be defined using <code>React.ComponentType</code> (see <a href="https://github.com/DefinitelyTyped/DefinitelyTyped/blob/e1f5f7a4447a04910d8cbc7c8aff075bde712147/types/react/index.d.ts#L59" target="_blank" rel="noopener">here</a> for definition):</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> PropsType&lt;C&gt; =</span><br><span class="line">  C <span class="keyword">extends</span> React.ComponentType&lt;infer P&gt; ? P : never;</span><br></pre></td></tr></table></figure><p>The only caveat is that it has to be used with <code>typeof</code> keyword for classes:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ArticleProps = PropsType&lt;<span class="keyword">typeof</span> Article&gt;;</span><br></pre></td></tr></table></figure><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>I hope this article convinced you of the usefulness of conditional types in TypeScript. This is just one of many applications of advanced types, so don’t hesitate to dive deep into this section of TypeScript docs!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I love the &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/advanced-types.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Advanced Types&lt;/a&gt; s
      
    
    </summary>
    
    
      <category term="typescript" scheme="https://codewithstyle.info/tags/typescript/"/>
    
      <category term="advanced types" scheme="https://codewithstyle.info/tags/advanced-types/"/>
    
      <category term="react" scheme="https://codewithstyle.info/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Why you should enable `strictNullChecks` in TypeScript?</title>
    <link href="https://codewithstyle.info/Why-you-should-enable-strict-mode-in-TypeScript/"/>
    <id>https://codewithstyle.info/Why-you-should-enable-strict-mode-in-TypeScript/</id>
    <published>2018-12-22T14:13:07.000Z</published>
    <updated>2019-12-02T21:26:20.062Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve been familiar with the <code>strictNullChecks</code> flag in TypeScript for a long time. However, it wasn’t until recently that I had a chance to work with a huge codebase with <code>strict</code> mode enabled. Although I was aware of the benefits of this flag, I didn’t expect it to be as awesome as it turned out to be in reality.</p><p>Read on to learn why you should definitely enable this flag in the project you’re working on.</p><h2 id="What-does-it-do"><a href="#What-does-it-do" class="headerlink" title="What does it do?"></a>What does it do?</h2><p>For those of you who know what <code>strictNullChecks</code> does, you can safely skip to the next paragraph.</p><p>The purpose of <code>strictNullChecks</code> is to help you write safer code. It achieves that by pointing out places where you could be forgetting that a variable is <code>null</code> or <code>undefined</code>.</p><p>Imagine this small example:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> appDiv: HTMLElement = <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>);</span><br><span class="line">appDiv.innerHTML = <span class="string">`&lt;h1&gt;TypeScript Starter&lt;/h1&gt;`</span>;</span><br></pre></td></tr></table></figure><p>It looks fine. However, what if there were no element with id <code>app</code>? In such case <code>document.getElementById</code> would return <code>null</code> and we would get a <code>TypeError: appDiv is null</code> error. We would learn about the mistake only at runtime. But the purpose of TypeScript is to help you find mistakes during compile time!</p><p>Let’s enable <code>strictNullChecks</code>. Now your IDE will highlight <code>appDiv</code> with the following message: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Type &apos;HTMLElement | null&apos; is not assignable to type &apos;HTMLElement&apos;.</span><br></pre></td></tr></table></figure><p>What this means is that the return type of <code>document.getElementById</code> is <code>HTMLElement | null</code> and we’re trying to assign it to a constant with type <code>HTMLElement</code>. TypeScript doesn’t allow this because the target type is narrower then the source type.</p><p>Enabling <code>strictNullChecks</code> changed the type of <code>document.getElementById</code> to <code>HTMLElement | null</code> instead of simply <code>HTMLElement</code>. In other words, this <strong>type is now more honest and closer to the truth</strong>. It admits that a <code>null</code> value can also be returned from this method. By doing this, it forces you to handle such case.</p><p>If we change the type of <code>appDiv</code> to <code>HTMLElement | null</code>, the next line will compile with the following error:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object is possibly &apos;null&apos;.</span><br></pre></td></tr></table></figure><p>We cannot access a property of <code>appDiv</code> because it could be a <code>null</code>. TypeScript forces us to consider the <code>null</code> case. How to address it? It depends. Maybe you need to create this <code>app</code> element. Or maybe in such case it’s better to throw an exception? The simplest solution would be to not do anything in case of falsy <code>appDiv</code>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> appDiv: HTMLElement | <span class="literal">null</span> = <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>);</span><br><span class="line"><span class="keyword">if</span> (appDiv) &#123;</span><br><span class="line">    appDiv.innerHTML = <span class="string">`&lt;h1&gt;TypeScript Starter&lt;/h1&gt;`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This works because of TypeScript’s great feature called <strong>type guards</strong>. The compiler is able to figure out that the type of <code>appDiv</code> <em>inside</em> the <code>if</code> is <code>HTMLElement</code> instead of <code>HTMLElement | null</code> thanks to some static code analysis.</p><h2 id="How-does-it-work"><a href="#How-does-it-work" class="headerlink" title="How does it work?"></a>How does it work?</h2><p>What exactly changed that allowed the compiler to work this way?</p><p>By default (with <code>strictNullChecks</code> <strong>disabled</strong>), the compiler behaves as if every type you use in your code was implicitly replaced with its union with <code>null</code> and <code>undefined</code>.</p><p>In other words, <code>null</code> and <code>undefined</code> values are part of every type. Therefore, typing something as <code>HTMLElement | null | undefined</code> was redundant since <code>HTMLElement</code> already included <code>null</code> and <code>undefined</code>.</p><p>Converesly, with <code>strictNullChecks</code> <strong>enabled</strong>, </p><h3 id="Objects-received-from-the-backend"><a href="#Objects-received-from-the-backend" class="headerlink" title="Objects received from the backend"></a>Objects received from the backend</h3><h3 id="Uninitialized-properties-strictPropertyInitialization"><a href="#Uninitialized-properties-strictPropertyInitialization" class="headerlink" title="Uninitialized properties (strictPropertyInitialization)"></a>Uninitialized properties (<code>strictPropertyInitialization</code>)</h3><h3 id="Exhaustiveness-checks"><a href="#Exhaustiveness-checks" class="headerlink" title="Exhaustiveness checks"></a>Exhaustiveness checks</h3><h3 id="React-example-optional-property-of-object-passed-as-prop"><a href="#React-example-optional-property-of-object-passed-as-prop" class="headerlink" title="React example - optional property of object passed as prop"></a>React example - optional property of object passed as prop</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I’ve been familiar with the &lt;code&gt;strictNullChecks&lt;/code&gt; flag in TypeScript for a long time. However, it wasn’t until recently that I ha
      
    
    </summary>
    
    
      <category term="typescript" scheme="https://codewithstyle.info/tags/typescript/"/>
    
      <category term="static typing" scheme="https://codewithstyle.info/tags/static-typing/"/>
    
  </entry>
  
  <entry>
    <title>Better RxJS code with pointfree style</title>
    <link href="https://codewithstyle.info/Better-RxJS-code-with-pointfree-style/"/>
    <id>https://codewithstyle.info/Better-RxJS-code-with-pointfree-style/</id>
    <published>2018-12-13T22:00:00.000Z</published>
    <updated>2019-12-02T21:26:20.060Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I gave a talk about pointfree style programming at the <a href="https://js-poland.pl/" target="_blank" rel="noopener">JS Poland Conference</a>. I decided to turn some of the ideas I mentioned during the talk into a blog post!</p><h2 id="What-is-pointfree-style"><a href="#What-is-pointfree-style" class="headerlink" title="What is pointfree style?"></a>What is pointfree style?</h2><p>It’s easiest to explain pointfree style by showing a small example. Let’s say we have this array of objects representing mountains:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mountains = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Mount Everest'</span>, <span class="attr">height</span>: <span class="number">8848</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Mont Blanc'</span>, <span class="attr">height</span>: <span class="number">4808</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Kazbek'</span>, <span class="attr">height</span>: <span class="number">5033</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>As you know, you can use array methods such as <code>map</code> or <code>reduce</code> to run some calculations on this array.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> names = mountains.map(<span class="function"><span class="params">mountain</span> =&gt;</span> mountain.name);</span><br><span class="line"><span class="keyword">const</span> totalHeight = mountains</span><br><span class="line">    .map(<span class="function"><span class="params">mountain</span> =&gt;</span> mountain.height)</span><br><span class="line">    .reduce(<span class="function">(<span class="params">result, height</span>) =&gt;</span> result + height, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>Both of these methods are <em>higher-order functions</em> - they accept a function as an parameter. In both cases we create an anonymous function using arrow function syntax and pass it as an argument. Now let’s make those two lines more pointfree.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mountains.map(prop(<span class="string">'name'</span>));</span><br><span class="line">mountains.map(prop(<span class="string">'height'</span>)).reduce(add, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>What happened here? I replaced arrow functions with small, self-explaining functions such as <code>prop</code> and <code>add</code>. These functions come from a library called <a href="https://ramdajs.com/" target="_blank" rel="noopener">ramda</a>, but you could easily write them yourself. As you can imagine, <code>prop(&#39;name&#39;)</code> returns a function that reads <code>name</code> property from given object and <code>add</code> simply adds two numbers.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">prop(<span class="string">'name'</span>)(&#123; <span class="attr">name</span>: <span class="string">'Kazbek'</span>&#125;); <span class="comment">// 'Kazbek'</span></span><br><span class="line">add(<span class="number">1</span>, <span class="number">3</span>)); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>Pointfree style can be summarized as the following rule: <em>never mention the data</em>. In our example, <em>data</em> refers to parameters of anonymous functions. Instead of using anonymous functions, we use small, very generic functions. We build applications by <em>composing</em> these functions. This forces us to focus on <strong>data tranformations</strong> instead of on the data itself. </p><p>BTW, <em>point</em> in <em>pointfree</em> doesn’t refer to <code>.</code> that is part of method call syntax. It comes from category theory, where <em>points</em> are elements of sets. <em>Pointfree</em> in this context means that you focus on transformations (<em>morphisms</em>) between set elements (<em>points</em>) instead of on the <em>points</em> themselves.</p><h2 id="Partial-application"><a href="#Partial-application" class="headerlink" title="Partial application"></a>Partial application</h2><p>There are two very important concepts that make pointfree style possible. The first one is called <em>partial application</em>. I’ve already used partial application in this article. It happened when I called <code>prop(&#39;name&#39;)</code>. Logically, <code>prop</code> takes two arguments: a property name and an object:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prop(<span class="string">'name'</span>, &#123; <span class="attr">name</span>: <span class="string">'Kazbek'</span>&#125;);</span><br></pre></td></tr></table></figure><p>However, we used it as if it was a single argument function: <code>prop(&#39;name&#39;)</code>. By doing this, we’ve partially applied <code>prop</code>. The result is a function that will <em>wait</em> for the second argument and only evaluate once it receives it. </p><p>But wait, if I only provided one argument to two argument function, it will still evaluate - <code>undefined</code> will be passed as the second argument, right? Well, it’s true unless the function is <em>curried</em>. Currying is the process of taking a multi-argument function and transforming it into a single argument function. </p><p><img src="/images/2018/12/pointfree-Page-2.png" alt=""></p><p>Here is a simplified, multi-argument version of <code>prop</code> - it can’t be partially applied:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> prop = <span class="function">(<span class="params">propName, object</span>) =&gt;</span> object[propName];</span><br></pre></td></tr></table></figure><p>And here is a curried version:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> prop = <span class="function">(<span class="params">propName</span>) =&gt;</span> (object) =&gt; object[propName];</span><br></pre></td></tr></table></figure><p>Do you see the difference? The second version is indeed a single argument function which returns another single argument function. You don’t need to curry your functions manually - you can use <code>curry</code> function from <code>ramda</code> instead.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> prop = curry(<span class="function">(<span class="params">propName, object</span>) =&gt;</span> object[propName]);</span><br></pre></td></tr></table></figure><h2 id="Function-composition"><a href="#Function-composition" class="headerlink" title="Function composition"></a>Function composition</h2><p>Another concept essential for pointfree style is <strong>function composition</strong>. I wrote a <a href="https://codewithstyle.info/deep-dive-pipe-function-rxjs/">separate article</a> about, so please take a look if you are not familiar with the concept.</p><h2 id="Application-in-RxJS"><a href="#Application-in-RxJS" class="headerlink" title="Application in RxJS"></a>Application in RxJS</h2><p>Ok, I promised you some RxJS code 😉 Let’s start with a simple example. Upon clicking the <code>breedsFetchEl</code> button we want to fetch some data from <a href="https://dog.ceo/api" target="_blank" rel="noopener">Dog API</a> and present it in <code>breedsListEl</code> div. Easy peasy.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> click$ = fromEvent(breedsFetchEl, <span class="string">'click'</span>);</span><br><span class="line"><span class="keyword">const</span> breeds$ = click$.pipe(</span><br><span class="line">  switchMap(<span class="function"><span class="params">()</span> =&gt;</span> </span><br><span class="line">    ajax.getJSON(<span class="string">'https://dog.ceo/api/breeds/list/all'</span>)),</span><br><span class="line">  map(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">Object</span>.keys(result.message).join(<span class="string">', '</span>))</span><br><span class="line">);</span><br><span class="line">breeds$.subscribe(<span class="function"><span class="params">breeds</span> =&gt;</span> breedsListEl.innerText = breeds);</span><br></pre></td></tr></table></figure><p>Let’s convert it to pointfree style. We will focus on the anonymous function inside <code>map</code>. Let’s try to figure our what’s going on there:</p><ul><li>First, <code>message</code> property is read from <code>result</code>.</li><li>Next, its value is passed to <code>Object.keys</code> function.</li><li>Finally, we call <code>join</code> on the value returned by that call.</li></ul><p>We don’t like method calls in functional programming - they are not composable. Let’s first replace the third step with a function call. We will use <code>join</code> from <code>ramda</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map(<span class="function"><span class="params">result</span> =&gt;</span> join(<span class="string">', '</span>, <span class="built_in">Object</span>.keys(result.message)))</span><br></pre></td></tr></table></figure><p>Property access also comes from the OOP word, so let’s change it to a function call. This time, let’s use <code>prop</code> from <code>ramda</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map(<span class="function"><span class="params">result</span> =&gt;</span> join(<span class="string">', '</span>, <span class="built_in">Object</span>.keys(prop(<span class="string">'message'</span>, result))))</span><br></pre></td></tr></table></figure><p>Now this looks familiar. We have three nested function calls. We call the first one and pass the result to the second one. The result of the second one is passed as an argument of the third one. This is exactly what function composition is. Let’s use <code>pipe</code> to replace the anonymous function with a function composed from these three functions.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">map(</span><br><span class="line">  pipe(</span><br><span class="line">    prop(<span class="string">'message'</span>),</span><br><span class="line">    <span class="built_in">Object</span>.keys,</span><br><span class="line">    join(<span class="string">', '</span>)</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="/images/2018/12/pointfree.png" alt=""></p><p>But wait, <code>prop</code> and <code>join</code> are two argument functions and now we partially apply them! How is this possible? The answer to this is that <code>ramda</code> functions are really clever. They are curried by default. However, they do also work as expected when called with multiple arguments.</p><h2 id="More-advanced-example"><a href="#More-advanced-example" class="headerlink" title="More advanced example"></a>More advanced example</h2><p>Let’s now take a look at a slightly more complex scenario. We have a text field (<code>dogNameInputEl</code>) and we want to show dog images (inside <code>dogImageEl</code>) based on breed names entered into this field. We want the image to update as you type, but we don’t want to overload the server with request. Hence, we will only send the request if breed name’s length exceeds 2 and we will debounce calls.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nameInput$ = fromEvent(dogNameInputEl, <span class="string">'input'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> image$ = nameInput$.pipe(</span><br><span class="line">  map(<span class="function"><span class="params">()</span> =&gt;</span> dogNameInputEl.value),</span><br><span class="line">  filter(<span class="function"><span class="params">name</span> =&gt;</span> name.length &gt;= <span class="number">3</span>),</span><br><span class="line">  debounceTime(<span class="number">500</span>),</span><br><span class="line">  mergeMap(<span class="function"><span class="params">name</span> =&gt;</span> </span><br><span class="line">    ajax.getJSON(<span class="string">`https://dog.ceo/api/breed/<span class="subst">$&#123;name&#125;</span>/images/random`</span>)),</span><br><span class="line">  map(<span class="function"><span class="params">result</span> =&gt;</span> result.message)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">image$.subscribe(</span><br><span class="line">  imageUrl =&gt; dogImageEl.setAttribute(<span class="string">'src'</span>, imageUrl));</span><br></pre></td></tr></table></figure><p>Cool, let’s deal with this example line by line. The first operator maps <code>input</code> events to actual values typed into the text field.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map(<span class="function"><span class="params">()</span> =&gt;</span> dogNameInputEl.value)</span><br></pre></td></tr></table></figure><p>We need a function that ignores its input and <em>always</em> returns <code>dogNameInputEl</code>. Then we could pass its result to <code>prop(&#39;value&#39;)</code>. It turns out that there is such function in <code>ramda</code>. It’s called… <code>always</code>!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map(pipe(always(dogNameInputEl), prop(<span class="string">'value'</span>))</span><br></pre></td></tr></table></figure><p>Next line filters input values so that we only process those that are longer then 2. It boils down to function composition again. First, we calculate string length. You guessed right, there is a function called <code>length</code> in <code>ramda</code> that we can use. Second, we compare the result with 3. <code>ramda</code> has a function called <code>gte</code>. However, if we used it like this <code>gte(3)</code> the we would get a function that returns <code>true</code> if 3 is greater then or equal to its argument. Therefore, we need to swap <code>gte</code>‘s arguments. <code>flip</code> is a function which does exactly that!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter(pipe(length, (flip(gte))(<span class="number">3</span>)))</span><br></pre></td></tr></table></figure><p>There is no anonymous function in <code>debounce</code>, so we can skip it. Next, <code>mergeMap</code> transforms breed name to a response object retrieved from the server. Again, we can use function composition. First, we transform the name into an URL. Next, we pass the URL to <code>ajax.getJSON</code>. Transforming the name into an URL is achieved using template strings. We could compose this using <code>ramda</code>‘s functions but the result would not be readable at all. In such case, it’s better to create a helper function and simply use it inside <code>pipe</code>. It’s not super pointfree, but code readability is more important (another approach would be to use order based string formatting library, such as <code>sprintf-js</code>).</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getImageUrl = </span><br><span class="line">  (name) =&gt; <span class="string">`https://dog.ceo/api/breed/<span class="subst">$&#123;name&#125;</span>/images/random`</span>;</span><br><span class="line"></span><br><span class="line">mergeMap(pipe(getImageUrl, ajax.getJSON))</span><br></pre></td></tr></table></figure><p>Finally, the last line simple extracts <code>message</code> property from the result. I’m pretty sure you already know how to do that 😉 The end result will look like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> image$ = nameInput$.pipe(</span><br><span class="line">  map(pipe(always(dogNameInputEl), prop(<span class="string">'value'</span>))),</span><br><span class="line">  filter(pipe(length, (flip(gte))(<span class="number">3</span>))),</span><br><span class="line">  debounceTime(<span class="number">500</span>),</span><br><span class="line">  mergeMap(pipe(getImageUrl, ajax.getJSON)),</span><br><span class="line">  prop(<span class="string">'message'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>What do you think about pointfree style? In my opinion, it’s a great programming practice, but one that has to be applied with caution. In general, it makes your code more concise and eliminates the boilerplate of anonymous functions. More importantly, it forces you to think about your program as a composition of small, generic building blocks (functions). Pointfree style lets you experience the full power of functional programming!</p><p>However, pointfree shouldn’t be applied at all cost. In some cases, it might make the overall readability of code much worse. What’s more, if you’re working in a team, you have to keep in mind that such style of writing code might be unfamiliar to others.</p><p>Don’t hesitate to share your opinion about pointfree style in comments section!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently I gave a talk about pointfree style programming at the &lt;a href=&quot;https://js-poland.pl/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JS Poland 
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://codewithstyle.info/tags/javascript/"/>
    
      <category term="functional programming" scheme="https://codewithstyle.info/tags/functional-programming/"/>
    
      <category term="pointfree style" scheme="https://codewithstyle.info/tags/pointfree-style/"/>
    
  </entry>
  
  <entry>
    <title>Moving to Hexo</title>
    <link href="https://codewithstyle.info/Moving-to-Hexo/"/>
    <id>https://codewithstyle.info/Moving-to-Hexo/</id>
    <published>2018-12-12T11:26:31.000Z</published>
    <updated>2019-12-02T21:26:20.061Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I decided to move my blog to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>.</p><p>I’ve been considering this idea for some time (shout out to <a href="https://twitter.com/piecioshka" target="_blank" rel="noopener">Piecioshka</a> whose <a href="https://piecioshka.pl/blog/2018/05/28/jak-zalozyc-bloga-korzystajac-z-hexo.html" target="_blank" rel="noopener">article [PL]</a> planted the seeds). Previously, my blog used to be based on Wordpress (to which I migrated from Blogger). Worpdress is a great platform that powers a lot of blogs and businesses but with time, more and more issues have been bugging me:</p><ul><li><strong>Performance</strong> - with Wordpress every time you visit a post page, it has to be generated on the server. I tried to address this with caching plugins but with varying level of success.</li><li><strong>Page size</strong> - Wordpress has a plugin for everything. These plugins are very useful but it’s super easy to bloat the page size with them. What’s more, you’re not in full control of what assets are loaded on the page.</li><li><strong>Updates</strong> - for security purposes Wordpress (and plugins) should be regularly updated. Every time an update is made, there is a risk of breaking the page.</li><li><strong>Lack of flexibility</strong> - anything custom in Wordpress has to either be added as a plugin or by manually modifying the source code. The source code is written in PHP and the only way I had to modify it was via FTP, no source control. </li></ul><p>Hexo is a static site generator. It is based on the simple but clever idea that a blog doesn’t actually have to be dynamic. <strong>Why generate posts’ HTML over and over again while they look the same to every user</strong>? </p><p>With Hexo you write blog posts in markdown and the blog gets generated as a bundle of static HTML files. You can then very easily upload this bundle to <a href="https://pages.github.com/" target="_blank" rel="noopener">Github Pages</a> which will host your static files for free! </p><p>Although I had a lot of content to migrate, the process was made much easier thanks to <code>hexo-migrator-wordpress</code> package.</p><p>With this setup, all of the issues I had with Wordpress are now addressed!</p><p>Please let me know how do you like the new look of the blog! I would also be grateful for an <strong>e-mail if you find something that doesn’t work</strong> properly.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently I decided to move my blog to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’ve been considering th
      
    
    </summary>
    
    
      <category term="blogging" scheme="https://codewithstyle.info/tags/blogging/"/>
    
      <category term="hexo" scheme="https://codewithstyle.info/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Strategies for Managing Long-running API Calls with RxJS</title>
    <link href="https://codewithstyle.info/strategies-managing-long-running-api-calls-rxjs/"/>
    <id>https://codewithstyle.info/strategies-managing-long-running-api-calls-rxjs/</id>
    <published>2018-12-02T10:20:05.000Z</published>
    <updated>2019-12-02T21:26:20.071Z</updated>
    
    <content type="html"><![CDATA[<p><strong>This post has been originally published on <a href="https://www.sumologic.com/blog/devops/long-running-api-queries/" target="_blank" rel="noopener">SumoLogic company blog</a></strong>. </p><p>It’s common for a modern single-page application (SPA) to fetch data from the server via a REST API call. The vast majority of web applications do this. There are, though, many challenges related to this approach, one of which is handling long-running queries. In order to ensure a great user experience, we can’t have the user wait four or five minutes to see the results of an action. </p><p>This is often the case here at Sumo Logic, where, for instance, the user interface (UI) sends complex search queries to the backend. Depending on the query, processing might take a few minutes. In this article we will discuss different approaches for dealing with this issue. We’ll rely on the RxJS library to help us with this task because it’s perfect for dealing with complex, asynchronous flows.</p><h2 id="Strategies-for-Dealing-with-Long-running-Calls"><a href="#Strategies-for-Dealing-with-Long-running-Calls" class="headerlink" title="Strategies for Dealing with Long-running Calls"></a>Strategies for Dealing with Long-running Calls</h2><p>There are multiple approaches that can be taken and in this article I’ll discuss three of them. The list is here mostly for inspiration, as the solution for your specific problem will very likely depend on your use case and the design of your API. Here’s a quick summary of the different approaches I will discuss throughout this post:</p><ul><li>Displaying a loading indicator – indicates to the user that a long-running query is currently being processed.</li><li>Showing partial results – splits the large query into smaller queries and combines the results on the fly.</li><li>Showing the best result within given time period – makes several parallel calls aiming for varying accuracy of the result and shows the best result we could achieve within a given timeframe.</li></ul><p>Code examples below are simplified; in reality you also need to take care of error handling and unsubscribing.</p><h2 id="Approach-1-Display-a-Loading-Indicator"><a href="#Approach-1-Display-a-Loading-Indicator" class="headerlink" title="Approach #1: Display a Loading Indicator"></a>Approach #1: Display a Loading Indicator</h2><p>This is the most basic approach because we don’t really fix the problem, but rather simply improve user experience by indicating to the user that the query is being processed (or whatever long-running action is happening in your system). Let’s assume our task is to fetch a list of customers. Unfortunately, this API call is rather slow. In order to make sure that the user is aware of the fact that a query is being processed, we’ll show a loading spinner. Let’s say we already have the following function, which can fetch the list of customers from the backend. It returns an observable, which will emit once, when the server replies. If you’re using the fetch API, you can easily convert a promise to an observable using the from function.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchCustomers</span>(<span class="params"></span>): <span class="title">Observable</span>&lt;<span class="title">Customer</span>[]&gt; </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>Fetching the list is very likely initiated by a user action such as clicking a button. Let’s create a <code>click$</code> stream, which emits button clicks and then use <code>switchMap</code> to transform it into <code>customers$</code> stream, which will emit lists of customers retrieved from the server.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> click$ = fromEvent(buttonEl, <span class="string">'click'</span>);</span><br><span class="line"><span class="keyword">const</span> customers$ = click$.pipe(switchMap(<span class="function"><span class="params">()</span> =&gt;</span> fetchCustomers()), share());</span><br></pre></td></tr></table></figure><p>As a next step, we’ll create a new stream that emits true whenever the loading spinner should be shown and false when it shouldn’t. We’ll do this by merging <code>click$</code> and <code>customer$</code> streams:</p><ul><li>Event emitted by <code>click$</code> means that we should show the spinner so we’ll map it to true</li><li>Event emitted by <code>customer$</code> means that we should hide the spinner so we’ll map it to false</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isLoading$ = merge( </span><br><span class="line">  click$.pipe(mapTo(<span class="literal">true</span>)), </span><br><span class="line">  customers$.pipe(mapTo(<span class="literal">false</span>)), </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Now, all that’s left is to subscribe to the stream and update the loading indicators visibility.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isLoading$.subscribe(<span class="function"><span class="params">isLoading</span> =&gt;</span> </span><br><span class="line">  loadingIndicatorEl.style.visibility = </span><br><span class="line">    isLoading ? <span class="string">'visible'</span> : <span class="string">'hidden'</span>);</span><br></pre></td></tr></table></figure><h2 id="Approach-2-Show-Partial-Results"><a href="#Approach-2-Show-Partial-Results" class="headerlink" title="Approach #2: Show Partial Results"></a>Approach #2: Show Partial Results</h2><p>The goal of this second approach is to improve the user experience by not making the user wait for the whole query to be processed, but rather to show something whenever some results are available. We’ll achieve this by splitting the long-running query into smaller queries. Of course this approach is based on some assumptions about our API:</p><ul><li>It is possible to split a query into smaller queries.</li><li>Smaller queries will actually execute faster than large queries.</li></ul><p>What do I mean by splitting the query into smaller ones? For example, instead of fetching the full list of customers at once, we might decide to fetch small portions of the list and combine them in the UI. Let’s see the code, and assume that we’re now working with the following function that can be parameterized by some offset. This offset can be used to decide which part of the list to fetch. Let’s also assume that the function will always fetch a fixed number of matching customers (e.g. 100).</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">searchCustomersPaged</span>(<span class="params">query: <span class="built_in">string</span>, offset: <span class="built_in">number</span></span>) </span></span><br><span class="line"><span class="function">  </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>We can start by creating an array of offsets and map it into queries. The first query will fetch customers from 0 to 99, the second will fetch customers from 100 to 199, and so on.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> offsets = [<span class="number">0</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>]; </span><br><span class="line"><span class="keyword">const</span> queries = offsets.map(<span class="function"><span class="params">offset</span> =&gt;</span> </span><br><span class="line">  searchCustomersPaged(<span class="string">'some query'</span>, offset).pipe(startWith(<span class="literal">null</span>)));</span><br></pre></td></tr></table></figure><p>Each stream will emit a null followed by the actual result. As a next step, we’ll combine those streams into a single stream which emits concatenated, non-empty results.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result$ = combineLatestFun(queries).pipe( </span><br><span class="line">  map(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="keyword">const</span> nonNullResults = results.filter(<span class="function"><span class="params">r</span> =&gt;</span> r !== <span class="literal">null</span>); </span><br><span class="line">    <span class="keyword">return</span> nonNullResults.reduce(<span class="function">(<span class="params">acc, r</span>) =&gt;</span> [ ...acc, ...r ], []); </span><br><span class="line">  &#125;) </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>We ended up with a single stream that will emit a growing list of customers, which we can show to the user in real time. This is a much nicer user experience then having to wait for the whole list to be fetched. Note: it’s important to keep in mind that browsers put limitations on the number of concurrent queries made to the same domain. It doesn’t make any sense to exceed this number.</p><h2 id="Approach-3-Show-the-Best-Result"><a href="#Approach-3-Show-the-Best-Result" class="headerlink" title="Approach #3: Show the Best Result"></a>Approach #3: Show the Best Result</h2><p>Finally, in this approach we’re going to fire parallel queries aiming for different accuracy of the result. We’ll then wait and, after some fixed amount of time, return the best (most accurate) result of those received so far. Quick shout out goes to one of my colleagues, <strong>Omid Mortazavi</strong>, who came up with the idea for this third approach. How does this translate to the customer search scenario? Let’s say that the API includes a parameter for specifying the level (precision) of search accuracy. A customer search with a lower accuracy will be faster but not as exhaustive as a search with a higher accuracy. We want to present the user with the best result yet we don’t want them to wait too long. We’ll therefore trigger several searches, of varying precision, and only wait a fixed amount of time. Similar to the previous approach, let’s start by creating an array of different accuracy levels and mapping them into queries.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> accuracyLevels = [<span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>]; </span><br><span class="line"><span class="keyword">const</span> queries = accuracyLevels.map(<span class="function"><span class="params">level</span> =&gt;</span> </span><br><span class="line">  searchCustomers(<span class="string">'some query'</span>, level).pipe(startWith(<span class="literal">null</span>)) </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Next, let’s create a stream that will emit true after a fixed period of time elapses.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> timeoutElapsed$ = timer(<span class="number">10000</span>).pipe(</span><br><span class="line">  mapTo(<span class="literal">true</span>),</span><br><span class="line">  startWith(<span class="literal">false</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Finally, we’ll combine all of the streams in queries with the <code>timeoutElapsed$</code> stream. The combined stream will emit whenever any of the source streams emit. The second parameter of <code>combineLatest</code> is a function in which we decide what to do when it happens. The logic is as follows:</p><ul><li>Timeout not elapsed yet<ul><li>All queries finished so return the most accurate result</li><li>Some queries not finished yet so return null as we still hope for a better result</li></ul></li><li>Timeout elapsed<ul><li>Return the most accurate result</li></ul></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result$ = timeoutElapsed$.pipe(</span><br><span class="line">  combineLatest(queries, <span class="function">(<span class="params">isTimeoutElapsed, ...results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isTimeoutElapsed) &#123;</span><br><span class="line">      <span class="keyword">const</span> notReadyResult = results.find(<span class="function"><span class="params">result</span> =&gt;</span> result === <span class="literal">null</span>); </span><br><span class="line">      <span class="keyword">return</span> notReadyResult ? notReadyResult : results[<span class="number">0</span>]; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> results.find(<span class="function"><span class="params">result</span> =&gt;</span> result !== <span class="literal">null</span>) || <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;), </span><br><span class="line">  filter(<span class="function"><span class="params">result</span> =&gt;</span> result !== <span class="literal">null</span>), </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Below you can find marble diagrams demonstrating this approach based on two concurrent queries. </p><p><img src="/images/2018/11/Example-1_-1.png" alt=""></p><p>Example 1: one query finishes before timeout elapses</p><p><img src="/images/2018/11/Example_2.png" alt=""></p><p>Example 2: both queries finish before timer elapses</p><p><img src="/images/2018/11/Example_3.png" alt=""></p><p>Example 3: neither query finishes before timeout elapses</p><p>One final thought: if the API provides such an option, cancel any pending searches once we’ve presented the result to the user to avoid unnecessary backend work or network traffic. In scenarios demonstrated by the diagrams above there is no cancellation at all. Therefore, the <code>result$</code> stream emits multiple times, which might not be desirable.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>We’ve discussed three different approaches to improving user experience when dealing with long running API calls. While this list is by no means exhaustive and these techniques might need some adjustments based on your specific situation, I hope you’ve seen some of the power of functional-reactive programming with RxJS and can see other areas of your applications which can benefit from the possibilities it enables.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;This post has been originally published on &lt;a href=&quot;https://www.sumologic.com/blog/devops/long-running-api-queries/&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://codewithstyle.info/categories/JavaScript/"/>
    
      <category term="TypeScript" scheme="https://codewithstyle.info/categories/JavaScript/TypeScript/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/JavaScript/TypeScript/Web/"/>
    
    
      <category term="rxjs" scheme="https://codewithstyle.info/tags/rxjs/"/>
    
      <category term="reactive programming" scheme="https://codewithstyle.info/tags/reactive-programming/"/>
    
  </entry>
  
  <entry>
    <title>Becoming a tech public speaker: lessons learned</title>
    <link href="https://codewithstyle.info/becoming-tech-public-speaker-lessons-learned/"/>
    <id>https://codewithstyle.info/becoming-tech-public-speaker-lessons-learned/</id>
    <published>2018-11-25T07:46:37.000Z</published>
    <updated>2019-12-02T21:26:20.063Z</updated>
    
    <content type="html"><![CDATA[<p>The year is nearing its end, so I’d like to share some things I’ve learned on my speaker’s journey. I’ve already written <a href="https://codewithstyle.info/introverts-guide-public-speaking/">one article</a> on this topic. Read it if you would like to know how (and why) to get into tech public speaking. This post will focus on advice for speakers who already have a little bit of experience. I made the decision to start speaking publicly almost two years ago - in February 2017. I began with meetups and slowly progressed towards my goal - an international conference - which I managed to achieve in September 2018. <strong>During these two years, I gave 11 talks in total</strong>. You can find the full list of my talks <a href="http://miloszpiechocki.com/speaking.html" target="_blank" rel="noopener">here</a>.</p><h2 id="Call-For-Papers"><a href="#Call-For-Papers" class="headerlink" title="Call For Papers"></a>Call For Papers</h2><p>Most importantly, you need to submit a lot. Of course, there are conferences where talks are chosen purely based on the abstract you provide. However, the majority will look at your speaking history, your presence in the web, etc. So unless you are a core contributor to a popular library or a published author, your chances of getting selected are relatively low (<a href="http://www.papercall.io" target="_blank" rel="noopener">PaperCall.io</a> mentions 1 in 10 on average). Therefore, <strong>you need to apply to a lot of conferences</strong> hoping to get selected for at least one. This takes time and effort, but it pays off. In 2018, I applied to almost 30 conferences and got selected to 5 of them.</p><h2 id="Topic-and-abstract"><a href="#Topic-and-abstract" class="headerlink" title="Topic and abstract"></a>Topic and abstract</h2><p>Adjust the topic of your talk to the audience. It’s a cliche, but it has some important consequences. Your topic doesn’t have to be super advanced. When applying to general-purpose, multi-track conferences which don’t focus on a specific technology, it’s perfectly ok to submit an introductory level topic. One of my best-rated talks was an introduction to functional programming in JavaScript at a frontend track of <a href="https://4developers.org.pl/" target="_blank" rel="noopener">4 Developers 2018</a> - a large, multi-tech conference. I think <strong>it’s generally a good idea to begin with a less advanced topic</strong> as such presentation will be easier to deliver. Conversely, your talk should be a bit more in-depth if you are going to present it at a specialist conference dedicated to a specific tech.</p><h2 id="At-the-conference-before-the-talk"><a href="#At-the-conference-before-the-talk" class="headerlink" title="At the conference: before the talk"></a>At the conference: before the talk</h2><p>Your day will be split into two parts: before and after your talk. The shorter the first part, the better - but it’s usually something you don’t have influence on. Anyway, I used to stress a lot before a talk, which made the first part of the day really unpleasant. However, with time and experience, the time before the talk becomes much less stressful. I know it’s hard, but try not to give up to the stress. <strong>Talk to other speakers</strong> - those more experienced are usually very friendly. The inexperienced are in the same situation as you, so sharing your anxiety will make it easier to bear. There is a chance that fellow speakers will be sitting in the audience during your talk. You will feel better knowing there is at least one friendly person in the audience. Shout out to <a href="https://twitter.com/jawache" target="_blank" rel="noopener">Assim Hussain</a> who was really supportive and gave my talk a lot of visibility by twitting it live at <a href="http://refresh.rocks/" target="_blank" rel="noopener">Refresh Conference 2018</a>!</p><blockquote><p>OMG. I finally understand what the pipe operator does and how the es2018 pipe operator and rxjs pipe are related, functional composition! Thanks <a href="https://twitter.com/miloszpp?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">@miloszpp</a> and <a href="https://twitter.com/REFRESHRocks?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">@REFRESHRocks</a> <a href="https://twitter.com/hashtag/RefreshRocks?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#RefreshRocks</a> <a href="https://t.co/3zy85tpGHt" target="_blank" rel="noopener">pic.twitter.com/3zy85tpGHt</a></p><p>— Asim Hussain (@jawache) <a href="https://twitter.com/jawache/status/1037997721939046401?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">September 7, 2018</a></p></blockquote><p>Don’t rehearse too much on the conference day. One run before leaving the hotel in the morning is enough. By this time, you should already have rehearsed enough.</p><h2 id="At-the-conference-after-the-talk"><a href="#At-the-conference-after-the-talk" class="headerlink" title="At the conference: after the talk"></a>At the conference: after the talk</h2><p>Now you can enjoy the rest of the conference! Have some rest and relax a bit. If you still have some energy left, it’s a good idea to <strong>approach some attendees and talk to them</strong>. Ask them how do they like the conference in general. You don’t have to directly ask about feedback regarding your talk. Most of the time, the topic will come up anyway. If it doesn’t, it’s still a great chance to learn the attendee’s perspective and see what kind of talks do they like. BTW, I don’t feel comfortable approaching strangers at all. However, it seems to be a learnable skill (same as not getting freaked out before your talk is). I find <a href="https://kopywritingkourse.com/how-to-start-a-conversation/" target="_blank" rel="noopener">this guide</a> very helpful in dealing with this.</p><h2 id="After-the-conference"><a href="#After-the-conference" class="headerlink" title="After the conference"></a>After the conference</h2><p>Wait a few days and <strong>send an email to the organizers asking about feedback</strong> with regards to your talk. Most conferences provide some way of rating talks to the attendees. The feedback can be a great way to tell what needs improvement and how well did the topic match your audience. However, don’t worry too much if you receive some negative, non-constructive remarks. There will always be some haters and it really doesn’t mean anything when 2 out of 200 people didn’t like your talk. Now you can decide whether you want to reuse your topic or come up with a new one. I think reusing the topic a few times is perfectly alright. However, I adjust and polish my talk before each conference - based on the feedback, target audience and desired talk duration.</p><h2 id="Is-it-worth-it"><a href="#Is-it-worth-it" class="headerlink" title="Is it worth it?"></a>Is it worth it?</h2><p>Totally! I’ve already mentioned some benefits of public speaking in the <a href="https://codewithstyle.info/introverts-guide-public-speaking/">previous article on the topic</a>. It gets even better when you start going to conferences instead of meetups. When traveling abroad, you will often be reimbursed for the flight and a hotel. You get to meet some seriously experienced speakers and can get a lot of inspiration and advice from them. Most importantly, it’s really rewarding and gives you a sense of achievement.</p><blockquote><p>Best conference speaker gift bag ever! Dzięki <a href="https://twitter.com/hashtag/programistok?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#programistok</a> <a href="https://t.co/trW2BmUAm2" target="_blank" rel="noopener">pic.twitter.com/trW2BmUAm2</a></p><p>— Milosz Piechocki (@miloszpp) <a href="https://twitter.com/miloszpp/status/1046310153627324416?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">September 30, 2018</a></p></blockquote><p>So, if you’re wondering whether you’re ready for a conference talk - <strong>don’t hesitate and start applying</strong>!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The year is nearing its end, so I’d like to share some things I’ve learned on my speaker’s journey. I’ve already written &lt;a href=&quot;https:/
      
    
    </summary>
    
      <category term="Thoughts" scheme="https://codewithstyle.info/categories/Thoughts/"/>
    
    
      <category term="soft skills" scheme="https://codewithstyle.info/tags/soft-skills/"/>
    
      <category term="public speaking" scheme="https://codewithstyle.info/tags/public-speaking/"/>
    
      <category term="conferences" scheme="https://codewithstyle.info/tags/conferences/"/>
    
  </entry>
  
  <entry>
    <title>Free ticket to JS Poland 2018 - results</title>
    <link href="https://codewithstyle.info/free-ticket-js-poland-2018-results/"/>
    <id>https://codewithstyle.info/free-ticket-js-poland-2018-results/</id>
    <published>2018-10-23T15:18:39.000Z</published>
    <updated>2019-12-02T21:26:20.065Z</updated>
    
    <content type="html"><![CDATA[<p>As promised, I’d like to declare the winner of the contest announced in the <a href="https://codewithstyle.info/win-free-ticket-js-poland-2018/">previous post</a>. The winner is…. <a href="https://twitter.com/domanskagrzyb" target="_blank" rel="noopener">@domanskagrzyb</a> <strong>CONGRATULATIONS!</strong> At the moment of writing this post her tweet had 5 likes and 2 retweets which makes it the most popular one. You can see the results by searching for <a href="https://twitter.com/search?src=typd&amp;q=%23jspolandwithstyle" target="_blank" rel="noopener">#jspolandwithstyle</a> hashtag.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;As promised, I’d like to declare the winner of the contest announced in the &lt;a href=&quot;https://codewithstyle.info/win-free-ticket-js-poland
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://codewithstyle.info/categories/JavaScript/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/JavaScript/Web/"/>
    
    
      <category term="conferences" scheme="https://codewithstyle.info/tags/conferences/"/>
    
      <category term="contest" scheme="https://codewithstyle.info/tags/contest/"/>
    
  </entry>
  
  <entry>
    <title>Win free ticket to JS Poland 2018!</title>
    <link href="https://codewithstyle.info/win-free-ticket-js-poland-2018/"/>
    <id>https://codewithstyle.info/win-free-ticket-js-poland-2018/</id>
    <published>2018-10-16T16:55:53.000Z</published>
    <updated>2019-12-02T21:26:20.072Z</updated>
    
    <content type="html"><![CDATA[<p>My blog is partnering up with <a href="https://js-poland.pl/" target="_blank" rel="noopener">JS Poland</a> conference again! </p><p>JS Poland is an amazing event where you can:</p><ul><li>listen to interesting talks from world-class speakers</li><li>network with members of JavaScript community</li><li>deepen your knowledge by participating in exciting workshops</li></ul><p>Readers of <a href="http://codewithstyle.info">codewithstyle.info</a> have a unique chance to win a <strong>free ticket for the conference</strong>! Currently it’s worth <strong>over 100 euros</strong>. In order to win the ticket, please share the link to one of the articles from my blog on Twitter and include <strong>#jspolandwithstyle</strong> hash tag. Please remember about the hashtag, otherwise I won’t be able to find your tweet. The post with the largest sum of retweets and likes wins! I will announce the winner on <strong>October 23</strong>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;My blog is partnering up with &lt;a href=&quot;https://js-poland.pl/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JS Poland&lt;/a&gt; conference again! &lt;/p&gt;
&lt;p&gt;JS P
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://codewithstyle.info/categories/JavaScript/"/>
    
    
      <category term="conferences" scheme="https://codewithstyle.info/tags/conferences/"/>
    
      <category term="contest" scheme="https://codewithstyle.info/tags/contest/"/>
    
  </entry>
  
  <entry>
    <title>Functional JS application from scratch - part 2 - virtual DOM</title>
    <link href="https://codewithstyle.info/functional-js-application-scratch-part-2-virtual-dom/"/>
    <id>https://codewithstyle.info/functional-js-application-scratch-part-2-virtual-dom/</id>
    <published>2018-09-30T17:17:11.000Z</published>
    <updated>2019-12-02T21:26:20.067Z</updated>
    
    <content type="html"><![CDATA[<p>My <a href="https://codewithstyle.info/functional-javascript-app-scratch/">previous post</a> described how to create a very basic web application following the principles of functional programming. That’s fine, but I bet you’re not building <em>basic</em> apps. <strong>How to scale this approach?</strong> This (and the following) post will present some techniques you could use to solve common problems encountered when creating more complex applications.</p><p>Let me remind you that the end goal is not to convince you to ditch all JavaScript frameworks and build your own instead. My point is to <strong>explain the reasoning behind commonly used patterns and how they relate to functional programming</strong>. Source code for this article is available <a href="https://github.com/miloszpp/functional-climbs/tree/part-2-virtual-dom" target="_blank" rel="noopener">here</a>.</p><h2 id="Limiting-DOM-updates"><a href="#Limiting-DOM-updates" class="headerlink" title="Limiting DOM updates"></a>Limiting DOM updates</h2><p>Our little <em>framework</em> relies on <code>view</code> function which translates state into DOM tree. The function is invoked on every state update. This means that <strong>on every state change we need to re-create the whole DOM tree</strong> and have it re-rendered by the browser. In a complex application with multiple actions and huge DOM tree this could have a huge impact on performance. Below you can find a screenshot illustrating the problem. The whole <code>div</code> is updated even though clicking <em>Complete</em> should only affect two table rows. </p><p><img src="/images/2018/09/fp-app-without-vdom-small-1024x423.gif" alt=""> </p><p>Basically, we’d like to limit the amount of unnecessary DOM-related work. On the other hand, we want our code to stay declarative and functional so we have to avoid direct, imperative DOM manipulation.</p><h2 id="Introducing-virtual-DOM"><a href="#Introducing-virtual-DOM" class="headerlink" title="Introducing virtual DOM"></a>Introducing <strong>virtual DOM</strong></h2><p><strong>Virtual DOM</strong> is the answer to our problems! It is a clever technique where instead of creating actual DOM objects you operate on <em>virtual</em> DOM elements. Operations on virtual nodes are much faster than on actual nodes since there is no browser API involved. Obviously, at some point we need to update the actual DOM tree. Here is how we will do this:</p><ul><li><code>view</code> function will return a virtual DOM tree</li><li>on every state update (every <code>app</code> invocation) we will compare the result of the <code>view</code> call with the previous tree</li><li>the comparison results in a set of <code>patches</code> that represent minimal changes to the DOM</li><li><code>patches</code> can be applied to the actual DOM tree; only relevant parts of the DOM are updated, not the whole tree</li></ul><p>Below you can see the difference after enhancing the application with virtual DOM. Note that only relevant parts of the DOM are highlighted. </p><p><img src="/images/2018/09/fp-app-with-vdom-small-1024x449.gif" alt=""></p><h2 id="Show-me-the-code"><a href="#Show-me-the-code" class="headerlink" title="Show me the code"></a>Show me the code</h2><p>Let’s rework our application to take advantage of virtual DOM.</p><h3 id="View-function"><a href="#View-function" class="headerlink" title="View function"></a>View function</h3><p>The first step is to adjust the <code>view</code> function to return virtual nodes instead of real DOM nodes. We are not going to implement the virtual DOM mechanism itself. It’s a highly non-trivial task and not in the scope of this article. Instead, let’s use one of existing virtual DOM libraries. Our library of choice is simply called <a href="https://github.com/Matt-Esch/virtual-dom" target="_blank" rel="noopener">virtual-dom</a>. The best thing about it is that it’s compatible with <code>hyperscript-helpers</code>. Remember how we wrapped <code>hyperscript</code> with <code>hyperscript-helpers</code> so that we were able to use functions such as <code>div</code>, <code>h2</code>, <code>table</code>, etc.? This extra level of indirection will prove enormously useful now. Our <code>view</code> function will continue using these functions. However, they will proxy to <code>virtual-dom</code> instead of <code>hyperscript</code> resulting in virtual DOM nodes instead of real DOM nodes.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> h <span class="keyword">from</span> <span class="string">'virtual-dom/h'</span>;</span><br><span class="line"><span class="keyword">import</span> hh <span class="keyword">from</span> <span class="string">'hyperscript-helpers'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; table, tr, td, th, div, h2, button &#125; = hh(h);</span><br></pre></td></tr></table></figure><p>That’s it! There are no more changes to <code>view</code> function!</p><h3 id="Engine"><a href="#Engine" class="headerlink" title="Engine"></a>Engine</h3><p>The next (and last) step is to adjust the <code>app</code> function. It’s going to get a bit more complex. Before, all we had to do was to replace the <em>old</em> DOM tree with the <em>new</em> tree. However, <code>view</code> returns a virtual tree now. We need to compare the <em>new</em> tree and with <em>old</em> one using <code>diff</code> function provided by the library. The comparison will return a set of <code>patches</code> which can be later applied on the actual DOM tree. The above procedure describes what happens on state update. However, we need an initial DOM tree to begin with! We can get one from the initial virtual tree by calling <code>createElement</code>, also provided by the library. Below you can find the update code.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> diff <span class="keyword">from</span> <span class="string">'virtual-dom/diff'</span>;</span><br><span class="line"><span class="keyword">import</span> patch <span class="keyword">from</span> <span class="string">'virtual-dom/patch'</span>;</span><br><span class="line"><span class="keyword">import</span> createElement <span class="keyword">from</span> <span class="string">'virtual-dom/create-element'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">app</span>(<span class="params">state, previousView = <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> updatedView = view(dispatch, state);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (previousView === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> updatedViewDom = createElement(updatedView);</span><br><span class="line">      rootNode.appendChild(updatedViewDom);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> patches = diff(previousView, updatedView);</span><br><span class="line">      patch(rootNode.children[<span class="number">0</span>], patches);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> nextState = reducer(state, action);</span><br><span class="line">        app(nextState, updatedView);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app(initialState);</span><br></pre></td></tr></table></figure><p>The <code>app</code> function accepts a new parameter called <code>previousView</code>. We need it to be able to compare updated virtual DOM with the previous version. When <code>previousView</code> is <code>null</code>, it means that <code>app</code> is called for the first time (with <code>initialState</code>) and that there is no real DOM tree in place yet. Therefore, we call <code>createElement</code> and append the result to <code>rootNode</code>. When <code>previousView</code> is not empty, we should compare it with the new virtual tree (<code>updatedView</code>) and apply patches on <code>rootNode</code>‘s first child (because we initially attached the whole tree to <code>rootNode</code>). Obviously, this part is not functional code. Patching the DOM is an imperative operation with side effects. However, this part of the code wasn’t pure in the first place. What’s important is that <strong>we’ve managed to preserve the purity of the rest of the code</strong>.</p><h2 id="Virtual-DOM-in-real-world"><a href="#Virtual-DOM-in-real-world" class="headerlink" title="Virtual DOM in real world"></a>Virtual DOM in real world</h2><p>The concept of virtual DOM is instrumental in React framework. This is actually what made React famous for its performance. By the way, if you are familiar with React, you might have noticed similarities between our application and the framework. Indeed, <strong>our <code>view</code> function is nothing less than a React functional component</strong>! It’s interesting to see how other frameworks deal with limiting the amount of DOM operations while maintaining declarativeness. For example, Angular takes a different approach based on <strong>change detection</strong>. You can read more about it in <a href="https://codewithstyle.info/change-detection-angular-versus-angularjs/">one of my posts</a>. This comparison between those two mechanisms seems very interesting to me and I asked a <a href="https://www.reddit.com/r/Angular2/comments/8ytfc1/reacts_virtual_dom_vs_angulars_change_detection/" target="_blank" rel="noopener">question on Reddit specifically about it</a>. I’ve got an amazing reply from Rob Wolmard which details the pros and cons of both approaches:</p><blockquote><p>The tradeoff (and part of the philosophy Angular is built around) is that templating allows Angular to deeply understand a template, and generate highly optimized code, in both pure CPU cycles, but low memory consumption and garbage collection. The flexibility of being able to return whatever from a JSX-style <code>render()</code> function means the framework has to be able to handle whatever, and each time a new virtual DOM representation is created, it can consume a fair amount of memory - especially important on low end devices.</p></blockquote><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In this post you’ve learned what virtual DOM is and how frameworks can use it to optimize performance while remaining declarative. I believe that this example nicely illustrates how trying to build your own framework can push you to learn new things and understand how existing frameworks work underneath.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;My &lt;a href=&quot;https://codewithstyle.info/functional-javascript-app-scratch/&quot;&gt;previous post&lt;/a&gt; described how to create a very basic web app
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://codewithstyle.info/categories/JavaScript/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/JavaScript/Web/"/>
    
    
      <category term="javascript" scheme="https://codewithstyle.info/tags/javascript/"/>
    
      <category term="functional programming" scheme="https://codewithstyle.info/tags/functional-programming/"/>
    
      <category term="vanilla js" scheme="https://codewithstyle.info/tags/vanilla-js/"/>
    
  </entry>
  
  <entry>
    <title>Become a better JavaScript Developer with functional programming</title>
    <link href="https://codewithstyle.info/talk-video-become-better-javascript-developer-functional-programming/"/>
    <id>https://codewithstyle.info/talk-video-become-better-javascript-developer-functional-programming/</id>
    <published>2018-09-26T18:09:58.000Z</published>
    <updated>2019-12-02T21:26:20.071Z</updated>
    
    <content type="html"><![CDATA[<p>Few weeks ago I had the great pleasure of speaking at <a href="http://refresh.rocks/" target="_blank" rel="noopener">Refresh Conference</a> in Tallinn, Estonia. Below, you can find the recording from my talk. Let me know if you liked it!</p><iframe width="560" height="315" src="https://www.youtube.com/embed/MJHH7k3KiEI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Few weeks ago I had the great pleasure of speaking at &lt;a href=&quot;http://refresh.rocks/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Refresh Conference&lt;/
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://codewithstyle.info/categories/JavaScript/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/JavaScript/Web/"/>
    
    
      <category term="functional programming" scheme="https://codewithstyle.info/tags/functional-programming/"/>
    
      <category term="video" scheme="https://codewithstyle.info/tags/video/"/>
    
      <category term="talk" scheme="https://codewithstyle.info/tags/talk/"/>
    
  </entry>
  
  <entry>
    <title>Functional JavaScript app from scratch</title>
    <link href="https://codewithstyle.info/functional-javascript-app-scratch/"/>
    <id>https://codewithstyle.info/functional-javascript-app-scratch/</id>
    <published>2018-08-15T08:11:37.000Z</published>
    <updated>2019-12-02T21:26:20.065Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve been writing a lot about specific functional concepts and their implementation in JavaScript and TypeScript. In this article, I’d like to show you how to put some of these ideas together and <strong>create a working application based on functional programming principles</strong>. The application we’re about to build is called <em>Functional Climbs</em>. It presents a list of climbing routes and allows the user to mark some of them as completed. </p><p>I’m not going to use any framework but there will be some helper libraries involved. The source code is available <a href="https://github.com/miloszpp/functional-climbs" target="_blank" rel="noopener">here</a>.</p><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>Every application has a <strong>state</strong>. It can be distributed across fields in multiple objects (components, controllers, etc.) or it can be centralized. In the centralized approach, the state is an object that stores the information the application needs to function. In our case, the state will contain an array of objects, each one representing a climb.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> initialState = &#123;</span><br><span class="line">    climbs: [</span><br><span class="line">        &#123;</span><br><span class="line">            id: <span class="number">1</span>,</span><br><span class="line">            name: <span class="string">'Mount Blanc'</span>,</span><br><span class="line">            elevation: <span class="number">4808</span>,</span><br><span class="line">            difficulty: <span class="string">'medium'</span>,</span><br><span class="line">            completed: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            id: <span class="number">2</span>,</span><br><span class="line">            name: <span class="string">'Matterhorn'</span>,</span><br><span class="line">            elevation: <span class="number">4478</span>,</span><br><span class="line">            difficulty: <span class="string">'hard'</span>,</span><br><span class="line">            completed: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Feel free to extend the list and add some more climbs!</p><h2 id="From-State-to-View"><a href="#From-State-to-View" class="headerlink" title="From State to View"></a>From State to View</h2><p>Now that we know the structure of the state, it’s time to create a function that produces a DOM tree based on the state. Since we’re doing functional programming, this function should, of course, be <strong>pure</strong>. How to create the DOM tree in a functional way? The standard DOM API is not very functional - it relies on global objects and mutations. Instead, we’re going to use two libraries - <a href="https://github.com/hyperhype/hyperscript" target="_blank" rel="noopener">hyperscript</a> and <a href="https://github.com/ohanhi/hyperscript-helpers" target="_blank" rel="noopener">hyperscript-helpers</a>. <em>Hyperscript</em> makes it possible to create DOM trees in a declarative way. Instead of manipulating nodes you simply declare what you’d like the document to look like:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> h = <span class="built_in">require</span>(<span class="string">'hyperscript'</span>)</span><br><span class="line">h(<span class="string">'div#page'</span>,</span><br><span class="line">  h(<span class="string">'div#header'</span>,</span><br><span class="line">    h(<span class="string">'h1.classy'</span>, <span class="string">'h'</span>, &#123; style: &#123;<span class="string">'background-color'</span>: <span class="string">'#22f'</span>&#125; &#125;)),</span><br><span class="line">  h(<span class="string">'div#menu'</span>, &#123; style: &#123;<span class="string">'background-color'</span>: <span class="string">'#2f2'</span>&#125; &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>With <em>hyperscript-helpers</em> the task becomes even easier as instead of using <code>h</code> function all the time you can use functions named after HTML tags</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">h(<span class="string">'div'</span>) ---&gt; div()</span><br><span class="line">h(<span class="string">'section#main'</span>, mainContents) ---&gt; section(<span class="string">'#main'</span>, mainContents)</span><br></pre></td></tr></table></figure><p>If you don’t feel like using JS functions instead of HTML, you can achieve the same results with JSX.</p><h2 id="Implementing-View-function"><a href="#Implementing-View-function" class="headerlink" title="Implementing View function"></a>Implementing View function</h2><p>The role of the <strong>view function</strong> is simple - it has to translate state into a DOM tree by calling various <code>hyperscript-helpers</code> functions. Most of these functions accept three parameters:</p><ul><li>CSS selector that can be used to set <code>class</code> and <code>id</code> of the element</li><li>an object with properties (attributes)</li><li>an object or an array containing children</li></ul><p>It’s a good idea to break down the <code>view</code> function into smaller functions representing different <strong>components</strong> of the UI. You might put the implementation of this function inside a separate <code>view.js</code> file. Let’s take the top-down approach and start with the root function. We separate climbs into two arrays representing completed and remaining climbs. Next, we use the <code>climblist</code> component to display them. CSS classes are referring to Bootstrap.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> h <span class="keyword">from</span> <span class="string">'hyperscript'</span>;</span><br><span class="line"><span class="keyword">import</span> hh <span class="keyword">from</span> <span class="string">'hyperscript-helpers'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; table, tr, td, th, div, h2, button &#125; = hh(h);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">view</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> completedClimbs = state.climbs.filter(<span class="function"><span class="params">c</span> =&gt;</span> c.completed);</span><br><span class="line">    <span class="keyword">const</span> remainingClimbs = state.climbs.filter(<span class="function"><span class="params">c</span> =&gt;</span> !c.completed);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> div(<span class="string">'.container'</span>, <span class="literal">null</span>, [ </span><br><span class="line">        h2(<span class="string">'.mt-3'</span>, <span class="literal">null</span>, <span class="string">'Remaining climbs'</span>),</span><br><span class="line">        climblist(remainingClimbs),</span><br><span class="line">        h2(<span class="string">'.mt-3'</span>, <span class="literal">null</span>, <span class="string">'Completed climbs'</span>),</span><br><span class="line">        climblist(completedClimbs),</span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Component <code>climblist</code> is simply an HTML table. We <code>map</code> every climb inside the state to <code>climblistRow</code> component. As an exercise, you can add a static table header to this function!</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">climblist</span>(<span class="params">climbs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> table(</span><br><span class="line">        <span class="string">'.climblist.table'</span>,</span><br><span class="line">        [</span><br><span class="line">            ...climbs.map(climblistRow)</span><br><span class="line">        ]</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Finally, <code>climblistRow</code> consists of cells containing data from <code>climb</code> objects. The last column contains a button that will toggle “completeness” of a climb. For now, it will not do anything.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">climblistRow</span>(<span class="params">climb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> toggleLabel = climb.completed ? <span class="string">'Uncomplete'</span> : <span class="string">'Complete'</span>;</span><br><span class="line">    <span class="keyword">return</span> tr(</span><br><span class="line">        <span class="string">'.climblist__row'</span>,</span><br><span class="line">        <span class="literal">null</span>,</span><br><span class="line">        [ </span><br><span class="line">            td(<span class="string">'.climblist__cell'</span>, <span class="literal">null</span>, climb.name),</span><br><span class="line">            td(<span class="string">'.climblist__cell'</span>, <span class="literal">null</span>, climb.elevation),</span><br><span class="line">            td(<span class="string">'.climblist__cell'</span>, <span class="literal">null</span>, climb.difficulty),</span><br><span class="line">            td(</span><br><span class="line">                <span class="string">'.climblist__cell'</span>, </span><br><span class="line">                <span class="literal">null</span>, </span><br><span class="line">                button(</span><br><span class="line">                    <span class="string">'.btn.btn-primary'</span>, </span><br><span class="line">                    <span class="literal">null</span>, </span><br><span class="line">                    toggleLabel</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">        ]</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You are now ready to put the view function into action. Create an <code>index.html</code> file with the following body:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'root'</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Now all you need to do is to run <code>view</code> function on <code>initialState</code> and attach the result to the <code>root</code> node. Create and <code>index.js</code> file with the following content:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; view &#125; <span class="keyword">from</span> <span class="string">'./views'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootNode = <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>);</span><br><span class="line"><span class="keyword">const</span> currentNode = rootNode.childNodes[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> newNode = view(initialState);</span><br><span class="line"></span><br><span class="line">rootNode.replaceChild(newNode, currentNode);</span><br></pre></td></tr></table></figure><p>To make this all work together you will need a module bundler. Check out the webpack config in the <a href="https://github.com/miloszpp/functional-climbs" target="_blank" rel="noopener">source code</a>. When you launch the application you should see a table displaying climbs defined in the initial state. </p><p><img src="/images/2018/08/Screen-Shot-2018-08-13-at-20.50.47-1024x321.png" alt=""></p><h2 id="Let’s-have-some-action"><a href="#Let’s-have-some-action" class="headerlink" title="Let’s have some action"></a>Let’s have some <em>action</em></h2><p>So far our application is rather boring. Toggle buttons don’t do anything interesting. It’s time to change it! As you know, the most important part of the application is the state object which is <em>the golden source of truth</em>. So if we want something to happen then we need to modify the state. But hey, it’s functional programming - we <strong>can not mutate the state</strong>! Instead, we will return a fresh, updated copy of the state and re-generate the DOM based on it. Let’s create a function called <code>reducer</code> which takes a state object and an action object and returns a new state object. But what’s the <strong>action</strong> object? It’s simply a piece of data representing some event in the application. We will only have a single action that will be triggered when the user clicks on the toggle button. It has to store the id of the climb that is being toggled. Let’s create <code>actions.js</code> file with the following contents:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> TOGGLE_COMPLETED_ACTION = <span class="string">'TOGGLE_COMPLETED_ACTION'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">toggleCompleted</span>(<span class="params">climbId</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="keyword">type</span>: TOGGLE_COMPLETED_ACTION,</span><br><span class="line">        payload: climbId</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It’s a common convention to have these two fields inside action objects. <code>type</code> determines what action is it and <code>payload</code> contains details of the event. In our case <code>payload</code> is simply <code>climbId</code> but it could be any object. Next, we will write the <code>reducer</code> function. Given the state and the <code>TOGGLE_COMPLETED_ACTION</code> action, it needs to return a new state object where the climb with provided <code>id</code> is replaced with a new climb object with <code>completed</code> field flipped.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> TOGGLE_COMPLETED_ACTION:</span><br><span class="line">            <span class="keyword">return</span> &#123; </span><br><span class="line">                ...state, </span><br><span class="line">                climbs: state.climbs.map(<span class="function"><span class="params">c</span> =&gt;</span> c.id === action.payload ? &#123; ...c, completed: !c.completed &#125; : c)</span><br><span class="line">            &#125;;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note how we make sure not to mutate the <code>state</code> object. <em>Spread operator</em> and <code>map</code> method are pretty useful in this scenario. Next, we need a way to trigger this new action. Let’s assume for now that <code>view</code> function accepts another parameter called <code>dispatch</code>. It will be a function and it will be used to trigger actions. We need to pass this parameter all the way down to <code>climblistRow</code> component where it can be hooked to <code>onclick</code> property of the toggle button.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">button(</span><br><span class="line">    <span class="string">'.btn.btn-primary'</span>, </span><br><span class="line">    &#123; onclick: <span class="function"><span class="params">()</span> =&gt;</span> dispatch(toggleCompleted(climb.id)) &#125;, </span><br><span class="line">    toggleLabel</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Make sure to put <code>dispatch</code> as the first parameter of all view functions. It will allow you to do <strong>partial application</strong> using <code>curry</code> function (which you can get from <a href="https://ramdajs.com/" target="_blank" rel="noopener">Ramda</a>).</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...climbs.map(curry(climblistRow)(dispatch))</span><br></pre></td></tr></table></figure><h2 id="Putting-it-all-together"><a href="#Putting-it-all-together" class="headerlink" title="Putting it all together"></a>Putting it all together</h2><p>It’s time to create some machinery so that action results in DOM updates. This is the only impure fragment of the codebase! Replace the contents of <code>index.js</code> with the following code.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rootNode = <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">app</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> updatedView = view(dispatch, state);</span><br><span class="line">    <span class="keyword">const</span> currentView = rootNode.childNodes[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    rootNode.replaceChild(updatedView, currentView);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> nextState = reducer(state, action);</span><br><span class="line">        app(nextState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app(initialState);</span><br></pre></td></tr></table></figure><p>The <code>app</code> function <em>applies</em> provided state object to the DOM. What’s more, it defines the <code>dispatch</code> function which is used to trigger actions. This function uses <code>reducer</code> to apply the action on existing state and recursively passes the new state object to <code>app</code>. Finally, we call <code>app</code> with <code>initialState</code>. And that’s it! Run the application and try out toggle buttons - they should work now. </p><p><img src="/images/2018/08/functional-climbs1-1.png" alt=""></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>You’ve just created a working application which is as functional as it possibly can. Of course it has some impure parts - every application should have some side effects, otherwise, it wouldn’t be very useful! The trick is to minimize and isolate the impure parts. For those of you familiar with Redux or MobX this approach can feel very familiar. Indeed, we’ve implemented a simplistic version of a state management framework. I totally suggest using a real framework instead but for educational purposes, it’s a good idea to see how it works underneath. You might have concerns about performance. Re-creating the whole DOM on every tiny state change doesn’t sound optimal. The answer to this is <strong>virtual DOM</strong>. There are libraries that allow you to create virtual DOM nodes that can later be compared and only small, incremental changes to the DOM are executed. This is exactly how React works! <code>hypescript-helpers</code> are compatible with some virtual DOM libraries. I hope the article was clear enough and that now it’s clearer how to apply functional programming principles in real life!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I’ve been writing a lot about specific functional concepts and their implementation in JavaScript and TypeScript. In this article, I’d li
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://codewithstyle.info/categories/JavaScript/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/JavaScript/Web/"/>
    
    
      <category term="functional programming" scheme="https://codewithstyle.info/tags/functional-programming/"/>
    
      <category term="vanilla js" scheme="https://codewithstyle.info/tags/vanilla-js/"/>
    
  </entry>
  
  <entry>
    <title>Scan and Redux pattern state management - Reactive Programming in Angular</title>
    <link href="https://codewithstyle.info/scan-redux-pattern-state-management-reactive-programming-angular/"/>
    <id>https://codewithstyle.info/scan-redux-pattern-state-management-reactive-programming-angular/</id>
    <published>2018-07-31T12:19:45.000Z</published>
    <updated>2019-12-02T21:26:20.071Z</updated>
    
    <content type="html"><![CDATA[<p>I’m back from holiday and ready to publish the last episode of <a href="https://codewithstyle.info/reactive-programming-rxjs-angular-video-course/">Reactive Programming in Angular video series</a>! </p><p>In this last episode, I look at a very interesting topic of how RxJS can be used to implement a <strong>state management</strong> technique known from libraries such as Redux. As always, you’ll learn it based on a practical use-case - building a <strong>form undo mechanism</strong>! I hope you’ve enjoyed the course and it made you interested in reactive programming. </p><iframe width="560" height="315" src="https://www.youtube.com/embed/RD1T_NhlBOI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p><strong>Let me know in comments</strong> if there is a topic that I haven’t covered that you’d like to watch a video about!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I’m back from holiday and ready to publish the last episode of &lt;a href=&quot;https://codewithstyle.info/reactive-programming-rxjs-angular-vide
      
    
    </summary>
    
      <category term="Angular" scheme="https://codewithstyle.info/categories/Angular/"/>
    
      <category term="JavaScript" scheme="https://codewithstyle.info/categories/Angular/JavaScript/"/>
    
      <category term="Uncategorized" scheme="https://codewithstyle.info/categories/Angular/JavaScript/Uncategorized/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/Angular/JavaScript/Uncategorized/Web/"/>
    
    
      <category term="angular" scheme="https://codewithstyle.info/tags/angular/"/>
    
      <category term="video" scheme="https://codewithstyle.info/tags/video/"/>
    
      <category term="rxjs" scheme="https://codewithstyle.info/tags/rxjs/"/>
    
  </entry>
  
  <entry>
    <title>Reactive Forms - Reactive Programming in Angular</title>
    <link href="https://codewithstyle.info/reactive-forms-reactive-programming-angular/"/>
    <id>https://codewithstyle.info/reactive-forms-reactive-programming-angular/</id>
    <published>2018-07-18T07:00:46.000Z</published>
    <updated>2019-12-02T21:26:20.069Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve just published the 7th episode of <strong>Reactive Programming in Angular</strong> course! </p><p>We’re moving on to the topic of reactive forms which are another piece of reactive API in Angular. In this video, I’m implementing a form auto-save mechanism. </p><iframe width="560" height="315" src="https://www.youtube.com/embed/D1KdhAQpADM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>You can access the whole course from <a href="https://codewithstyle.info/reactive-programming-rxjs-angular-video-course/">here</a>. Let me know in comments if you liked it!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I’ve just published the 7th episode of &lt;strong&gt;Reactive Programming in Angular&lt;/strong&gt; course! &lt;/p&gt;
&lt;p&gt;We’re moving on to the topic of r
      
    
    </summary>
    
      <category term="Angular" scheme="https://codewithstyle.info/categories/Angular/"/>
    
      <category term="Uncategorized" scheme="https://codewithstyle.info/categories/Angular/Uncategorized/"/>
    
    
      <category term="angular" scheme="https://codewithstyle.info/tags/angular/"/>
    
      <category term="video" scheme="https://codewithstyle.info/tags/video/"/>
    
      <category term="rxjs" scheme="https://codewithstyle.info/tags/rxjs/"/>
    
  </entry>
  
  <entry>
    <title>30 months of blogging - a summary</title>
    <link href="https://codewithstyle.info/30-months-blogging-summary/"/>
    <id>https://codewithstyle.info/30-months-blogging-summary/</id>
    <published>2018-07-12T07:00:15.000Z</published>
    <updated>2019-12-02T21:26:20.060Z</updated>
    
    <content type="html"><![CDATA[<p>Yesterday I realised it’s been some time since I’ve started blogging. Actually, it’s been over 30 months! I’ve decided it’s a good opportunity to share some numbers and my thoughts on blogging in general. I hope fellow IT bloggers will find my story useful. If you’re not interested in the details but just want to <strong>get inspired</strong>, feel free to jump to the last part of the article!</p><h2 id="Numbers"><a href="#Numbers" class="headerlink" title="Numbers"></a>Numbers</h2><p>Let’s start with some statistics!</p><ul><li>Total number of published posts: <strong>57</strong></li><li>All time views: <strong>90,065</strong></li><li>Best ever views in a day: <strong>3,865</strong></li><li>Newsletter subscribers: <strong>195</strong></li><li>Total number of comments: <strong>133</strong></li><li><a href="https://www.youtube.com/codewithstyleinfo" target="_blank" rel="noopener">YouTube channel</a> subscribers: <strong>119</strong></li></ul><p>These stats are not 100% complete because after a few months of blogging I changed the platform from Google to Wordpress. Interestingly, the best day in term of views happened in the second month of blogging resulting in over 10,000 views (<a href="https://codewithstyle.info/scalas-option-monad-versus-null-conditional-operator-in-c/">this post</a> made it to Hacker News front page). I’ve never managed to do this again.</p><h3 id="Total-number-of-posts"><a href="#Total-number-of-posts" class="headerlink" title="Total number of posts"></a>Total number of posts</h3><p>The number divided by 30 gives a not-so-bad average of almost 2 posts a month. It’s far less than many experienced bloggers recommend (at least once a week or even daily). I’ve tried posting weekly but couldn’t keep up at all. Writing a post takes me at least several hours as it often requires researching a topic and writing some code. A possible solution to this is to introduce shorter, less thorough posts. <strong>Do you think it makes sense?</strong></p><h3 id="All-time-views"><a href="#All-time-views" class="headerlink" title="All time views"></a>All time views</h3><p>The number of monthly views is increasing steadily which I think is good as it indicates some progress. <img src="/images/2018/07/blog-monthly-views-1024x192.png" alt=""> However, I’m not so much interested in quantity as in quality of visits. Google Analytics says over 87% bounce rate and only 52-second average session duration which is not satisfactory to me. I need to think about ways to increase engagement and make readers want to read stay on the blog. <strong>Do you have any ideas?</strong> <img src="/images/2018/07/top-posts-by-views.png" alt=""> What’s more, most of the traffic comes from Google search and does not hit posts related to functional programming. I decided to make it the main theme of the blog some time ago. Readers hitting posts about Firebase will not likely be interested in exploring the blog any further as the main theme doesn’t correspond with what they were looking for. I’m not sure how to address it. The most viewed posts happen to be rather old so they had time to build a good rank in Google search. Maybe the functional programming stuff will also be reached this way in the future.</p><h3 id="Newsletter-subscribers"><a href="#Newsletter-subscribers" class="headerlink" title="Newsletter subscribers"></a>Newsletter subscribers</h3><p>I think it’s a good number. When I imagine 200 people in a room, it’s quite a lot 😀 I have to admit that over 95% of subscribers were incentivized by the free ebook about functional programming in JavaScript. I’ve tried a pop-up once and it was working pretty well. However, I’ve decided it’s too annoying and disabled it. The open rate on the last newsletter was <strong>43.8%</strong> while click rate was <strong>7.3%</strong>.</p><h3 id="Total-number-of-comments"><a href="#Total-number-of-comments" class="headerlink" title="Total number of comments"></a>Total number of comments</h3><p>This number is the one I’m the most dissatisfied with. Bear in mind that half of the comments are mine (I reply to almost every comment) and some of them are self-pingbacks. I would gladly trade most of the views for bigger engagement on the blog. There are many smaller blogs where you see heated discussions in comments. It never happens on my blog. I’ve tried directly asking questions in posts in order to increase engagement but it doesn’t seem to work. I’m thinking about writing more opinion-based posts so that at least I can get ranted about in the comments section 😀 <strong>Any other advice from you?</strong></p><h2 id="Important-events-in-blog-history"><a href="#Important-events-in-blog-history" class="headerlink" title="Important events in blog history"></a>Important events in blog history</h2><p>The blog has undergone some changes in the course of these 30 months. I’m learning all the time and try to make it better and better. Here are some most important events from the blog’s history.</p><ul><li>February 2016: <strong>Hacker News front page and 10K views in a day</strong> - this happened in the early days of the blog because of <a href="https://codewithstyle.info/scalas-option-monad-versus-null-conditional-operator-in-c/">this post</a>; at first it was very motivating but some disappointment came in the following days - almost none of the visitors on that day became a returning visitor; a lesson to learn</li><li>September 2017: <strong>Free e-book about FP in JavaScript</strong> - after completing a series of posts about FP in JavaScript I’ve decided to turn it into a free e-book and start building a newsletter list at the same time. The strategy worked quite well and I use the e-book as a freebie until this day.</li><li>January 2018: <strong>Specialization in functional programming and web apps</strong> - in the beginning, the blog covered a rather broad spectrum of topics; I’ve decided it’s not a good thing and that it doesn’t help in terms of creating a community of returning readers; after much thought I’ve decided to make functional programming on web the main topic of the blog; I’m not sure it was a good idea as it seems that it’s harder to make people read about FP then about e.g. Firebase; however, I’d like to stick to this approach for a bit longer and see how it works out in the long run</li><li>March 2018: <strong>Start of the YouTube channel</strong> - given some success as a public speaker and trainer, I’ve decided that it would be nice to try myself on YouTube. I absolutely loved it and also received some good feedback. However, the channel doesn’t work very well as a source of traffic for the blog</li></ul><h2 id="Benefits-of-running-the-blog"><a href="#Benefits-of-running-the-blog" class="headerlink" title="Benefits of running the blog"></a>Benefits of running the blog</h2><p>I’d like to finish on a positive note so let me share how the blog influenced my life in a positive way. And hell, it did!</p><ul><li><strong>I became a public-speaker because of this blog</strong> - more than a year ago I had a chance to give a talk at a meetup. I’ve decided to do this because I had the contents of the talk almost ready - all I had to do is to take <a href="https://codewithstyle.info/building-serverless-web-application-angular-2-webtask-firebase/">a blog post</a> and make it into a talk.</li><li><strong>I’ve received numerous job offers because of the blog</strong> - I’ve received many offers referring to my blog; some of them directly as a result of a particular blog post. What’s more, I’m currently switching jobs to one that I was offered at least in part because of I run a programming blog.</li><li><strong>The blog helped me succeed at work</strong> - running a programming blog makes you seem a better developer in the eyes of your co-workers. There are many ways one can benefit from this, including a promotion.</li><li><strong>The blog helped me develop communication skills</strong> - it’s hard to measure but after writing so much text, most of it focused on explaining difficult technical topics, there is no way I didn’t become better at communicating. I can feel it when doing tech talks and training.</li></ul><p>There is probably more. As you can see, there are many ways you can benefit from a blog apart from making it a source of passive income. So, if you are undecided then stop thinking about it and start writing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Yesterday I realised it’s been some time since I’ve started blogging. Actually, it’s been over 30 months! I’ve decided it’s a good opport
      
    
    </summary>
    
      <category term="Thoughts" scheme="https://codewithstyle.info/categories/Thoughts/"/>
    
    
      <category term="soft skills" scheme="https://codewithstyle.info/tags/soft-skills/"/>
    
      <category term="blogging" scheme="https://codewithstyle.info/tags/blogging/"/>
    
  </entry>
  
  <entry>
    <title>Lossless Backpressure - Reactive Programming in Angular</title>
    <link href="https://codewithstyle.info/lossless-backpressure-reactive-programming-angular/"/>
    <id>https://codewithstyle.info/lossless-backpressure-reactive-programming-angular/</id>
    <published>2018-07-09T13:59:53.000Z</published>
    <updated>2019-12-02T21:26:20.069Z</updated>
    
    <content type="html"><![CDATA[<p>A new episode of Reactive Programming in Angular is out! We continue the topic of backpressure. This time you will learn how to batch notifications with <code>bufferTime</code> operator. </p><iframe width="560" height="315" src="https://www.youtube.com/embed/_qNwc4aueg8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>Enjoy and please remember to subscribe if you like what you see! The whole course is available <a href="https://codewithstyle.info/reactive-programming-rxjs-angular-video-course/">here</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;A new episode of Reactive Programming in Angular is out! We continue the topic of backpressure. This time you will learn how to batch not
      
    
    </summary>
    
      <category term="Angular" scheme="https://codewithstyle.info/categories/Angular/"/>
    
    
      <category term="angular" scheme="https://codewithstyle.info/tags/angular/"/>
    
      <category term="video" scheme="https://codewithstyle.info/tags/video/"/>
    
      <category term="rxjs" scheme="https://codewithstyle.info/tags/rxjs/"/>
    
  </entry>
  
  <entry>
    <title>Deep dive into pipe function in RxJS</title>
    <link href="https://codewithstyle.info/deep-dive-pipe-function-rxjs/"/>
    <id>https://codewithstyle.info/deep-dive-pipe-function-rxjs/</id>
    <published>2018-07-02T07:00:08.000Z</published>
    <updated>2019-12-02T21:26:20.065Z</updated>
    
    <content type="html"><![CDATA[<p>Version 5 of RxJS introduced the concept of <em>lettable</em> (also known as <em>pipeable</em>) operators. Version 6 went one step further and deprecated the old way of calling operators (method chaining). You might have already used the <code>pipe</code> function. But do you really understand what it does?</p><h2 id="Composing-functions"><a href="#Composing-functions" class="headerlink" title="Composing functions"></a>Composing functions</h2><p>RxJS is often called a <strong>functional-reactive programming</strong> library. It should not come as a surprise that you will find many functional programming inspirations in it. One of them is the <code>pipe</code> function. Take a look at the below piece of code:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getElement = </span><br><span class="line">    (id) =&gt; <span class="built_in">document</span>.getElementById(id);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getValue = </span><br><span class="line">    (element) =&gt; element.value;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logElementValue</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> el = getElement(id);</span><br><span class="line">  <span class="keyword">const</span> value = getValue(el);</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>logElementValue</code> function takes an <code>id</code> and logs to the console the value of the element with provided <code>id</code>. Can you see a pattern in this function’s implementation? Firstly, it calls <code>getElement</code> with <code>id</code> and stores the result in <code>el</code>. Next, the result is passed to <code>getValue</code> which produces a new result, <code>el</code>. Finally, <code>el</code> is passed to <code>console.log</code>. What this function does is simply taking the result of a function and passing it as an argument to another function. Is there a better, more concise way to implement this function? Let’s say we just have two functions (<code>getElement</code> and <code>getValue</code>). We will implement a generic function called <code>compose</code> that will pass the result of <code>getElement</code> to <code>getValue</code>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compose = <span class="function">(<span class="params">f, g</span>) =&gt;</span> x =&gt; g(f(x));</span><br></pre></td></tr></table></figure><p>The definition is very simple but may take a moment to parse. We’ve defined a function that takes two functions <code>f</code> and <code>g</code> (that would be <code>getElement</code> and <code>getValue</code> in our case) and returns a new function. This new function will take an argument, pass it to <code>f</code> and then pass the result to <code>g</code>. That’s exactly what we need! Now I can rewrite <code>logElementValue</code>:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logElementValue</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> getValueFromId = compose(getElement, getValue);</span><br><span class="line">  <span class="keyword">const</span> value = getValueFromId(id);</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="How-about-more-than-two-functions"><a href="#How-about-more-than-two-functions" class="headerlink" title="How about more than two functions?"></a>How about more than two functions?</h2><p>But, wait! Once we have the result of calling <code>getValueFromId</code> we immediately pass it to <code>console.log</code>. So it’s the same pattern here. We could write it like this:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logElementValue</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> getValueFromId = compose(getElement, getValue);</span><br><span class="line">  <span class="keyword">const</span> logValue = compose(getValueFromId, <span class="built_in">console</span>.log);</span><br><span class="line">  logValue(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But life would be much simpler if <code>compose</code> could take any number of functions. Can we do this? Sure:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> composeMany = <span class="function">(<span class="params">...args</span>) =&gt;</span> args.reduce(compose);</span><br></pre></td></tr></table></figure><p>Another brain teaser! <code>composeMany</code> takes any number of functions. They are stored in <code>args</code> array. We <code>reduce</code> over <code>args</code> composing every function with the result of composing previous functions. Anyway, the results is a function that takes any number of functions and will pass the result of <code>N-th</code> function to <code>(N+1)-th</code> function. But what have we achieved by that?</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logElementValue</span>(<span class="params">id</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">const</span> logValue = composeMany(getElement, getValue, <span class="built_in">console</span>.log);</span><br><span class="line">  logValue(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Which can be simplified even more:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> logElementValue = composeMany(getElement, getValue, <span class="built_in">console</span>.log);</span><br></pre></td></tr></table></figure><p>Isn’t that cool? We have significantly simplified the code. It’s now very clear what <code>logElementValue</code> does. And by the way - <code>composeMany</code> is just a name a came up with. The official name is <code>pipe</code>!</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> logElementValue = pipe(getElement, getValue, <span class="built_in">console</span>.log);</span><br></pre></td></tr></table></figure><h2 id="Back-to-RxJS"><a href="#Back-to-RxJS" class="headerlink" title="Back to RxJS"></a>Back to RxJS</h2><p>Let’s take an example of <code>pipe</code> usage in RxJS.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">number</span>$.pipe(</span><br><span class="line">    map(<span class="function"><span class="params">n</span> =&gt;</span> n * n),</span><br><span class="line">    filter(<span class="function"><span class="params">n</span> =&gt;</span> n % <span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>We can also write it in a different way:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; pipe &#125; = rxjs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> transformNumbers = pipe(</span><br><span class="line">     map(<span class="function"><span class="params">x</span> =&gt;</span> x * x),</span><br><span class="line">     filter(<span class="function"><span class="params">x</span> =&gt;</span> x % <span class="number">2</span> === <span class="number">0</span>),</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">transformNumbers(<span class="built_in">number</span>$).subscribe(<span class="built_in">console</span>.log);</span><br></pre></td></tr></table></figure><p>And the result is exactly the same! As you can see, the <code>pipe</code> function in RxJS behaves in exactly the same way that the <code>pipe</code> function that we’ve defined in the first part of the article. It takes a number of functions and composes them by passing the result of a function as an argument to another function. You might say that this is different than the previous example because here we’re invoking <code>map</code> and <code>filter</code> and not simply passing them. Actually, both <code>map</code> and <code>filter</code> will return functions. We’re not composing <code>map</code> and <code>filter</code> themselves but rather the functions returned by invoking them. You can check out how RxJS implements <code>pipe</code> function <a href="https://github.com/ReactiveX/rxjs/blob/94156a214f905555b6e57bc3f7cf965629028406/src/internal/util/pipe.ts" target="_blank" rel="noopener">here</a>.</p><h2 id="Pipeline-operator"><a href="#Pipeline-operator" class="headerlink" title="Pipeline operator"></a>Pipeline operator</h2><p>Our function is such a useful concept that it might be added as a separate operator to the JavaScript language! It would mean that the example from the previous article can be written in an even simpler way:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> logElementValue = getElement |&gt; getValue |&gt; <span class="built_in">console</span>.log;</span><br></pre></td></tr></table></figure><p>You can see the details of the proposal <a href="https://github.com/tc39/proposal-pipeline-operator" target="_blank" rel="noopener">here</a>.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>I hope this article helped you understand what <code>pipe</code> function is all about. You should now feel more comfortable using it! The fact that RxJS migrated from the traditional, object-oriented approach of applying operators to the pipeline approach shows how strong the influence of functional programming is nowadays. I think that’s great! Let me know in comments if you prefer <code>pipe</code> function to traditional method chaining.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Version 5 of RxJS introduced the concept of &lt;em&gt;lettable&lt;/em&gt; (also known as &lt;em&gt;pipeable&lt;/em&gt;) operators. Version 6 went one step furthe
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://codewithstyle.info/categories/JavaScript/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/JavaScript/Web/"/>
    
    
      <category term="functional programming" scheme="https://codewithstyle.info/tags/functional-programming/"/>
    
      <category term="rxjs" scheme="https://codewithstyle.info/tags/rxjs/"/>
    
  </entry>
  
  <entry>
    <title>Lossy Backpressure - Reactive Programming in Angular</title>
    <link href="https://codewithstyle.info/lossy-backpressure-reactive-programming-angular/"/>
    <id>https://codewithstyle.info/lossy-backpressure-reactive-programming-angular/</id>
    <published>2018-06-25T13:30:20.000Z</published>
    <updated>2019-12-02T21:26:20.069Z</updated>
    
    <content type="html"><![CDATA[<p>After a long break, I’ve prepared a video for you! It’s a new episode of the Reactive Programming in Angular video course. This time we will tackle backpressure - a technique of dealing with observable streams that produce events too fast. As usual, it’s explained in a practical context. You will not only learn what it is but also how it can help you! </p><iframe width="560" height="315" src="https://www.youtube.com/embed/Np5MF8Gt5MI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>Please let me know your thoughts about this episode in the comments!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;After a long break, I’ve prepared a video for you! It’s a new episode of the Reactive Programming in Angular video course. This time we w
      
    
    </summary>
    
      <category term="Angular" scheme="https://codewithstyle.info/categories/Angular/"/>
    
      <category term="JavaScript" scheme="https://codewithstyle.info/categories/Angular/JavaScript/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/Angular/JavaScript/Web/"/>
    
    
      <category term="angular" scheme="https://codewithstyle.info/tags/angular/"/>
    
      <category term="video" scheme="https://codewithstyle.info/tags/video/"/>
    
      <category term="rxjs" scheme="https://codewithstyle.info/tags/rxjs/"/>
    
  </entry>
  
  <entry>
    <title>Advanced functional programming in TypeScript: functional exceptions</title>
    <link href="https://codewithstyle.info/advanced-functional-programming-typescript-functional-exceptions/"/>
    <id>https://codewithstyle.info/advanced-functional-programming-typescript-functional-exceptions/</id>
    <published>2018-05-03T14:01:12.000Z</published>
    <updated>2019-12-02T21:26:20.063Z</updated>
    
    <content type="html"><![CDATA[<p>After looking into different ways of implementing <code>Maybe</code> in <a href="https://codewithstyle.info/advanced-functional-programming-in-typescript-maybe-monad/">part 1</a> and <a href="https://codewithstyle.info/advanced-functional-programming-typescript-monads-generators/">part 2</a>, let’s move on to another useful example of monads. In this article, we’ll introduce a new type called <code>Result</code> which is the functional programming’s answer to exceptions. You can find the source code for this article <a href="https://github.com/miloszpp/typescript-monads/tree/part-3-exceptions-and-result/src" target="_blank" rel="noopener">here</a>. </p><h2 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h2><p>Exceptions are a very popular way of handling errors and unexpected situations in code. They are present in mainstream languages such as Java and C# and of course JavaScript. Interestingly, some new programming languages (such as Rust) deliberately didn’t introduce exceptions. Are exceptions <em>compatible</em> with functional programming? Unfortunately, not so much. For example, pure functions shouldn’t have side effects. Throwing an exception is actually kind of side effect - it can lead to termination of the program. Worse than that, exceptions introduce some unpredictability to the code.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y === <span class="number">0</span>) </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Cannot divide by zero'</span>);</span><br><span class="line">    <span class="keyword">return</span> x / y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Although the type signature tells us that <code>divide</code> returns a <code>number</code>, this is not always the case. We have to be very careful and make sure that we remember to handle the error. However, there is nothing in the type system that will make sure that we don’t forget to do that.</p><h2 id="Better-exceptions"><a href="#Better-exceptions" class="headerlink" title="Better exceptions"></a>Better exceptions</h2><p>How can we make it explicit that something can go wrong inside <code>divide</code>? Let’s create a new type <code>Result&lt;TSuccess, TFailure&gt;</code>. Remember how <code>Maybe&lt;T&gt;</code> could either be <code>Some</code> or <code>None</code>? Similarly, <code>Result&lt;TSuccess, TFailure&gt;</code> can either be <code>Success</code> which represents the happy path or <code>Failure</code> which means that something went wrong and <code>TFailure</code> is the type of the error. In other words, instances of our new type can either contain a valid result or an information about what went wrong. In contrast to exceptions, it is now explicit that an error can happen. What’s more, we know exactly what kinds of errors we have to deal with (<code>TFailure</code> tells us so).</p><h2 id="Implementing-Result"><a href="#Implementing-Result" class="headerlink" title="Implementing Result"></a>Implementing <code>Result</code></h2><p>Let’s start with the following definition.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Result&lt;TSuccess, TFailure&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">        <span class="keyword">private</span> value: TSuccess,</span></span><br><span class="line"><span class="params">        <span class="keyword">private</span> errorValue: TFailure</span></span><br><span class="line"><span class="params">    </span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> success&lt;TSuccess, TFailure&gt;(value: TSuccess) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;TSuccess, TFailure&gt;(value, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> failure&lt;TSuccess, TFailure&gt;(errorValue: TFailure) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;TSuccess, TFailure&gt;(<span class="literal">null</span>, errorValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We’ve created a class that can only be constructed in two ways - via <code>success</code> or <code>failure</code> static methods. The class internally stores either a <code>value</code> representing valid result or <code>errorValue</code> containing information about what went wrong. Let’s start with a simple method that extracts a value from <code>Result</code>. Remember that an instance of <code>Result</code> can either be a <code>Success</code> or a <code>Failure</code>. Therefore, when extracting the value we always have to assume that an error could have occurred. We need to provide <code>handleError</code> function which can deal with this error.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span>(handleError: <span class="function">(<span class="params">errorValue: TFailure</span>) =&gt;</span> TSuccess): TSuccess &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.value === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> handleError(<span class="keyword">this</span>.errorValue);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Similarly to <code>Maybe</code>, we need some operations to be able to conveniently work with <code>Result</code> types. Let’s start with <code>map</code>. In the <em>happy</em> scenario, it will take a function that will be applied to the value stored inside <code>Result</code>. However, if <code>Result</code> contains an error, it will simply ignore the provided function and return a <code>failure</code>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">map&lt;R&gt;<span class="function">(<span class="params">f: (<span class="params">wrapped: TSuccess</span>) =&gt; R</span>): <span class="params">Result</span>&lt;<span class="params">R</span>, <span class="params">TFailure</span>&gt; &#123;</span></span><br><span class="line"><span class="function">    <span class="params">if</span> (<span class="params"><span class="keyword">this</span>.value === <span class="literal">null</span></span>) &#123;</span></span><br><span class="line"><span class="function">        <span class="params">return</span> <span class="params">Result</span>.<span class="params">failure</span>&lt;<span class="params">R</span>, <span class="params">TFailure</span>&gt;(<span class="params"><span class="keyword">this</span>.errorValue</span>);</span></span><br><span class="line"><span class="function">    &#125; <span class="params">else</span> &#123;</span></span><br><span class="line"><span class="function">        <span class="params">return</span> <span class="params">Result</span>.<span class="params">success</span>&lt;<span class="params">R</span>, <span class="params">TFailure</span>&gt;(<span class="params">f(<span class="params"><span class="keyword">this</span>.value</span>)</span>);</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>However, it might be the case that the operation that we want to perform on the value stored inside <code>Result</code> returns a <code>Result</code> itself! In such case, we need <code>flatMap</code>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">flatMap&lt;R&gt;<span class="function">(<span class="params">f: (<span class="params">wrapped: TSuccess</span>) =&gt; Result&lt;R, TFailure&gt;</span>): <span class="params">Result</span>&lt;<span class="params">R</span>, <span class="params">TFailure</span>&gt; &#123;</span></span><br><span class="line"><span class="function">    <span class="params">if</span> (<span class="params"><span class="keyword">this</span>.value === <span class="literal">null</span></span>) &#123;</span></span><br><span class="line"><span class="function">        <span class="params">return</span> <span class="params">Result</span>.<span class="params">failure</span>&lt;<span class="params">R</span>, <span class="params">TFailure</span>&gt;(<span class="params"><span class="keyword">this</span>.errorValue</span>);</span></span><br><span class="line"><span class="function">    &#125; <span class="params">else</span> &#123;</span></span><br><span class="line"><span class="function">        <span class="params">return</span> <span class="params">f</span>(<span class="params"><span class="keyword">this</span>.value</span>);</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Result-in-practice"><a href="#Result-in-practice" class="headerlink" title="Result in practice"></a><code>Result</code> in practice</h2><p>Great, we’re now ready to put our new type to work. Let’s adjust the code from the previous posts so that instead of using <code>Maybe</code> to represent potentially empty result, it uses <code>Result</code> to represent the potentially failed result.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">findById(id: <span class="built_in">number</span>): Result&lt;Employee, <span class="built_in">string</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> results = <span class="keyword">this</span>.employees.filter(<span class="function"><span class="params">employee</span> =&gt;</span> employee.id === id);</span><br><span class="line">    <span class="keyword">return</span> results.length </span><br><span class="line">        ? Result.success(results[<span class="number">0</span>]) </span><br><span class="line">        : Result.failure(<span class="string">"Employee does not exist"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We’ve updated the <code>findById</code> method so that it wraps the returned employee inside <code>Result.success</code>, provided that it was available. Otherwise, it returns <code>Result.failure</code> with an error message describing what went wrong. Therefore, <code>TFailure</code> will be a <code>string</code> in our case. Next, let’s update the model. Now <code>Employee.supervisorId</code> is a <code>Result</code> as well! We treat a situation when an employee does not have a supervisor as kind of an <em>error</em>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Employee &#123;</span><br><span class="line">    id: <span class="built_in">number</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    supervisorId: Result&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> employees: Employee[] = [</span><br><span class="line">    &#123; id: <span class="number">1</span>, name: <span class="string">"John"</span>, supervisorId: Result.failure(<span class="string">"No supervisor"</span>) &#125;,</span><br><span class="line">    &#123; id: <span class="number">2</span>, name: <span class="string">"Jane"</span>, supervisorId: Result.success(<span class="number">1</span>) &#125;,</span><br><span class="line">    &#123; id: <span class="number">3</span>, name: <span class="string">"Joe"</span>, supervisorId: Result.success(<span class="number">2</span>) &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>Now we need to make some adjustments to the usages of the above code inside <code>main.ts</code> file. Firstly, let’s change the event listener code to create a <code>Result</code> instance based on the content of the HTML input. Next, the <code>Result</code> is passed to <code>getSupervisorName</code> function which will return a <code>Result</code> as well (as we will see in a moment). Finally, when extracting the value from the <code>Result</code> instance, we provide a callback to handle the potential error.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">findEmployeeButtonEl.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> inputResult: Result&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; = employeeIdInputEl.value </span><br><span class="line">        ? Result.success(employeeIdInputEl.value)</span><br><span class="line">        : Result.failure(<span class="string">"No employee id provided"</span>);</span><br><span class="line">    <span class="keyword">const</span> supervisorNameOrError = getSupervisorName(inputResult)</span><br><span class="line">        .get(<span class="function"><span class="params">error</span> =&gt;</span> <span class="string">`Error occured: <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">    searchResultsEl.innerText = <span class="string">`Supervisor name: <span class="subst">$&#123;supervisorNameOrError&#125;</span>`</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Finally, the <code>getSupervisorName</code> function. And this is the most interesting part of the article because… <strong>the function looks almost exactly the same as in the case of <code>Maybe</code></strong>!</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSupervisorName</span>(<span class="params">enteredIdResult: Result&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;</span>): <span class="title">Result</span>&lt;<span class="title">string</span>, <span class="title">string</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> enteredIdResult</span><br><span class="line">        .flatMap(safeParseInt)</span><br><span class="line">        .flatMap(<span class="function"><span class="params">employeeId</span> =&gt;</span> repository.findById(employeeId))</span><br><span class="line">        .flatMap(<span class="function"><span class="params">employee</span> =&gt;</span> employee.supervisorId)</span><br><span class="line">        .flatMap(<span class="function"><span class="params">supervisorId</span> =&gt;</span> repository.findById(supervisorId))</span><br><span class="line">        .map(<span class="function"><span class="params">supervisor</span> =&gt;</span> supervisor.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safeParseInt</span>(<span class="params">numberString: <span class="built_in">string</span></span>): <span class="title">Result</span>&lt;<span class="title">number</span>, <span class="title">string</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="built_in">parseInt</span>(numberString);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">isNaN</span>(result)</span><br><span class="line">        ? Result.failure(<span class="string">"Invalid number format"</span>) : Result.success(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The only adjustments are type signatures and the <code>safeParseInt</code> function. It turns out that <code>map</code> and <code>flatMap</code> operations are so generic that they can handle two distinct scenarios with the same piece code. I hope you can see the power of monads now! You can now run the program and enjoy nice error messages. Try out different scenarios such as providing non-existent id, id of an employee without a supervisor, non-numeric id, etc.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In this article, we saw how to use monads to replace exceptions with a more functional-friendly approach. Thanks to the <code>Result</code> type, we can make it explicit that a function can fail. What’s more, we force the caller to always assume that something could have gone wrong and provide an error handler. </p><p>Error handling in this example is rather simplified. We use strings to convey the error message. However, there is nothing stopping you from using more advanced types in order to pass more meaningful information. For example, you could use <a href="https://codewithstyle.info/typescript-discriminated-union-types/">discriminated unions</a> to represent different kinds of errors. What do you think about this approach to error handling? Do you think it’s more readable than traditional exceptions? <strong>Share your thoughts in comments</strong>!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;After looking into different ways of implementing &lt;code&gt;Maybe&lt;/code&gt; in &lt;a href=&quot;https://codewithstyle.info/advanced-functional-programmi
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://codewithstyle.info/categories/JavaScript/"/>
    
      <category term="TypeScript" scheme="https://codewithstyle.info/categories/JavaScript/TypeScript/"/>
    
    
      <category term="typescript" scheme="https://codewithstyle.info/tags/typescript/"/>
    
      <category term="functional programming" scheme="https://codewithstyle.info/tags/functional-programming/"/>
    
      <category term="monads" scheme="https://codewithstyle.info/tags/monads/"/>
    
  </entry>
  
  <entry>
    <title>From Options to Observables: a monadic journey</title>
    <link href="https://codewithstyle.info/options-observables-monadic-journey/"/>
    <id>https://codewithstyle.info/options-observables-monadic-journey/</id>
    <published>2018-03-27T13:52:39.000Z</published>
    <updated>2019-12-02T21:26:20.069Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I had a chance to talk about monads at the amazing <a href="https://warsawjs.com/" target="_blank" rel="noopener">WarsawJS Meetup</a>. Below you can find a recording of the session. Slides from the talk are available <a href="https://miloszpp.github.io/warsawjs-slides-monads/" target="_blank" rel="noopener">here</a>. The talk is very much related to some content on the blog. Here is a list of posts about monads in JavaScript/TypeScript:</p><ul><li><a href="https://codewithstyle.info/advanced-functional-programming-in-typescript-maybe-monad/">Part 1: Maybe monad</a></li><li><a href="https://codewithstyle.info/advanced-functional-programming-typescript-monads-generators/">Part 2: Monads and generators</a></li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/r6VTgoWt_OM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>Did you like the talk? Do you think it’s a good way to explain monads? <strong>Let me know in comments below!</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently I had a chance to talk about monads at the amazing &lt;a href=&quot;https://warsawjs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WarsawJS Meetu
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://codewithstyle.info/categories/JavaScript/"/>
    
      <category term="TypeScript" scheme="https://codewithstyle.info/categories/JavaScript/TypeScript/"/>
    
    
      <category term="functional programming" scheme="https://codewithstyle.info/tags/functional-programming/"/>
    
      <category term="video" scheme="https://codewithstyle.info/tags/video/"/>
    
      <category term="talk" scheme="https://codewithstyle.info/tags/talk/"/>
    
      <category term="monads" scheme="https://codewithstyle.info/tags/monads/"/>
    
  </entry>
  
  <entry>
    <title>Advanced functional programming in TypeScript: monads and generators</title>
    <link href="https://codewithstyle.info/advanced-functional-programming-typescript-monads-generators/"/>
    <id>https://codewithstyle.info/advanced-functional-programming-typescript-monads-generators/</id>
    <published>2018-03-19T07:00:27.000Z</published>
    <updated>2019-12-02T21:26:20.063Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to the second post in the series. <a href="https://codewithstyle.info/advanced-functional-programming-in-typescript-maybe-monad">In the first one</a>, you had a chance to build your first monad in TypeScript. In this post, you’ll see how to take advantage of <strong>generators</strong> to make the monadic code more readable.</p><p><strong>You can find all the code from the series in <a href="https://github.com/miloszpp/typescript-monads" target="_blank" rel="noopener">this repository</a>. Check out different branches for code relevant to the specific part of the series.</strong></p><h2 id="Generator-functions"><a href="#Generator-functions" class="headerlink" title="Generator functions"></a>Generator functions</h2><p>Generator functions have been introduced to JavaScript <a href="http://es6-features.org/#GeneratorControlFlow" target="_blank" rel="noopener">as part of the ES6 standard</a>. They are a special case of functions where it’s possible to pause execution in the middle of the function body. This might sound counter-intuitive, especially if you consider the fact that JavaScript is single-threaded and follows the <em>Run-to-completion</em> approach. However, with generators, the code is still executing synchronously. <strong>Pausing execution</strong> means giving the control back to the caller of the function. The caller can then resume execution at any point. Let’s see a simple example:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">numbers</span>(<span class="params"></span>): <span class="title">IterableIterator</span>&lt;<span class="title">number</span>&gt; </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Inside numbers; start'</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Inside numbers; after the first yield'</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Inside numbers; end'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There are two pieces of new syntax here. Firstly, there is a <code>*</code> following the <code>function</code> keyword. It indicates that <code>numbers</code> is not a regular function but a <strong>generator function</strong>. Another new thing is the <code>yield</code> keyword. It’s a bit like <code>return</code> but it can be used multiple times inside the function’s body. By yielding a value, the generator returns a value to the caller. However, unlike <code>return</code>, the caller may decide to resume execution and give control back to the function. When it happens, the execution continues from the latest <code>yield</code>. First, we need to invoke <code>numbers</code> to get a generator instance.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbersGenerator = numbers();</span><br></pre></td></tr></table></figure><p>At this point, not a single line of the <code>numbers</code> function has been executed. For this to happen, we need to call <code>next</code>. It will start executing the function until it encounters the first <code>yield</code>. At this point, the control will be given back to the caller.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'Outside of numbers'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(numbersGenerator.next());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Outside of numbers; after the first next'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(numbersGenerator.next());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Outside of numbers; after the second next'</span>);</span><br></pre></td></tr></table></figure><p>When we run these lines, we will get the following output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Outside of numbers</span><br><span class="line">Inside numbers; start</span><br><span class="line">&#123;value: 1, done: false&#125;</span><br><span class="line">Outside of numbers; after first next</span><br><span class="line">Inside numbers; after the first yield</span><br><span class="line">&#123;value: 2, done: false&#125;</span><br><span class="line">Outside of numbers; after the second next</span><br></pre></td></tr></table></figure><p>As you can see, the execution jumps back and forth between <code>numbers</code> and its caller. Each <code>next</code> call returns an instance of <code>IteratorResult</code> which contains the yielded value and a flag <code>done</code> which is set to <code>false</code> as long as there is more code to execute inside <code>numbers</code>. </p><p><img src="/images/2018/02/Generators.png" alt=""> </p><p>Generators are a very powerful mechanism. One of their uses is building lazy, infinite sequences. Another one is co-routines - a concurrency model where two pieces of code can <em>communicate</em> with each other. </p><h2 id="Maybe-implemented-with-generators"><a href="#Maybe-implemented-with-generators" class="headerlink" title="Maybe implemented with generators"></a>Maybe implemented with generators</h2><p>As a reminder, we implemented the <code>getSupervisorName</code> function in the following way:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSupervisorName</span>(<span class="params">maybeEnteredId: Maybe&lt;<span class="built_in">string</span>&gt;</span>): <span class="title">Maybe</span>&lt;<span class="title">string</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> maybeEnteredId</span><br><span class="line">        .flatMap(<span class="function"><span class="params">employeeIdString</span> =&gt;</span> Maybe.fromValue(<span class="built_in">parseInt</span>(employeeIdString)))</span><br><span class="line">        .flatMap(<span class="function"><span class="params">employeeId</span> =&gt;</span> repository.findById(employeeId))</span><br><span class="line">        .flatMap(<span class="function"><span class="params">employee</span> =&gt;</span> employee.supervisorId)</span><br><span class="line">        .flatMap(<span class="function"><span class="params">supervisorId</span> =&gt;</span> repository.findById(supervisorId))</span><br><span class="line">        .map(<span class="function"><span class="params">supervisor</span> =&gt;</span> supervisor.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Obviously, the code is more readable than the original version which involved three levels of nesting. However, it looks very different from regular, imperative code. Can we make it look more like imperative code? As we know, generators allow us to pause execution of a function so that it can be later resumed. This means that we can <em>inject</em> some code to be executed between <code>yield</code> statements of given function. We could try to write a function that takes a <strong>generator function</strong> (a function with some <code>yield</code> statements) and injects the logic of handling empty results. Let’s start by writing an implementation of <code>getSupervisorName</code> that will use <code>yield</code> statements to handle empty results.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> enteredIdStr = <span class="keyword">yield</span> maybeEnteredId;</span><br><span class="line">    <span class="keyword">const</span> enteredId = <span class="built_in">parseInt</span>(enteredIdStr);</span><br><span class="line">    <span class="keyword">const</span> employee = <span class="keyword">yield</span> repository.findById(enteredId);</span><br><span class="line">    <span class="keyword">const</span> supervisorId = <span class="keyword">yield</span> employee.supervisorId;</span><br><span class="line">    <span class="keyword">const</span> supervisor = <span class="keyword">yield</span> repository.findById(supervisorId);</span><br><span class="line">    <span class="keyword">return</span> Maybe.some(supervisor.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s assume that <code>maybeEnteredId</code> is defined in the function’s clojure and that it’s type is <code>Maybe&lt;string&gt;</code>. Now, the semantics of <code>const enteredIdStr = yield maybeEnteredId</code> is:</p><ul><li>if <code>maybeEnteredId</code> contains a value then assign this value to <code>enteredIdStr</code></li><li>otherwise, the whole function should return <code>None</code></li></ul><p>In other words, <code>yield</code> works exactly like <code>flatMap</code>, but the syntax is very different. It’s much more familiar to an imperative programmer.</p><h2 id="Implementing-run"><a href="#Implementing-run" class="headerlink" title="Implementing run"></a>Implementing <code>run</code></h2><p>This is not over yet. We still need a function that will be able to consume this generator function. In other words, we need something that will give meaning to all these <code>yield</code> statements. We’ll call this function <code>run</code>. It will take a generator function and produce <code>Maybe</code> instance containing the result of the computation. Let’s start with an imperative implementation of <code>run</code>:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> run&lt;R&gt;(gen: IterableIterator&lt;Maybe&lt;R&gt;&gt;): Maybe&lt;R&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> lastValue;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> result: IteratorResult&lt;Maybe&lt;R&gt;&gt; = gen.next(lastValue);</span><br><span class="line">        <span class="keyword">if</span> (result.done || result.value.value === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result.value;</span><br><span class="line">        &#125;</span><br><span class="line">        lastValue = result.value.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>The <code>run</code> function accepts a generator function <code>gen</code>. This function describes our computation.</li><li>We enter an infinite loop and call <code>gen.next(lastValue)</code>. This call will cause control flow to enter <code>gen</code> and execute until the first <code>yield</code> (ignore <code>lastValue</code> for now).</li><li>Once this happens, the control flow returns to <code>run</code>. The value passed to <code>yield</code> is wrapped inside <code>IteratorResult</code> and returned as a value of <code>gen.next</code>,</li><li><code>result</code> has a <code>done</code> flag. It indicates whether control flow inside <code>gen</code> has reached the end of its body (i.e. whether there’s more code to execute).</li><li><code>result.value</code> holds the value returned by <code>yield</code>. It’s an instance of <code>Maybe</code>. Therefore, we check if it’s an empty result (a <code>None</code>). If this is the case, we <code>return</code> a <code>None</code> from the whole computation.</li><li>Otherwise, we <em>unwrap</em> our <code>Maybe</code> and assign the inner value to <code>lastValue</code>.</li><li>The loop repeats. However, this time <code>lastValue</code> is not empty. It will be passed to <code>gen</code> as a result of calling <code>yield</code>.</li></ol><p>There’s quite a lot going on here. A good way to understand this is to think about two pieces of code communicating with each other.</p><ul><li><code>gen</code> <em>sends</em> a <code>Maybe&lt;T&gt;</code> instance to <code>run</code> by calling <code>yield m</code></li><li><code>run</code> <em>replies</em> with an instance of <code>T</code> by calling <code>gen.next(lastValue)</code></li></ul><p>The whole point of this is that we can hide the logic of empty result handling inside <code>run</code>. From the caller’s perspective, it will look like this:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSupervisorName</span>(<span class="params">maybeEnteredId: Maybe&lt;<span class="built_in">string</span>&gt;</span>): <span class="title">Maybe</span>&lt;<span class="title">string</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Maybe.run(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> enteredIdStr = <span class="keyword">yield</span> maybeEnteredId;</span><br><span class="line">        <span class="keyword">const</span> enteredId = <span class="built_in">parseInt</span>(enteredIdStr);</span><br><span class="line">        <span class="keyword">const</span> employee = <span class="keyword">yield</span> repository.findById(enteredId);</span><br><span class="line">        <span class="keyword">const</span> supervisorId = <span class="keyword">yield</span> employee.supervisorId;</span><br><span class="line">        <span class="keyword">const</span> supervisor = <span class="keyword">yield</span> repository.findById(supervisorId);</span><br><span class="line">        <span class="keyword">return</span> Maybe.some(supervisor.name);</span><br><span class="line">    &#125;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>What we’ve achieved is a clean and elegant implementation of <code>getSupervisorName</code> with all the boilerplate hidden in <code>run</code>. However, contrary to the <code>flatMap</code> solution, this code looks more intuitive to an imperative programmer.</p><h2 id="Back-to-monads"><a href="#Back-to-monads" class="headerlink" title="Back to monads"></a>Back to monads</h2><p>That’s nice, you might say, but what does it have to do with monads? We’re not taking advantage of the fact that <code>Maybe</code> is a monad. Let’s fix that. You might’ve noticed some similarity between <code>run</code> implementation and <code>flatMap</code>. Both implementations have to deal with empty results and apply a similar logic: if a <code>Maybe</code> instance is empty then return early with a <code>None</code>. Otherwise, continue the computation with the unwrapped value. It turns out that we can implement <code>run</code> using <code>flatMap</code>!</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> run&lt;R&gt;(gen: IterableIterator&lt;Maybe&lt;R&gt;&gt;): Maybe&lt;R&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params">value?</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> result = gen.next(value);</span><br><span class="line">        <span class="keyword">if</span> (result.done) &#123;</span><br><span class="line">            <span class="keyword">return</span> result.value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.value.flatMap(step);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> step();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This recursive implementation is much more in the spirit of functional programming.</p><ol><li>We define <code>step</code> function which takes an optional <code>value</code> and passes it to <code>gen.next</code>. As we know, this will cause execution to resume inside <code>gen</code>, up to the nearest <code>yield</code>.</li><li>We investigate <code>result.done</code>. If it’s false (there is still some code to execute), we simply call <code>flatMap</code> on <code>result.value</code> and recursively pass <code>step</code> as <em>continuation</em> function. <code>flatMap</code> will take care of an empty result.</li><li>As long as we’re not dealing with a <code>None</code>, the recursive call to <code>step</code> will run <code>gen</code> up until the next <code>yield</code>. And so one, and so one.</li></ol><p>The client code looks exactly the same.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In this post, we’ve looked at how generators can be leveraged to improve the experience of using monads. They make monadic code even cleaner and, what’s important when working in teams, easier to understand to programmers with imperative background (i.e. the vast majority). The idea of using generators in such a way is the basis of the <code>async/await</code> mechanism. As you’ll learn in the future posts, <code>Promise</code> is also a monad and <code>async/await</code> is nothing more than a specialized variant of <code>function*/yield</code>. But let’s not jump ourselves ahead :) Did you find this approach interesting? What is a more readable way to write monadic expressions - with or without generators? <strong>Share your thoughts in comments below!</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to the second post in the series. &lt;a href=&quot;https://codewithstyle.info/advanced-functional-programming-in-typescript-maybe-monad&quot;&gt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://codewithstyle.info/categories/JavaScript/"/>
    
      <category term="TypeScript" scheme="https://codewithstyle.info/categories/JavaScript/TypeScript/"/>
    
    
      <category term="typescript" scheme="https://codewithstyle.info/tags/typescript/"/>
    
      <category term="functional programming" scheme="https://codewithstyle.info/tags/functional-programming/"/>
    
      <category term="monads" scheme="https://codewithstyle.info/tags/monads/"/>
    
      <category term="generators" scheme="https://codewithstyle.info/tags/generators/"/>
    
  </entry>
  
  <entry>
    <title>Free Video Course on Reactive Programming in Angular</title>
    <link href="https://codewithstyle.info/free-video-course-on-reactive-programming-in-angular/"/>
    <id>https://codewithstyle.info/free-video-course-on-reactive-programming-in-angular/</id>
    <published>2018-03-03T10:10:42.000Z</published>
    <updated>2019-12-02T21:26:20.065Z</updated>
    
    <content type="html"><![CDATA[<p>Today I’d like to share with you something that I’ve been working on for some time - the first three episodes of my new <strong>video course</strong>. The course is dedicated to functional-reactive programming in Angular. There is a strong trend of adopting reactive programming in the front-end world. The Angular framework doesn’t stay behind - it’s API is full of <code>Observables</code>.</p><p>However, I’ve noticed that many Angular programmers don’t take advantage of this <em>reactiveness</em> built into Angular. What’s more, there aren’t many examples available on the internet showing how to use reactive programming in Angular in more complex scenarios. </p><p>This is why I decided to create this video course series. I present to you <strong>Reactive Programming in Angular</strong>. The course is available <strong>for free</strong> on <a href="https://www.youtube.com/c/codewithstyleinfo" target="_blank" rel="noopener">my YouTube channel</a>! So far I’ve recorded <strong>three episodes</strong> which you can find below. Subsequent episodes will be published on this blog, so stay tuned!</p><h2 id="Part-1-Introduction"><a href="#Part-1-Introduction" class="headerlink" title="Part 1: Introduction"></a>Part 1: Introduction</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/G_GTbcRvxnM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h2 id="Part-2-AsyncPipe"><a href="#Part-2-AsyncPipe" class="headerlink" title="Part 2: AsyncPipe"></a>Part 2: AsyncPipe</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/EIEOvuybdsc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h2 id="Part-3-Merge-MergeMap-and-Subjects"><a href="#Part-3-Merge-MergeMap-and-Subjects" class="headerlink" title="Part 3: Merge, MergeMap and Subjects"></a>Part 3: Merge, MergeMap and Subjects</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/m3rS6WeyMjM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>If you’re enjoying the course, subscribe to <a href="https://www.youtube.com/channel/UC_DEBDpgRyBZAT85tJ1QZBw" target="_blank" rel="noopener">my YouTube channel</a> and let others know about it! If you have any questions or feedback, feel free to contact me at <a href="mailto:milosz@codewithstyle.info">milosz@codewithstyle.info</a>. What do you think about the course? Did it bring you some value? <strong>Let me know in comments!</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today I’d like to share with you something that I’ve been working on for some time - the first three episodes of my new &lt;strong&gt;video cou
      
    
    </summary>
    
      <category term="Angular" scheme="https://codewithstyle.info/categories/Angular/"/>
    
      <category term="JavaScript" scheme="https://codewithstyle.info/categories/Angular/JavaScript/"/>
    
    
      <category term="angular" scheme="https://codewithstyle.info/tags/angular/"/>
    
      <category term="video" scheme="https://codewithstyle.info/tags/video/"/>
    
      <category term="rxjs" scheme="https://codewithstyle.info/tags/rxjs/"/>
    
  </entry>
  
  <entry>
    <title>Advanced functional programming in TypeScript: Maybe monad</title>
    <link href="https://codewithstyle.info/advanced-functional-programming-in-typescript-maybe-monad/"/>
    <id>https://codewithstyle.info/advanced-functional-programming-in-typescript-maybe-monad/</id>
    <published>2018-02-19T07:00:53.000Z</published>
    <updated>2019-12-02T21:26:20.063Z</updated>
    
    <content type="html"><![CDATA[<p>With this post, I would like to start a short series about <strong>monads</strong>. If you are familiar with some functional programming techniques in JavaScript (such as immutability or pure functions), this is a great next step to go deeper into this amazing paradigm. Regardless of whether you’ve never heard about monads or have heard about them but never really understood them, this series will strive to explain then in simple, practical terms. </p><p>I’ve already tackled this topic on the blog a few times (see <a href="https://codewithstyle.info/understand-monads-linq/">monads in C#</a> and <a href="https://codewithstyle.info/scalas-option-monad-versus-null-conditional-operator-in-c/">monads in Scala</a>) but this time I would like to explore how monads can be useful in the front-end world. One final word - I chose TypeScript over JavaScript because it’s just easier to talk about monads in a strongly-typed language. You don’t have to be a TypeScript expert to understand the article. </p><p><strong>You can find all the code from the series in <a href="https://github.com/miloszpp/typescript-monads" target="_blank" rel="noopener">this repository</a>. Check the commit history for code relevant to the specific part of the series.</strong> </p><p>Let’s get ready for our monadic journey!</p><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>We’re going to build a simple application that implements the following scenario: <em>A company has a hierarchical employee structure (each employee can have another employee as a supervisor). As a user, I would like to be able to enter employee ID (a numeric value) and see their supervisor’s name.</em> Let’s start with a plain, non-monadic implementation. Here is some HTML for the user interface:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Find employee's supervisor<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"employeeId"</span>&gt;</span>Enter employee ID<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"employeeId"</span> <span class="attr">id</span>=<span class="string">"employeeIdInput"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"findEmployeeButton"</span>&gt;</span>Find supervisor's name<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"searchResults"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The HTML consists of an input for the employee’s ID and a button to search for the employee’s supervisor’s name. And here comes the code that orchestrates this form:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; EmployeeRepository &#125; <span class="keyword">from</span> <span class="string">"./employee.repository"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> employeeIdInputEl = <span class="built_in">document</span>.getElementById(<span class="string">"employeeIdInput"</span>) <span class="keyword">as</span> HTMLInputElement;</span><br><span class="line"><span class="keyword">const</span> findEmployeeButtonEl = <span class="built_in">document</span>.getElementById(<span class="string">"findEmployeeButton"</span>);</span><br><span class="line"><span class="keyword">const</span> searchResultsEl = <span class="built_in">document</span>.getElementById(<span class="string">"searchResults"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> repository = <span class="keyword">new</span> EmployeeRepository();</span><br><span class="line"></span><br><span class="line">findEmployeeButtonEl.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> supervisorName = getSupervisorName(employeeIdInputEl.value);</span><br><span class="line">    <span class="keyword">if</span> (supervisorName) &#123;</span><br><span class="line">        searchResultsEl.innerText = <span class="string">`Supervisor name: <span class="subst">$&#123;supervisorName&#125;</span>`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        searchResultsEl.innerText = <span class="string">"Could not find supervisor for given id"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSupervisorName</span>(<span class="params">enteredId: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (enteredId) &#123;</span><br><span class="line">        <span class="keyword">const</span> employee = repository.findById(<span class="built_in">parseInt</span>(enteredId));</span><br><span class="line">        <span class="keyword">if</span> (employee &amp;&amp; employee.supervisorId) &#123;</span><br><span class="line">            <span class="keyword">const</span> supervisor = repository.findById(employee.supervisorId);</span><br><span class="line">            <span class="keyword">if</span> (supervisor) &#123;</span><br><span class="line">                <span class="keyword">return</span> supervisor.name;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Firstly, we get hold of some HTML elements. Next, we attach a click handler to the button. Inside the handler, we invoke the <code>getSupervisorName</code> function which holds all of the actual logic (we will get back to it soon). Finally, we update the <code>p</code> tag with search results. Finally, let’s have a quick look at the <code>EmployeeRepository</code> class:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Employee &#125; <span class="keyword">from</span> <span class="string">"./employee.model"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> EmployeeRepository &#123;</span><br><span class="line">    <span class="keyword">private</span> employees: Employee[] = [</span><br><span class="line">        &#123; id: <span class="number">1</span>, name: <span class="string">"John"</span> &#125;,</span><br><span class="line">        &#123; id: <span class="number">2</span>, name: <span class="string">"Jane"</span>, supervisorId: <span class="number">1</span> &#125;,</span><br><span class="line">        &#123; id: <span class="number">3</span>, name: <span class="string">"Joe"</span>, supervisorId: <span class="number">2</span> &#125;,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    findById(id: <span class="built_in">number</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> results = <span class="keyword">this</span>.employees.filter(<span class="function"><span class="params">employee</span> =&gt;</span> employee.id === id);</span><br><span class="line">        <span class="keyword">return</span> results.length ? results[<span class="number">0</span>] : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It’s just an in-memory storage of the employee hierarchy with some hardcoded values. The <code>Employee</code> interface could look like this:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Employee &#123;</span><br><span class="line">    id: <span class="built_in">number</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    supervisorId?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nesting-nesting-nesting"><a href="#Nesting-nesting-nesting" class="headerlink" title="Nesting, nesting, nesting"></a>Nesting, nesting, nesting</h2><p>As promised, let’s focus on the <code>getSupervisorName</code> function.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSupervisorName</span>(<span class="params">enteredId: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (enteredId) &#123;</span><br><span class="line">        <span class="keyword">const</span> employee = repository.findById(<span class="built_in">parseInt</span>(enteredId));</span><br><span class="line">        <span class="keyword">if</span> (employee &amp;&amp; employee.supervisorId) &#123;</span><br><span class="line">            <span class="keyword">const</span> supervisor = repository.findById(employee.supervisorId);</span><br><span class="line">            <span class="keyword">if</span> (supervisor) &#123;</span><br><span class="line">                <span class="keyword">return</span> supervisor.name;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As we can see, the function body involves several levels of nesting. This is because many things can go wrong during the search for the supervisor.</p><ul><li>the user can click the button without typing anything in the ID field</li><li>there can be no employee for given ID</li><li>the employee we’re looking for can have no supervisor (e.g. they’re a CEO or an independent consultant)</li><li>there can be no employee with ID equal to the employee’s supervisor’s ID (inconsistency in the hierarchy)</li></ul><p>In other words, there are many operations involved and each of them can return an <strong>empty result</strong> (e.g. <strong>empty</strong> input field, <strong>empty</strong> search result, etc.). The function needs to handle all of these edge cases and hence the deep nesting of <code>if</code> statements. Is there anything wrong with it? I think yes:</p><ul><li>when writing such code, it’s easy to miss some of the edge cases and the compiler won’t stop us from doing so</li><li>such code is not very readable</li></ul><p>Let’s see how to solve both of these problems.</p><h2 id="Introducing-Maybe"><a href="#Introducing-Maybe" class="headerlink" title="Introducing Maybe"></a>Introducing <code>Maybe</code></h2><p>One way of simplifying code is to identify a pattern and create an abstraction that hides the implementation details of this pattern. The recurring theme in the <code>getSupervisorName</code> function is the nesting of <code>if</code> statements.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (result) &#123;</span><br><span class="line">  <span class="keyword">const</span> nextResult = operation(result);</span><br><span class="line">  <span class="keyword">if</span> (nextResult) &#123;</span><br><span class="line">     <span class="comment">// and so on...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="comment">// else stop</span></span><br></pre></td></tr></table></figure><p>But how to create an abstraction over such a pattern? The reason we have to do these <code>if</code> checks is that the value stored inside <code>result</code> can be empty. We’ll create a simple wrapper type that holds a simple value and is aware of whether the value is empty (ie. <code>null</code> or <code>undefined</code> or empty string) or not. Let’s call this wrapper type <code>Maybe</code>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Maybe&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> value: T | <span class="literal">null</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> some&lt;T&gt;(value: T) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">"Provided value must not be empty"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Maybe(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> none&lt;T&gt;() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Maybe&lt;T&gt;(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> fromValue&lt;T&gt;(value: T) &#123;</span><br><span class="line">        <span class="keyword">return</span> value ? Maybe.some(value) : Maybe.none&lt;T&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getOrElse(defaultValue: T) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value === <span class="literal">null</span> ? defaultValue : <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Instances of <code>Maybe</code> hold a <code>value</code> that can either be an actual value or <code>null</code>. Here, <code>null</code> is the internal representation of an empty value. The constructor is private so you can only create <code>Maybe</code> instances by calling <code>some</code> or <code>none</code> static methods. <code>fromValue</code> is a convenience method that transforms a regular value to a <code>Maybe</code> instance. Finally, <code>getOrElse</code> is a safe way of extracting the value contained by <code>Maybe</code>. The caller has to provide the default value that will be used in case <code>Maybe</code> is empty. So far, so good. We can now explicitly say that the result returned by some method can be empty. Let’s change the <code>findById</code> method on <code>EmployeeRepository</code>:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">findById(id: <span class="built_in">number</span>): Maybe&lt;Employee&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> results = <span class="keyword">this</span>.employees.filter(<span class="function"><span class="params">employee</span> =&gt;</span> employee.id === id);</span><br><span class="line">    <span class="keyword">return</span> results.length ? Maybe.some(results[<span class="number">0</span>]) : Maybe.none();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note that the return type of <code>findById</code> is now more meaningful and better captures the programmer’s intention. <code>findById</code> can indeed return an empty value if an employee with given ID doesn’t exist inside the repository. What’s more, we can change the <code>Employee</code> interface to explicitly state the fact that <code>supervisorId</code> can be empty:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Employee &#123;</span><br><span class="line">    id: <span class="built_in">number</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    supervisorId: Maybe&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We’ll now add some operations to make <code>Maybe</code> type more useful. You know the <code>map</code> method that you can call on arrays, right? It applies a given function to every element of an array. If we look at <code>Maybe</code> as at a special array that can have from zero to one elements, it turns out that defining <code>map</code> on it totally makes sense.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">map&lt;R&gt;<span class="function">(<span class="params">f: (<span class="params">wrapped: T</span>) =&gt; R</span>): <span class="params">Maybe</span>&lt;<span class="params">R</span>&gt; &#123;</span></span><br><span class="line"><span class="function">    <span class="params">if</span> (<span class="params"><span class="keyword">this</span>.value === <span class="literal">null</span></span>) &#123;</span></span><br><span class="line"><span class="function">        <span class="params">return</span> <span class="params">Maybe</span>.<span class="params">none</span>&lt;<span class="params">R</span>&gt;<span class="params">()</span>;</span></span><br><span class="line"><span class="function">    &#125; <span class="params">else</span> &#123;</span></span><br><span class="line"><span class="function">        <span class="params">return</span> <span class="params">Maybe</span>.<span class="params">fromValue</span>(<span class="params">f(<span class="params"><span class="keyword">this</span>.value</span>)</span>);</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>Our <code>map</code> takes a function <code>f</code> that transforms the element wrapped by <code>Maybe</code> and returns a new <code>Maybe</code> with the result of the transformation. If <code>Maybe</code> was a <code>none</code> then the result of <code>map</code> will also be an empty <code>Maybe</code> (just like calling <code>map</code> on an empty array would give you an empty array). <code>R</code> is the type parameter representing the type returned by <code>f</code> transformation. But how is this <code>map</code> useful? The original version of the <code>getSupervisorName</code> function included the below <code>if</code> statement:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> supervisor = repository.findById(employee.supervisorId);</span><br><span class="line"><span class="keyword">if</span> (supervisor) &#123;</span><br><span class="line">    <span class="keyword">return</span> supervisor.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But <code>findById</code> returns a <code>Maybe</code> now! And we have the <code>map</code> operation available which, accidentally, has exactly the same semantics as the <code>if</code> statement above! Therefore, we can rewrite the above piece like this:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> supervisor: Maybe&lt;Employee&gt; = repository.findById(employee.supervisorId);</span><br><span class="line"><span class="keyword">return</span> supervisor.map(<span class="function"><span class="params">s</span> =&gt;</span> s.name);</span><br></pre></td></tr></table></figure><p>Didn’t we just hide the <code>if</code> statement behind an abstraction? Yes, we did! However, we’re not ready to rewrite the whole function in such style yet.</p><h2 id="Maybe-map-or-maybe-flatMap"><a href="#Maybe-map-or-maybe-flatMap" class="headerlink" title="Maybe map, or maybe flatMap?"></a>Maybe <code>map</code>, or maybe <code>flatMap</code>?</h2><p>Using <code>map</code> works fine for transformations such as above. But how about this one?</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> employee = repository.findById(<span class="built_in">parseInt</span>(enteredId));</span><br><span class="line"><span class="keyword">if</span> (employee &amp;&amp; employee.supervisorId) &#123;</span><br><span class="line">    <span class="keyword">const</span> supervisor = repository.findById(employee.supervisorId);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We could try to rewrite it using <code>map</code>:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> employee: Maybe&lt;Employee&gt; = repository.findById(<span class="built_in">parseInt</span>(enteredId));</span><br><span class="line"><span class="keyword">const</span> supervisor: Maybe&lt;Maybe&lt;Employee&gt;&gt; = employee.map(<span class="function"><span class="params">e</span> =&gt;</span> repository.findById(e.supervisorId));</span><br></pre></td></tr></table></figure><p>See the problem? The type of <code>supervisor</code> is <code>Maybe&lt;Maybe&lt;Employee&gt;&gt;</code>. This is because our transformation function now maps from a regular value to a <code>Maybe</code> (and previously it was mapping from regular value to a regular value). Is there a way to transform <code>Maybe&lt;Maybe&lt;Employee&gt;&gt;</code> to a simple <code>Maybe&lt;Employee&gt;</code>? In other words, we would like to <strong>flatten</strong> our <code>Maybe</code>. Again, there is an analogy to arrays. You can flatten nested array <code>[[1, 2, 3], [4, 5, 6]]</code> to <code>[1, 2, 3, 4, 5, 6]</code>. We’ll add a new operation to <code>Maybe</code> and call it <code>flatMap</code>. It’s just like <code>map</code> but it also flattens the result so that we don’t end up with nested <code>Maybe</code>s.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">flatMap&lt;R&gt;<span class="function">(<span class="params">f: (<span class="params">wrapped: T</span>) =&gt; Maybe&lt;R&gt;</span>): <span class="params">Maybe</span>&lt;<span class="params">R</span>&gt; &#123;</span></span><br><span class="line"><span class="function">    <span class="params">if</span> (<span class="params"><span class="keyword">this</span>.value === <span class="literal">null</span></span>) &#123;</span></span><br><span class="line"><span class="function">        <span class="params">return</span> <span class="params">Maybe</span>.<span class="params">none</span>&lt;<span class="params">R</span>&gt;<span class="params">()</span>;</span></span><br><span class="line"><span class="function">    &#125; <span class="params">else</span> &#123;</span></span><br><span class="line"><span class="function">        <span class="params">return</span> <span class="params">f</span>(<span class="params"><span class="keyword">this</span>.value</span>);</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>The implementation is pretty simple. If given instance of <code>Maybe</code> is not empty then we extract the wrapped value, apply the provided function and simply return the result (which can either be empty or not empty). If the instance was empty, we simply return an empty <code>Maybe</code>. Note the type signature of <code>f</code>. Previously, it was mapping from <code>T</code> to <code>R</code>. Now, it’s mapping from <code>T</code> to <code>Maybe&lt;R&gt;</code>. Thanks to the addition of <code>flatMap</code>, we can now rewrite the above code piece like this:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> employee: Maybe&lt;Employee&gt; = repository.findById(<span class="built_in">parseInt</span>(enteredId));</span><br><span class="line"><span class="keyword">const</span> supervisor: Maybe&lt;Employee&gt; = employee.flatMap(<span class="function"><span class="params">e</span> =&gt;</span> repository.findById(e.supervisorId));</span><br></pre></td></tr></table></figure><h2 id="Maybe-Monad-in-action"><a href="#Maybe-Monad-in-action" class="headerlink" title="Maybe Monad in action"></a>Maybe Monad in action</h2><p>Now, we’ve got all we need to rewrite the <code>getSupervisorName</code> function.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSupervisorName</span>(<span class="params">maybeEnteredId: Maybe&lt;<span class="built_in">string</span>&gt;</span>): <span class="title">Maybe</span>&lt;<span class="title">string</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> maybeEnteredId</span><br><span class="line">        .flatMap(<span class="function"><span class="params">employeeIdString</span> =&gt;</span> Maybe.fromValue(<span class="built_in">parseInt</span>(employeeIdString))) <span class="comment">// parseInt can fail</span></span><br><span class="line">        .flatMap(<span class="function"><span class="params">employeeId</span> =&gt;</span> repository.findById(employeeId))</span><br><span class="line">        .flatMap(<span class="function"><span class="params">employee</span> =&gt;</span> employee.supervisorId)</span><br><span class="line">        .flatMap(<span class="function"><span class="params">supervisorId</span> =&gt;</span> repository.findById(supervisorId))</span><br><span class="line">        .map(<span class="function"><span class="params">supervisor</span> =&gt;</span> supervisor.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We’ve eliminated all of the nested <code>if</code> statements! The <code>getSupervisorName</code> function’s body is now an elegant pipeline of transformations applied to the input value. We’ve hidden the details of handling empty results because they’re just boilerplate and obfuscate the real intention of the code. They’re now taken care of by <code>Maybe</code>. Note that if any of the operations inside <code>flatMap</code> returned a <code>none</code>, it would cause the whole thing to immediately return a <code>none</code>. This is actually the same behaviour that we had with nested <code>if</code> statements. Here is an example of how the function can be used inside the click handler:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">findEmployeeButtonEl.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> supervisorName = getSupervisorName(Maybe.fromValue(employeeIdInputEl.value));</span><br><span class="line">    searchResultsEl.innerText = <span class="string">`Supervisor name: <span class="subst">$&#123;supervisorName.getOrElse("could not find")&#125;</span>`</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>And, guess what, <code>Maybe</code> is a <strong>monad</strong>! The formal definition of a monad is that it’s a container type that has two operations:</p><ul><li><code>return</code> - which creates an instance of the type from a regular value (<code>some</code> and <code>none</code> in our case)</li><li><code>bind</code> - which lets you combine monadic values (<code>flatMap</code> in our case)</li></ul><p>There are also some monadic laws that every monad has to follow but let’s not dive into it yet. For now, you have to trust me that our <code>Maybe</code> implementation follows these laws :)</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In this first post of the series, we’ve created our first monad. The purpose of the <code>Maybe</code> monad is to abstract away handling of empty values. Thanks to the introduction of this type, we can now write code without having to worry about empty results. In the next article, we’ll see how thanks to TypeScript we can write code that uses monads in an even more readable way. Do you find monads interesting? Do you feel like you understand the concept now or is it still a mystery? <strong>Please let me know in comments!</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;With this post, I would like to start a short series about &lt;strong&gt;monads&lt;/strong&gt;. If you are familiar with some functional programming 
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://codewithstyle.info/categories/JavaScript/"/>
    
      <category term="TypeScript" scheme="https://codewithstyle.info/categories/JavaScript/TypeScript/"/>
    
    
      <category term="typescript" scheme="https://codewithstyle.info/tags/typescript/"/>
    
      <category term="functional programming" scheme="https://codewithstyle.info/tags/functional-programming/"/>
    
      <category term="monads" scheme="https://codewithstyle.info/tags/monads/"/>
    
  </entry>
  
  <entry>
    <title>Creating Angular NPM packages with ng-packagr</title>
    <link href="https://codewithstyle.info/creating-angular-npm-packages-with-ng-packagr/"/>
    <id>https://codewithstyle.info/creating-angular-npm-packages-with-ng-packagr/</id>
    <published>2018-01-25T21:03:28.000Z</published>
    <updated>2019-12-02T21:26:20.065Z</updated>
    
    <content type="html"><![CDATA[<p>In this short post, I would like to share some of the experiences I’ve had when creating an NPM Angular package using <code>ng-packagr</code>.</p><h2 id="Angular-Package-Format-and-ng-packagr"><a href="#Angular-Package-Format-and-ng-packagr" class="headerlink" title="Angular Package Format and ng-packagr"></a>Angular Package Format and <code>ng-packagr</code></h2><p>First of all, when creating an Angular library, it’s important to understand that you need to include a bit more than just plain TypeScript files inside the NPM package. It should contain JavaScript code that is ready to be consumed in various ways - e.g. by Webpack, Rollup or Angular CLI. There are some best-practices describing what to include in an Angular NPM package - it’s called <a href="https://docs.google.com/document/d/1CZC2rcpxffTDfRDs6p1cfbmKNLA6x5O-NtkJglDaBVs/preview" target="_blank" rel="noopener">Angular Package Format</a>. It’s actually not trivial to produce a package that complies with the standard. Fortunately, we can use the excellent <a href="https://www.npmjs.com/package/ng-packagr" target="_blank" rel="noopener">ng-packagr</a> tool for that. The documentation for the package is pretty good and it’s actually quite easy to get going with it.</p><h2 id="AOT-metadata-generation-issue"><a href="#AOT-metadata-generation-issue" class="headerlink" title="AOT metadata generation issue"></a>AOT metadata generation issue</h2><p>It worked pretty well for me too, except for two issues on which I’ve spent too much time. Both of them only manifested themselves when I tried to build the consuming project (the project to which my new common package is a dependency) using Angular Ahead of Time compilation (AOT). When trying to build my consumer project I’ve got the following error:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR in Error: Unexpected value &apos;SomeModuleName in ...........path-to-module.d.ts&apos; imported by the module &apos;AppModule in ...............path-to-module.ts&apos;. Please add a @NgModule annotation.</span><br></pre></td></tr></table></figure><p>After some digging, I’ve found out that the root cause was that when building my package I wasn’t generating appropriate metadata to be further used by the AOT compiler. This should be normally done by <code>ng-packagr</code>. It turned out that the tool could not generate the metadata properly because I was using invalid paths inside the <code>public_api.ts</code> file. Inside my package, I was making heavy use of <code>index.ts</code> files where I re-exported all the relevant symbols from the module. The file structure looked like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+ src</span><br><span class="line">|--+ module1</span><br><span class="line">|  |-- module1.module.ts</span><br><span class="line">|  |-- index.ts</span><br><span class="line">|  + module2</span><br><span class="line">|  |-- module2.module.ts</span><br><span class="line">|  └-- index.ts</span><br><span class="line">└ public_api.ts</span><br></pre></td></tr></table></figure><p>And the <code>public_api.ts</code> was referencing the modules like this:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">from</span> <span class="string">'./src/module1'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">from</span> <span class="string">'./src/module2'</span>;</span><br></pre></td></tr></table></figure><p>It turns out that this is not enough to generate the metadata properly. I had to change the imports to include <code>index</code>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">from</span> <span class="string">'./src/module1/index'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">from</span> <span class="string">'./src/module2/index'</span>;</span><br></pre></td></tr></table></figure><p>After this change, the AOT compilation started to work properly. The only place where I could find this information was a comment by <strong>JoeQueR</strong> on <a href="https://github.com/dherges/ng-packagr/issues/355" target="_blank" rel="noopener">GitHub</a>. Thanks, <a href="https://github.com/JoeQueR" target="_blank" rel="noopener">JoeQueR</a>!</p><h2 id="Module’s-forRoot-and-AOT"><a href="#Module’s-forRoot-and-AOT" class="headerlink" title="Module’s forRoot and AOT"></a>Module’s <code>forRoot</code> and AOT</h2><p>Another problem I had isn’t that much related to <code>ng-packagr</code> itself but rather to the <code>NgModule.forRoot</code> convention. <code>forRoot</code> is a static method which allows isolating services provided by given module so that they are only provided once. The <code>forRoot</code> method should be only invoked when importing the module in the <code>app</code> module or in the <code>core</code> module. This approach helps you avoid issues with lazy loading. In my common package, I’ve implemented a <code>forRoot</code> method which conditionally provided some additional services based on an argument passed to the method. It looked a bit like below:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> SomeModule &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> forRoot(includeSomeService: <span class="built_in">boolean</span>): ModuleWithProviders &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ngModule: ModalModule, </span><br><span class="line">      providers: [</span><br><span class="line">        Service1, </span><br><span class="line">        ...(includeSomeService ? [ Service2 ] : [])</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It turns out that you cannot do this! All the providers should be included in generated metadata and in this case, the final provider list will only be known at runtime so it’s not possible to figure it out during compile time. Therefore, it’s not possible to implement such scenario. The <code>providers</code> array has to be determined statically.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this short post, I would like to share some of the experiences I’ve had when creating an NPM Angular package using &lt;code&gt;ng-packagr&lt;/c
      
    
    </summary>
    
      <category term="Angular" scheme="https://codewithstyle.info/categories/Angular/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/Angular/Web/"/>
    
    
      <category term="angular" scheme="https://codewithstyle.info/tags/angular/"/>
    
      <category term="npm" scheme="https://codewithstyle.info/tags/npm/"/>
    
      <category term="ng-packagr" scheme="https://codewithstyle.info/tags/ng-packagr/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript: Building an interpreter with discriminated unions</title>
    <link href="https://codewithstyle.info/building-an-interpreter-with-discriminated-unions/"/>
    <id>https://codewithstyle.info/building-an-interpreter-with-discriminated-unions/</id>
    <published>2018-01-17T07:00:13.000Z</published>
    <updated>2019-12-02T21:26:20.064Z</updated>
    
    <content type="html"><![CDATA[<p>In the <a href="https://codewithstyle.info/typescript-discriminated-union-types">previous post</a> I’ve explained what <strong>discriminated unions</strong> are in the TypeScript language. We’ll now look into a classic example of how this concept can be applied to a real-world scenario - building an interpreter.</p><h2 id="Abstract-Syntax-Tree"><a href="#Abstract-Syntax-Tree" class="headerlink" title="Abstract Syntax Tree"></a>Abstract Syntax Tree</h2><p>By <em>interpreter</em> I mean a program that can execute source code of another program written in a different programming language. For example, JavaScript, PHP or Python are interpreted languages - you need an interpreter to run them. We will look into building an interpreter for a very simple <em>language</em> - algebraic expressions, such as:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-5 * (1 + (3 / 6))</span><br></pre></td></tr></table></figure><p>When building an interpreter (or a compiler) you need to build some data structures that represent the source code. These data structures form something called <strong>Abstract Syntax Tree</strong> (AST). It’s a tree-like structure because the source code usually involves lots of nesting. The AST of our example algebraic expression would look like this: </p><p><img src="/images/2018/01/AST.png" alt=""> </p><p>You can see that the tree structure corresponds to the order in which mathematical operations are applied. For example, <code>3 / 6</code> should be calculated first and that’s why it’s low in the tree. The multiplication will be evaluated at the very end and hence it’s the tree’s root. Discriminated unions are perfect for representing such a tree. Our AST has different kinds of nodes:</p><ul><li>binary operators - addition, subtraction, multiplication and division</li><li>unary operators - negation</li><li>numerical values</li></ul><p>Let’s create some types that correspond to these kinds.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> BinaryOperatorNode &#123;</span><br><span class="line">    kind: <span class="string">"BinaryOperator"</span>;</span><br><span class="line">    left: ExpressionNode;</span><br><span class="line">    right: ExpressionNode;</span><br><span class="line">    operator: <span class="string">"+"</span> | <span class="string">"*"</span> | <span class="string">"-"</span> | <span class="string">"/"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> UnaryOperatorNode &#123;</span><br><span class="line">    kind: <span class="string">"UnaryOperator"</span>,</span><br><span class="line">    operator: <span class="string">"+"</span> | <span class="string">"-"</span>;</span><br><span class="line">    inner: ExpressionNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> NumberNode &#123;</span><br><span class="line">    kind: <span class="string">"Number"</span>;</span><br><span class="line">    value: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ExpressionNode = BinaryOperatorNode | UnaryOperatorNode | NumberNode;</span><br></pre></td></tr></table></figure><p>We’ve created the <code>ExpressionNode</code> discriminated union. It’s a union of three node kinds:</p><ul><li><code>NumberNode</code> is the simplest type - it contains a numerical value</li><li><code>BinaryOperatorNode</code> represents an operation on two expressions; the <code>operator</code> field determines what kind of operations it is; <code>left</code> and <code>right</code> fields contain arguments of the operation</li><li><code>UnaryOperatorNode</code> is like <code>BinaryOperatorNode</code> but only contains a single argument</li></ul><p>Interestingly, these types are <em>recursive</em> in a way. For example, <code>UnaryOperatorNode</code> has <code>inner</code> property which can be any <code>ExpressionNode</code> - indeed, we can negate a number, but also a much more complex expression wrapped in parenthesis.</p><h2 id="Evaluating-the-AST"><a href="#Evaluating-the-AST" class="headerlink" title="Evaluating the AST"></a>Evaluating the AST</h2><p>Now we have data structures in place there are only two questions left:</p><ul><li>How to create an AST from the source code? This is actually a task for a <strong>parser</strong>. Parsers are beyond the scope of this article. Interestingly, you can <strong>generate</strong> a parser using <a href="https://github.com/zaach/jison" target="_blank" rel="noopener">Jison</a> or some other tool.</li><li>How to evaluate the AST? Let’s look into this.</li></ul><p>We’ve already seen how to consume discriminated unions with a <code>switch</code> statement. This is no different here with the exception that since our types are recursive, the evaluation function will be recursive as well.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">evaluate</span>(<span class="params">expression: ExpressionNode</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (expression.kind) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"Number"</span>: </span><br><span class="line">            <span class="keyword">return</span> expression.value</span><br></pre></td></tr></table></figure><p>The <code>evaluate</code> function takes an <code>ExpressionNode</code> object and evaluates it to a number. First, we check for an instance of <code>NumberNode</code> in which case the expression will simply evaluate to the value held by the object.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"UnaryOperator"</span>:</span><br><span class="line">    <span class="keyword">const</span> innerValue = evaluate(expression.inner);</span><br><span class="line">    <span class="keyword">return</span> expression.operator === <span class="string">"+"</span> ? innerValue : -innerValue;</span><br></pre></td></tr></table></figure><p>For <code>UnaryOperatorNode</code> we need to evaluate the value of the nested expression first. That’s why we make a recursive call to <code>evaluate</code> itself. Once this is done we either negate or simply return it as it is.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">case</span> <span class="string">"BinaryOperator"</span>:</span><br><span class="line">            <span class="keyword">const</span> leftValue = evaluate(expression.left);</span><br><span class="line">            <span class="keyword">const</span> rightValue = evaluate(expression.right);</span><br><span class="line">            <span class="keyword">switch</span> (expression.operator) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"+"</span>: <span class="keyword">return</span> leftValue + rightValue;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"-"</span>: <span class="keyword">return</span> leftValue - rightValue;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"*"</span>: <span class="keyword">return</span> leftValue * rightValue;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"/"</span>: <span class="keyword">return</span> leftValue / rightValue;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>BinaryOperatorNode</code> has two nested expression - <code>left</code> and <code>right</code> - so we need to evaluate both of them. Next, we use the relevant mathematical operation on them to calculate the final value. Here is the full source code of the <code>evaluate</code> function:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">evaluate</span>(<span class="params">expression: ExpressionNode</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (expression.kind) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"Number"</span>: </span><br><span class="line">            <span class="keyword">return</span> expression.value</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"UnaryOperator"</span>:</span><br><span class="line">            <span class="keyword">const</span> innerValue = evaluate(expression.inner);</span><br><span class="line">            <span class="keyword">return</span> expression.operator === <span class="string">"+"</span> ? innerValue : -innerValue;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"BinaryOperator"</span>:</span><br><span class="line">            <span class="keyword">const</span> leftValue = evaluate(expression.left);</span><br><span class="line">            <span class="keyword">const</span> rightValue = evaluate(expression.right);</span><br><span class="line">            <span class="keyword">switch</span> (expression.operator) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"+"</span>: <span class="keyword">return</span> leftValue + rightValue;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"-"</span>: <span class="keyword">return</span> leftValue - rightValue;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"*"</span>: <span class="keyword">return</span> leftValue * rightValue;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"/"</span>: <span class="keyword">return</span> leftValue / rightValue;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Finally, we need an object instance for testing. Here is the <code>(42 + 5) * -12</code> expression represented as an AST:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> expr1: ExpressionNode = &#123;</span><br><span class="line">    kind: <span class="string">"BinaryOperator"</span>,</span><br><span class="line">    operator: <span class="string">"*"</span>,</span><br><span class="line">    left: &#123;</span><br><span class="line">        kind: <span class="string">"BinaryOperator"</span>,</span><br><span class="line">        operator: <span class="string">"+"</span>,</span><br><span class="line">        left: &#123;</span><br><span class="line">            kind: <span class="string">"Number"</span>,</span><br><span class="line">            value: <span class="number">42</span></span><br><span class="line">        &#125;,</span><br><span class="line">        right: &#123;</span><br><span class="line">            kind: <span class="string">"Number"</span>,</span><br><span class="line">            value: <span class="number">5</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    right: &#123;</span><br><span class="line">        kind: <span class="string">"UnaryOperator"</span>,</span><br><span class="line">        operator: <span class="string">"-"</span>,</span><br><span class="line">        inner: &#123;</span><br><span class="line">            kind: <span class="string">"Number"</span>,</span><br><span class="line">            value: <span class="number">12</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Now we can test our <code>evaluate</code> function:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(evaluate(expr1));</span><br></pre></td></tr></table></figure><p>Voila, we’ve just finished our first interpreter written in TypeScript using discriminated unions.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In this article, we’ve looked into taking advantage of discriminated unions in a non-trivial, real-world scenario - implementing a language interpreter. It’s easy to imagine how the types used to build an AST can be much more complex. For a real programming language, we would have to create types for statements, method calls, function declarations, etc. However, the principle would be roughly the same.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In the &lt;a href=&quot;https://codewithstyle.info/typescript-discriminated-union-types&quot;&gt;previous post&lt;/a&gt; I’ve explained what &lt;strong&gt;discrimina
      
    
    </summary>
    
      <category term="TypeScript" scheme="https://codewithstyle.info/categories/TypeScript/"/>
    
    
      <category term="typescript" scheme="https://codewithstyle.info/tags/typescript/"/>
    
      <category term="algebraic data types" scheme="https://codewithstyle.info/tags/algebraic-data-types/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript: Precise domain modeling with discriminated unions</title>
    <link href="https://codewithstyle.info/typescript-discriminated-union-types/"/>
    <id>https://codewithstyle.info/typescript-discriminated-union-types/</id>
    <published>2018-01-08T07:00:44.000Z</published>
    <updated>2019-12-02T21:26:20.071Z</updated>
    
    <content type="html"><![CDATA[<p>In this post, we’re going to look into an interesting feature of the TypeScript language. It’s called <strong>discriminated unions</strong> and is also known as <strong>algebraic data types</strong>. The latter name comes from Functional Programming paradigm where such types are used very heavily.</p><h2 id="Issues-with-enum-types"><a href="#Issues-with-enum-types" class="headerlink" title="Issues with enum types"></a>Issues with enum types</h2><p>Let me start by showing you an example of a problem that can be solved with discriminated unions. You’re working on an application which deals with the management of customers. There are two kinds of customers: individual and institutional. For each customer kind, you store different details: individual customers have a first and last name and a social security number. Companies have a company name and a tax identifier. You could model the above situation with the following types:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> CustomerType &#123;</span><br><span class="line">    Individual,</span><br><span class="line">    Institution</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Customer &#123;</span><br><span class="line">    acquisitionDate: <span class="built_in">Date</span>;</span><br><span class="line">    <span class="keyword">type</span>: CustomerType;</span><br><span class="line">    firstName?: <span class="built_in">string</span>;</span><br><span class="line">    lastName?: <span class="built_in">string</span>;</span><br><span class="line">    socialSecurityNumber?: <span class="built_in">string</span>;</span><br><span class="line">    companyName?: <span class="built_in">string</span>;</span><br><span class="line">    companyTaxId?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Unfortunately, you have to make most of the fields optional. If you didn’t, you would have to fill in all of the fields when creating an instance of <code>Customer</code>. However, you don’t want to fill <code>companyTaxId</code> when creating an <code>Individual</code> customer. The problem with this solution is that it’s now possible to create instances that don’t make any sense in terms of business domain. For example, you can create an object with too little info:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> customer1: Customer = &#123; </span><br><span class="line">    acquisitionDate: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2016</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">    <span class="keyword">type</span>: CustomerType.Individual</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>…or one that has too much data provided:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> customer2: Customer = &#123; </span><br><span class="line">    acquisitionDate: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2016</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">    <span class="keyword">type</span>: CustomerType.Individual,</span><br><span class="line">    firstName: <span class="string">"John"</span>,</span><br><span class="line">    lastName: <span class="string">"Green"</span>,</span><br><span class="line">    companyName: <span class="string">"Acme"</span>,</span><br><span class="line">    companyTaxId: <span class="number">9243546</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Wouldn’t it be nice if the type system could help us prevent such situations? Actually, this is what TypeScript is supposed to do, right?</p><h2 id="Discriminated-unions-to-the-rescue"><a href="#Discriminated-unions-to-the-rescue" class="headerlink" title="Discriminated unions to the rescue"></a>Discriminated unions to the rescue</h2><p>With discriminated unions, you can model your domain with more precision. They are kind of like enum types but can hold additional data as well. Therefore, you can enforce that a specific customer type must have an exact set of fields. Let’s see it in action.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IndividualCustomerType &#123;</span><br><span class="line">    kind: <span class="string">"individual"</span>;</span><br><span class="line">    firstName: <span class="built_in">string</span>;</span><br><span class="line">    lastName: <span class="built_in">string</span>;</span><br><span class="line">    socialSecurityNumber: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> InstitutionCustomerType &#123;</span><br><span class="line">    kind: <span class="string">"institutional"</span>;</span><br><span class="line">    companyName: <span class="built_in">string</span>;</span><br><span class="line">    companyTaxId: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CustomerType = IndividualCustomerType | InstitutionCustomerType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Customer &#123;</span><br><span class="line">    acquisitionDate: <span class="built_in">Date</span>;</span><br><span class="line">    <span class="keyword">type</span>: CustomerType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We’ve defined two interfaces. Both of them have a <code>kind</code> property which is a <strong>literal type</strong>. Variable of literal type can only hold a single, specific value. Each interface contains only fields that are relevant to the given type of customer. Finally, we’ve defined <code>CustomerType</code> as a union of these two interfaces. Because they both have the <code>kind</code> field TypeScript recognizes them as discriminated union types and makes working with them easier. The biggest gain is that it’s now impossible to create <em>illegal</em> instances of <code>Customer</code>. For example, both of the following objects are fine:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> customer1: Customer = &#123; </span><br><span class="line">    acquisitionDate: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2016</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">    <span class="keyword">type</span>: &#123;</span><br><span class="line">        kind: <span class="string">"individual"</span>,</span><br><span class="line">        firstName: <span class="string">"John"</span>,</span><br><span class="line">        lastName: <span class="string">"Green"</span>,</span><br><span class="line">        socialSecurityNumber: <span class="number">423435</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> customer2: Customer = &#123; </span><br><span class="line">    acquisitionDate: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2016</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">    <span class="keyword">type</span>: &#123;</span><br><span class="line">        kind: <span class="string">"institutional"</span>,</span><br><span class="line">        companyName: <span class="string">"Acme"</span>,</span><br><span class="line">        companyTaxId: <span class="number">124345454</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>…but TypeScript would fail to compile this one:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fails to compile</span></span><br><span class="line"><span class="keyword">const</span> customer3: Customer = &#123; </span><br><span class="line">    acquisitionDate: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2016</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">    <span class="keyword">type</span>: &#123;</span><br><span class="line">        kind: <span class="string">"institutional"</span>,</span><br><span class="line">        companyName: <span class="string">"Acme"</span>,</span><br><span class="line">        companyTaxId: <span class="number">124345454</span>,</span><br><span class="line">        firstName: <span class="string">"John"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Working-with-discriminated-unions"><a href="#Working-with-discriminated-unions" class="headerlink" title="Working with discriminated unions"></a>Working with discriminated unions</h2><p>Let’s now see how to implement a function that takes a <code>Customer</code> object and prints the customer’s name based on their type.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printName</span>(<span class="params">customer: Customer</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (customer.type.kind) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"individual"</span>: <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;customer.type.firstName&#125;</span> <span class="subst">$&#123;customer.type.lastName&#125;</span>`</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"institutional"</span>: <span class="keyword">return</span> customer.type.companyName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As we can see, TypeScript is clever enough to know that inside <code>case &quot;individual&quot;</code> branch of the <code>switch</code> statement <code>customer.type</code> is actually an instance of <code>IndividualCustomerType</code>. For example, trying to access <code>companyName</code> field inside this branch would result in a compilation error. We would get the same behaviour inside an <code>if</code> statement branch. There is one more interesting mechanism called exhaustiveness checking. TypeScript is able to figure out that we have not covered all of the possible customer types! Of course, it would seem much more useful if we had tens of them and not just two.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fails to compile</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printName</span>(<span class="params">customer: Customer</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (customer.type.kind) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"individual"</span>: <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;customer.type.firstName&#125;</span> <span class="subst">$&#123;customer.type.lastName&#125;</span>`</span>;</span><br><span class="line">        <span class="comment">// case "institutional": return customer.type.companyName;</span></span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">const</span> exhaustiveCheck: never = customer.type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This solution makes use of the <code>never</code> type. Since <code>case &quot;institutional&quot;</code> is not defined, control falls through to the <code>default</code> branch in which <code>customer.type</code> is inferred to be of type <code>InstitutionCustomerType</code> while being assigned to <code>never</code> type which of course results in an error.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Discriminated union types are pretty cool. As I mentioned, the whole point of TypeScript is to help us catch mistakes that we would make without having type checking. Discriminated unions help us model the domain in more detail, therefore making <em>illegal</em> instances impossible to create.</p><h2 id="Disclaimer"><a href="#Disclaimer" class="headerlink" title="Disclaimer"></a>Disclaimer</h2><p>One could argue that the same thing could be achieved with inheritance (or interface extension in this case). And that’s true. Solving this with inheritance would be an Object Oriented Programming approach while discriminated unions are specific to Functional Programming. I think this approach makes more sense in the context of web applications where we often fetch data from some REST API which doesn’t support object inheritance. What’s more, exhaustiveness checking is not possible to achieve with object inheritance. It’s an example of the classical <em>composition versus inheritance</em> dilemma.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this post, we’re going to look into an interesting feature of the TypeScript language. It’s called &lt;strong&gt;discriminated unions&lt;/stron
      
    
    </summary>
    
      <category term="TypeScript" scheme="https://codewithstyle.info/categories/TypeScript/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/TypeScript/Web/"/>
    
    
      <category term="typescript" scheme="https://codewithstyle.info/tags/typescript/"/>
    
      <category term="algebraic data types" scheme="https://codewithstyle.info/tags/algebraic-data-types/"/>
    
  </entry>
  
  <entry>
    <title>NgPoland 2017 conference summary</title>
    <link href="https://codewithstyle.info/ngpoland-2017-conference-summary/"/>
    <id>https://codewithstyle.info/ngpoland-2017-conference-summary/</id>
    <published>2017-11-25T09:59:27.000Z</published>
    <updated>2019-12-02T21:26:20.069Z</updated>
    
    <content type="html"><![CDATA[<p>Last Tuesday I gave a talk about using <strong>Functional Programming in Angular</strong> at the <a href="http://ng-poland.pl" target="_blank" rel="noopener">NgPoland</a> conference - the biggest Angular conference in Central and Eastern Europe (and big it was - over 600 Angularians in one place). While I’m planning to write an article based on my talk, first I would like to post some notes from the other talks I saw. </p><p>I will risk a statement that the choice of topics in this conference proves that <strong>frontend programming is getting more and more functional</strong>. At least four talks had something to do with functional programming!</p><ul><li><strong>Understand NGRX by building a Store</strong> - NGRX is pretty functional itself as it embraces immutability and pure functions</li><li><strong>High-Performance Applications with Angular</strong> - many ways of improving performance in Angular are based on functional concepts - memoization, pure pipes, <code>OnPush</code> change detection strategy (hence immutability)</li><li><strong>How to use Functional Programming with Angular and why it’s a good idea</strong> - quite obviously ;)</li><li><strong>Understanding High Order Observables</strong> - higher-order functions and function composition</li></ul><p>Since I was a speaker I didn’t have a chance to see all talks, so <strong>the list is not be complete</strong>.</p><h3 id="Keynote-Understand-NGRX-by-building-a-Store-by-Todd-Motto"><a href="#Keynote-Understand-NGRX-by-building-a-Store-by-Todd-Motto" class="headerlink" title="Keynote - Understand NGRX by building a Store by Todd Motto"></a>Keynote - Understand NGRX by building a Store by Todd Motto</h3><p>While it might seem that the talk was about using NGRX, it was actually more about how to build your own NGRX! NGRX is a Redux implementation with a reactive API which plays well with the rest of Angular. The talk included a large live coding session where Todd explained the Redux design pattern by building an application from scratch in vanilla JavaScript. I think it’s a great idea, especially given that we’re surrounded by so many frameworks and sometimes we use them without having understood how they work inside.</p><h3 id="Angular-Learning-redesigned-by-Dariusz-Kalbarczyk"><a href="#Angular-Learning-redesigned-by-Dariusz-Kalbarczyk" class="headerlink" title="Angular - Learning redesigned by Dariusz Kalbarczyk"></a>Angular - Learning redesigned by Dariusz Kalbarczyk</h3><p>This short talk was given by the organiser of the conference. While it was not technical, I think it was really inspiring. Dariusz explained how to benefit the most from the conference by setting up clear learning goals.</p><h3 id="High-Performance-Applications-with-Angular-Nir-Kaufman"><a href="#High-Performance-Applications-with-Angular-Nir-Kaufman" class="headerlink" title="High-Performance Applications with Angular - Nir Kaufman"></a>High-Performance Applications with Angular - Nir Kaufman</h3><p>A truly amazing talk, packed with tips and suggestions on how to tackle performance issues in Angular applications. First, Nir stated that optimizing Angular performance is mostly about shortening the change detection process. Next, he talked about many ways to achieve this including: using the <code>OnPush</code> change detection strategy, manually controlling change detection by detaching <code>ChangeDetectorRef</code>, using memoization for caching results of pure functions, using pure pipes, running code outside of <code>NgZone</code>, and many more.</p><h3 id="Login-and-Access-Control-in-Angular-Manfred-Steyer"><a href="#Login-and-Access-Control-in-Angular-Manfred-Steyer" class="headerlink" title="Login and Access Control in Angular - Manfred Steyer"></a>Login and Access Control in Angular - Manfred Steyer</h3><p>Very insightful and well delivered talk about architecting authentication in SPA applications. Manfred presented many different options including using the OAuth2 standard and 3-rd party providers such as Firebase. He has also talked about popular security attacks and how to tackle them.</p><h3 id="How-to-use-Functional-Programming-with-Angular-and-why-it’s-a-good-idea-Milosz-Piechocki"><a href="#How-to-use-Functional-Programming-with-Angular-and-why-it’s-a-good-idea-Milosz-Piechocki" class="headerlink" title="How to use Functional Programming with Angular and why it’s a good idea - Miłosz Piechocki"></a>How to use Functional Programming with Angular and why it’s a good idea - Miłosz Piechocki</h3><p>As mentioned, I will write a separate article with the summary of my talk.</p><h3 id="Building-Angular2-amp-Firebase-application-Faris-Ismail"><a href="#Building-Angular2-amp-Firebase-application-Faris-Ismail" class="headerlink" title="Building Angular2 &amp; Firebase application - Fáris Ismail"></a>Building Angular2 &amp; Firebase application - Fáris Ismail</h3><p>The talk was delivered by an early adopter of Cloud Firestore - the new storage offering from Firebase - so we’ve been given some first-hand experiences. Since I was stuck with the Realtime Database, the presentation was perfect to me - it explained all of the advantages of the new Firestore solution. The live demo which involved hundreds of people interacting with the application real-time (and displayed on a huge cinema screen) was pretty impressive too!</p><blockquote><p><a href="https://twitter.com/hashtag/ngPolandConf?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#ngPolandConf</a><br>This guy currently collect more emails than recruiters :D :D <a href="https://t.co/CTyeD1nQ6G" target="_blank" rel="noopener">pic.twitter.com/CTyeD1nQ6G</a></p><p>— Frantisek Ferko (@FrantisekFerko) <a href="https://twitter.com/FrantisekFerko/status/933001648313720832?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">November 21, 2017</a></p></blockquote><h3 id="Angular-5-has-arrived-Bartlomiej-Naroznik"><a href="#Angular-5-has-arrived-Bartlomiej-Naroznik" class="headerlink" title="Angular 5 has arrived - Bartłomiej Narożnik"></a>Angular 5 has arrived - Bartłomiej Narożnik</h3><p>Nice and succinct summary of the new features introduced in Angular 5. Bartłomiej tried to answer the question whether the new version is mature enough to upgrade. Additionally, he presented some cool statistics about the Angular repository. </p><p><img src="/images/2017/11/DPJmWT-XUAEhhmM-1024x768.jpg" alt=""></p><h3 id="Understanding-High-Order-Observables-Gerard-Sans"><a href="#Understanding-High-Order-Observables-Gerard-Sans" class="headerlink" title="Understanding High Order Observables - Gerard Sans"></a>Understanding High Order Observables - Gerard Sans</h3><p>Gerard talked about how to use the <a href="http://rxmarbles.com/" target="_blank" rel="noopener">RxJS Marbles</a> testing library to visualize and understand different RxJS operators. It allows you to describe test prerequisites and expectations using… ASCII art :) The library is actually used for testing the RxJS library - you can find some tests on GitHub. Great for experimenting and wrapping your head around hundreds of RxJS operators.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Last Tuesday I gave a talk about using &lt;strong&gt;Functional Programming in Angular&lt;/strong&gt; at the &lt;a href=&quot;http://ng-poland.pl&quot; target=&quot;_b
      
    
    </summary>
    
      <category term="Angular" scheme="https://codewithstyle.info/categories/Angular/"/>
    
      <category term="Thoughts" scheme="https://codewithstyle.info/categories/Angular/Thoughts/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/Angular/Thoughts/Web/"/>
    
    
      <category term="angular" scheme="https://codewithstyle.info/tags/angular/"/>
    
      <category term="conferences" scheme="https://codewithstyle.info/tags/conferences/"/>
    
  </entry>
  
  <entry>
    <title>Change detection in Angular versus AngularJS</title>
    <link href="https://codewithstyle.info/change-detection-angular-versus-angularjs/"/>
    <id>https://codewithstyle.info/change-detection-angular-versus-angularjs/</id>
    <published>2017-11-08T20:05:26.000Z</published>
    <updated>2020-04-28T19:55:30.216Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Change detection</strong> is the mechanism responsible for data binding in Angular. Thanks to it you don’t need to manually manipulate the DOM tree. Instead, you can make changes to the model and they are automatically reflected in the view. In this post I’ll try to briefly explain the differences of how change detection works in <strong>AngularJS</strong> (version 1.x) versus <strong>Angular</strong> (version 2+). Why should you care about this? It’s generally a good idea to understand how the framework you’re using works under the hood. The improvements in change detection contributed heavily to performance boost of Angular 2+. <strong>Scroll to the bottom for a table summarizing major differences.</strong></p><h2 id="When-to-detect-changes"><a href="#When-to-detect-changes" class="headerlink" title="When to detect changes?"></a>When to detect changes?</h2><p>Let’s think about how the process of change detection could look like in big picture.</p><ol><li>The application starts up and models are initialized with some values. These values are also reflected in the view.</li><li>The user interacts with the application. They click a button or type some text into an input field. An event is emitted.</li><li>An event handler is called for that event. The code can update some property on the model.</li><li>The model and the view are not in sync any more. Now is the time for the framework to detect changes and update the view accordingly.</li></ol><p><img src="/images/2017/10/Change-detection-workflow.png" alt="Change detection diagram"></p><p>Now we know when change detection should be performed - whenever there is a chance that some model will be modified. In the above example it’s a handler for a user-generated event that can make changes to the model. However, there are other situations that can result in model updates such as:</p><ul><li>arrival of response to a HTTP request</li><li>execution of callback passed to <code>setInterval</code> function</li></ul><p>Wrapping up, model changes (hence change detection) always start with some sort of asynchronous event.</p><h2 id="Digest-cycle-vs-zones"><a href="#Digest-cycle-vs-zones" class="headerlink" title="Digest cycle vs zones"></a>Digest cycle vs zones</h2><p>We already know <strong>when</strong> change detection should be called. However, we don’t know <strong>how</strong> the framework ensures that it will be called. This is the first of the differences between Angular and AngularJS. In AngularJS change detection was invoked by calling <code>$scope.digest()</code>. Most of the times we didn’t have to call it manually because the framework did it for us. Directives such as <code>ngClick</code> or the <code>$http</code> service would make sure to run the digest cycle (i.e. change detection) after executing the handlers we’ve provided (that could potentially make changes to the model). The consequence of this was that in some rare cases you had to tell Angular to run the digest cycle by calling <code>scope.$digest</code> or <code>scope.$apply</code> manually. Angular takes a different, more robust approach. Instead of invoking CD manually, it takes advantage of a concept called <strong>zones</strong>. <em>Zone.js</em> is a library which allows you to inject your own code into some low-level calls. In particular, it allows Angular to run change detection code automatically after an asynchronous event is handled.</p><h2 id="Multiple-passes-vs-single-pass"><a href="#Multiple-passes-vs-single-pass" class="headerlink" title="Multiple passes vs single pass"></a>Multiple passes vs single pass</h2><p>Let’s now focus on the change detection mechanism itself. It’s actually quite simple - the framework keeps track of values in the model before and after running your event handlers. Change detection simply looks at these values and compares them. Once it finds some differences, it’s able to tell that a change in the model has occurred. Such mechanism is called <strong>dirty checking</strong>.</p><h2 id="Digest-loop-in-AngularJS"><a href="#Digest-loop-in-AngularJS" class="headerlink" title="Digest loop in AngularJS"></a>Digest loop in AngularJS</h2><p>Whenever we use data binding or pass an expression to <code>ng-if</code> or <code>ng-for</code> we create a watcher. During the <code>$digest</code> call, AngularJS iterates over all watchers and compares old values of watched expressions with new values. The tricky part is that <strong>AngularJS allows two-way data binding</strong>. That means that after a change in the model is reflected in the view, it might turn out that the change in the view triggers another change in the model. Therefore, a single pass through the watcher array may not be enough. AngularJS repeats the process until it detects no more changes in the model. Unfortunately, it’s quite easy to write code in a way that the model never stabilizes. What’s more, having to iterate over the watchers so many times is not great in terms of performance.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$scope.$watch(<span class="string">"foo"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $scope.foo = $scope.foo + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Above you can see an example of infinite digest loop taken from Angular documentation.</p><h2 id="Unidirectional-data-flow-in-Angular"><a href="#Unidirectional-data-flow-in-Angular" class="headerlink" title="Unidirectional data flow in Angular"></a>Unidirectional data flow in Angular</h2><p>Angular is smarter about this. It doesn’t support two-way data binding any more. Therefore, it can assume that a single pass of change detection will always be sufficient. This concept has a name - it’s called <strong>unidirectional data flow</strong>. It’s unidirectional because the data always flow from the model to the template. It’s not possible for a view change resulting from change detection to trigger a change in the model - this would be data flowing in the other direction. Hey, but isn’t <code>[(ngModel)]</code> a two-way data binding? Actually, it’s not. It’s just a syntactic sugar for a simultaneous event binding and property binding. Importantly, it still works with single pass change detection. Unidirectional data flow is a major simplification when compared with AngularJS. It makes your application more predictable. It’s also much better in terms of performance.</p><h2 id="Dynamic-vs-static-dirty-checking"><a href="#Dynamic-vs-static-dirty-checking" class="headerlink" title="Dynamic vs static dirty checking"></a>Dynamic vs static dirty checking</h2><p>Finally, AngularJS and Angular differ in how the dirty checking mechanism is implemented. In AngularJS the mechanism is dynamic. It means that watchers are created and added to the array during runtime, on demand. Angular takes a different approach. It generates a change detector for every single component. Such change detector is based on the template so it only compares the values of expressions used in property bindings. With <a href="https://codewithstyle.info/ahead-of-time-compilation-angular">Ahead of Time compilation</a> enabled, Angular can generate change detectors during build time! Such change detectors are much easier to optimize for the JavaScript Virtual Machine than the dynamic mechanism used by AngularJS. We say that <strong>change detection in Angular is VM-friendly</strong>. This has major performance implications.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In this article I’ve explained basics of change detection in Angular. Having understood this it’s easier to understand some of the design choices taken in Angular versus AngularJS. To wrap up, here is a table that summarizes the major differences.</p><table><thead><tr><th>AngularJS</th><th>Angular</th></tr></thead><tbody><tr><td>Change detection is invoked internally by the framework (by calling \$digest). Sometimes it is necessary to trigger change detection manually</td><td>Change detection is invoked automatically using zones. The framework hooks into internal browser API calls and performs CD after asynchronous events.</td></tr><tr><td>Two-way data binding is supported which means that single pass of change detection is not enough. AngularJS runs digest cycles until the model stabilizes.</td><td>Two-way data binding is not supported hence single pass of change detection is enough. Unidirectional data flow is enforced - the data flows from the model to the view, never the other way around.</td></tr><tr><td>Dirty checking is dynamic. Watchers are created at runtime.</td><td>Every component has its own custom change detector. With AOT enabled change detectors can be generated at build time. Change detection code is VM-friendly.</td></tr></tbody></table><p>Change detection in AngularJS is a topic that comes up often during interviews for AngularJS developer positions. If you’re interested, check out <a href="https://www.toptal.com/angular-js#hiring-guide" target="_blank" rel="noopener">this article</a> for more AngularJS interview questions.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Change detection&lt;/strong&gt; is the mechanism responsible for data binding in Angular. Thanks to it you don’t need to manually manip
      
    
    </summary>
    
      <category term="Angular" scheme="https://codewithstyle.info/categories/Angular/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/Angular/Web/"/>
    
    
      <category term="angular" scheme="https://codewithstyle.info/tags/angular/"/>
    
      <category term="angularjs" scheme="https://codewithstyle.info/tags/angularjs/"/>
    
  </entry>
  
  <entry>
    <title>Using RxJS with Angular: part 2</title>
    <link href="https://codewithstyle.info/using-rxjs-angular-part-2/"/>
    <id>https://codewithstyle.info/using-rxjs-angular-part-2/</id>
    <published>2017-10-30T19:14:40.000Z</published>
    <updated>2019-12-02T21:26:20.072Z</updated>
    
    <content type="html"><![CDATA[<p>In the previous post about Angular and RxJS we discussed the AsyncPipe and how it can be used to consume Observables in Angular templates. </p><p>This time we will focus on the essence of functional-reactive programming. Let’s see how we can reinvent the way we look at how data flows in our program. Check out the <a href="https://codewithstyle.info/using-rxjs-angular-part-1/">first part</a> of this article where I explain the AsyncPipe. <em>Credits to <a href="https://piecioshka.pl/blog/" target="_blank" rel="noopener">Piecioshka</a> whose questions inspired me to look into RxJS in more detail!</em></p><h2 id="Creating-your-own-Observables"><a href="#Creating-your-own-Observables" class="headerlink" title="Creating your own Observables"></a>Creating your own Observables</h2><p>So far we’ve only seen one kind of Observable - the one returned by the HttpClient. As mentioned, it’s not a particularly exciting Observable. It would only contain a single event - the arrival of HTTP response from the server. However, one may argue that there are many other streams of events out there in a GUI application. Consider a button with some click handler. A sequence of button clicks can be looked at as at a stream of events - hence, an Observable. It’s very easy to create an observable from a button in Angular:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-click-stream'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button (click)="clickStream.next()"&gt;Fetch data&lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ClickStreamComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  clickStream: Observable&lt;<span class="built_in">any</span>&gt; = <span class="keyword">new</span> Subject&lt;<span class="built_in">any</span>&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    <span class="keyword">this</span>.clickStream.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Button clicked!"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We’ve created a Subject and call next on it after every click. This makes subscribers run the handler on every click. The type of clickStream is Observable<any> because we’re not interested in any data associated with the click but merely with the click itself. Nothing exciting here so far. We could’ve accomplished exactly the same with a regular event handler.</any></p><h2 id="Combining-Observables"><a href="#Combining-Observables" class="headerlink" title="Combining Observables"></a>Combining Observables</h2><p>As button caption suggests, let’s fetch some data whenever the button is clicked. We could do it this way:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ngOnInit() &#123;</span><br><span class="line">  <span class="keyword">this</span>.clickStream.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.httpClient.get&lt;Post[]&gt;(<span class="string">"https://jsonplaceholder.typicode.com/posts"</span>)</span><br><span class="line">      .subscribe(<span class="function"><span class="params">posts</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.posts = posts;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But there are issues with this approach. It doesn’t allow us to take advantage of the AsyncPipe we’ve talked about in the previous post. Besides, we should take care about unsubscribing of all the Observables created with button clicks. What we would much prefer is to somehow combine the click stream with the inner Observable. It turns out that RxJS lets us do exactly this!</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"rxjs/add/operator/mergeMap"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-click-stream'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button (click)="clickStream.next()"&gt;Fetch data&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;span *ngFor="let post of postStream | async"&gt;&#123; &#123; post.title &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ClickStreamComponent &#123;</span><br><span class="line">  <span class="keyword">private</span> url = <span class="string">"https://jsonplaceholder.typicode.com/posts"</span>;</span><br><span class="line"></span><br><span class="line">  clickStream: Observable&lt;<span class="built_in">any</span>&gt; = <span class="keyword">new</span> Subject&lt;<span class="built_in">any</span>&gt;();</span><br><span class="line">  postStream: Observable&lt;Post[]&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> httpClient: HttpClient</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.postStream = <span class="keyword">this</span>.clickStream.mergeMap(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.httpClient.get&lt;Post[]&gt;(<span class="keyword">this</span>.url));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We’ve used the mergeMap operator. It takes a function that for each value produced by an Observable creates a new Observable. It then merges all the resulting Observables into a single one which we can now safely use with the AsyncPipe! </p><p><img src="/images/2017/10/mergeMap.png" alt="" title="mergeMap">   </p><p>On each click our clickStream Observable produces an (empty) value. We take this value and call httpClient.get which gives us an Observable that will produce a single value. If we merge these Observables we will get a stream of values returned from the server.</p><h2 id="Why-do-this"><a href="#Why-do-this" class="headerlink" title="Why do this?"></a>Why do this?</h2><p>I hope you agree that the mergeMap approach is much more readable and concise than the nested subscribe approach. However, this is not the only benefit. Having our data fetching mechanism represented a single observable allows us to use the whole arsenal of RxJS operators. A very common use case would be to make some sort of safe guard that would prevent the user from firing bazillion of HTTP requests by clicking furiously on the button. With RxJS it’s super easy!</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import "rxjs/add/operator/debounceTime";</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.postStream = </span><br><span class="line">      <span class="keyword">this</span>.clickStream</span><br><span class="line">        .debounceTime(<span class="number">500</span>)</span><br><span class="line">        .mergeMap(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.httpClient.get&lt;Post[]&gt;(<span class="keyword">this</span>.url));</span><br></pre></td></tr></table></figure><p>The debounceTime operator waits 500 milliseconds after each button click. If there is a new click coming within this timespan than it drops the previous one. Thanks to that we will only make the request for the last click. Imagine implementing this without RxJS… Another approach would be to use the switchMap operator.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.postStream = </span><br><span class="line">      <span class="keyword">this</span>.clickStream.switchMap(<span class="function"><span class="params">()</span> =&gt;</span> </span><br><span class="line">        <span class="keyword">this</span>.httpClient.get&lt;Post[]&gt;(<span class="keyword">this</span>.url));</span><br></pre></td></tr></table></figure><p>It works like mergeMap but if there is a new click while the previous request is still not resolved than the previous request will be dropped (cancelled).</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>I wanted to show you that with RxJS we can change the way we think about the data flow in Angular applications. Doing this allows us to make use of some interesting RxJS operators but it also lets us eliminate mutable state from our component. Such components are easier to maintain and harder to break.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In the previous post about Angular and RxJS we discussed the AsyncPipe and how it can be used to consume Observables in Angular templates
      
    
    </summary>
    
      <category term="Angular" scheme="https://codewithstyle.info/categories/Angular/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/Angular/Web/"/>
    
    
      <category term="angular" scheme="https://codewithstyle.info/tags/angular/"/>
    
      <category term="rxjs" scheme="https://codewithstyle.info/tags/rxjs/"/>
    
  </entry>
  
  <entry>
    <title>Using RxJS with Angular: part 1</title>
    <link href="https://codewithstyle.info/using-rxjs-angular-part-1/"/>
    <id>https://codewithstyle.info/using-rxjs-angular-part-1/</id>
    <published>2017-10-16T18:05:42.000Z</published>
    <updated>2019-12-02T21:26:20.072Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I wrote about using RxJS as part of my <a href="https://codewithstyle.info/functional-programming-javascript-plain-words/">Functional Programming in JavaScript course</a>. Let’s see how to combine RxJS with the Angular framework. </p><p>As a quick reminder, <a href="https://github.com/Reactive-Extensions/RxJS" target="_blank" rel="noopener">RxJS</a> is a functional-reactive programming JavaScript library. It helps you write maintainable, readable code by allowing you to express your application as a manipulation on streams of events. If you have no experience with RxJS, I recommend you to read the <a href="https://codewithstyle.info/functional-javascript-part-8-functional-reactive-programming-rxjs/">part of my course dedicated to it</a>.</p><h3 id="Angular-support-for-RxJS"><a href="#Angular-support-for-RxJS" class="headerlink" title="Angular support for RxJS"></a>Angular support for RxJS</h3><p>It’s especially easy to overlook RxJS support in Angular when you are coming from the AngularJS (1.x) background where asynchrony was based on promises. For example, the $http  service in AngularJS returned a Promise which would resolve once the remote server responded to our request. In Angular (2+) it’s still possible to work in exactly the same way. The HttpClient service (Http service before Angular 4.3) returns Observables. However, Observables are easily convertible to Promises with the toPromise operator. In some cases, that’s ok. However, there are cases where we can benefit from sticking to Observables. What does it actually mean that HttpClient returns an Observable? An Observable represents a stream of events. Given a callback (provided as an argument to subscribe call) it will run it every time a new event is produced. When we make a remote server call our “stream of events” contains only a single event - the response coming back from the server. It’s therefore a very specific kind of Observable, but an Observable nonetheless.</p><h3 id="Async-pipe"><a href="#Async-pipe" class="headerlink" title="Async pipe"></a>Async pipe</h3><p>Besides having Observables baked into the API, Angular also supports consuming them with the async pipe. Let’s see an example.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">      &lt;li *ngFor="let post of posts | async"&gt;&#123; &#123;post.title&#125;&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  posts: Observable&lt;Post[]&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> httpClient: HttpClient</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.posts = <span class="keyword">this</span>.httpClient.get&lt;Post[]&gt;(<span class="string">"https://jsonplaceholder.typicode.com/posts"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Post &#123;</span><br><span class="line">  title: <span class="built_in">string</span>;</span><br><span class="line">  body: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Pay attention to the template. We are binding to the bands property. Since it’s an Observable we can’t bind to it directly. However, the AsyncPipe comes to rescue. If it weren’t for the AsyncPipe, we would need to manually subscribe to the Observable. What’s more, we would need to remember to unsubscribe from it when the component is destroyed.</p><h3 id="Issues-with-AsyncPipe"><a href="#Issues-with-AsyncPipe" class="headerlink" title="Issues with AsyncPipe"></a>Issues with AsyncPipe</h3><p>You need to be careful when using the Async pipe, though. Let’s have a look at the following example.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;p&gt;&#123;&#123; (post | async)?.title &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;&#123;&#123; (post | async)?.body &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  post: Observable&lt;Post&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> httpClient: HttpClient</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.post = <span class="keyword">this</span>.httpClient.get&lt;Post&gt;(<span class="string">"https://jsonplaceholder.typicode.com/posts/1"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here we are fetching a single post and want to display it’s details. Hence, we use the AsyncPipe  twice. Surprisingly, if we check the Network tab in our browser’s developer tools, we will discover that two HTTP requests have been made instead of one. </p><p><img src="/images/2017/10/AngularRxjsExample.png" alt=""> </p><p>To explain this we need to understand the difference between hot and cold observables. <strong>Cold observables</strong> are the ones that “trigger” the observed stream when they are being subscribed to. HttpClient returns cold observables. We are using the AsyncPipe twice here which invokes the subscription twice. In consequence, an HTTP request is fired twice. On the other hand <strong>hot observables</strong> are ones that are already “triggered”. When we subscribe we will only see new events. The fact of subscribing has no side effects. It’s possible to fix our problem here by converting the cold observable to a hot one. However, it has its drawbacks too. The best option is actually to use good old Promises.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.post = <span class="keyword">this</span>.httpClient</span><br><span class="line">    .get&lt;Post&gt;(<span class="string">"https://jsonplaceholder.typicode.com/posts/1"</span>)</span><br><span class="line">    .toPromise();</span><br></pre></td></tr></table></figure><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>In this post you have seen how to deal with Observables returned by the HttpClient service in Angular. I have also shown that it sometimes makes sense to fall back to plain Promises. In the next part we will unleash the real power of RxJS by combining our Observable with another event stream.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently I wrote about using RxJS as part of my &lt;a href=&quot;https://codewithstyle.info/functional-programming-javascript-plain-words/&quot;&gt;Funct
      
    
    </summary>
    
      <category term="Angular" scheme="https://codewithstyle.info/categories/Angular/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/Angular/Web/"/>
    
    
      <category term="angular" scheme="https://codewithstyle.info/tags/angular/"/>
    
      <category term="rxjs" scheme="https://codewithstyle.info/tags/rxjs/"/>
    
  </entry>
  
  <entry>
    <title>Real bug story: very long-running jobs in Hangfire</title>
    <link href="https://codewithstyle.info/real-bug-story-long-running-jobs-hangfire/"/>
    <id>https://codewithstyle.info/real-bug-story-long-running-jobs-hangfire/</id>
    <published>2017-10-09T15:00:59.000Z</published>
    <updated>2019-12-02T21:26:20.070Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.hangfire.io/" target="_blank" rel="noopener">Hangfire</a> is a great tool which can help you with doing background processing in .NET web applications. It’s great for tasks such as background import or asynchronous processing of some events or requests. What’s amazing about Hangfire is that it works very well in a setup where you have multiple instances of your application deployed behind a load balancer. In such case Hangfire can synchronize using database or Redis.</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>You need to be extra careful when using long running jobs in connection with DisableConcurrentExecution  attribute.</p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Some time ago I run into an interesting problem at work. I was using Hangfire to process requests from a queue. Users could add requests to the queue and than a Hangfire job would run every 5 minutes, take them off one by one and execute them. Processing of a single request was quite lengthy - it took about 2 minutes. The way I implemented it was to load all pending requests and execute them in a single run of the job. What’s more, I wanted the requests to be processed sequentially. I applied the DisableConcurrentExecution  attribute in order to make sure that there is only a single instance of the job running at given time. The problem materialized itself when I added several hundreds requests to the queue. After some time the job started throwing the following error:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Timeout expired. The timeout period elapsed prior to obtaining a connection from the pool</span><br></pre></td></tr></table></figure><p>What happened was the following:</p><ol><li>The first job run noticed 200 new requests and started processing them. It would take ~400 minutes to finish the processing.</li><li>Next executions of the job should not happen because of the DisableConcurrentExecution attribute. However, Hangfire does actually create the job instance - it’s not starting it until the other execution is not finished.</li><li>Our plumbing around Hangfire made it start a database transaction whenever a Job object is resolved from the IoC container. The database connection was obviously pulled from the connection pool.</li><li>After some time we’ve had 100 job instances waiting for the first one to finish. Each one has borrowed a database connection from the connection pool.</li><li>In consequence, at some point we were running out of the connections in the pool and the job started to crash.</li></ol><p><img src="/images/2017/10/Hangfire_–_Background_jobs_and_workers_for__NET_and__NET_Core.png" alt=""></p><h3 id="Solution-s"><a href="#Solution-s" class="headerlink" title="Solution(s)"></a>Solution(s)</h3><p>It was a nasty issue and took some time to figure out. We’ve ended up with a workaround and increased the connection pool size because we knew that this huge batch of requests was a one-off thing. However, the whole design turned out to be flawed. It would be a much better idea to have more fine-grained jobs and process a single request in a single job execution. And this it my key takeaway from this bug story.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.hangfire.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hangfire&lt;/a&gt; is a great tool which can help you with doing background p
      
    
    </summary>
    
      <category term=".NET" scheme="https://codewithstyle.info/categories/NET/"/>
    
      <category term="Other topics" scheme="https://codewithstyle.info/categories/NET/Other-topics/"/>
    
    
      <category term=".net" scheme="https://codewithstyle.info/tags/net/"/>
    
      <category term="hangfire" scheme="https://codewithstyle.info/tags/hangfire/"/>
    
  </entry>
  
  <entry>
    <title>Ahead Of Time compilation in Angular</title>
    <link href="https://codewithstyle.info/ahead-of-time-compilation-angular/"/>
    <id>https://codewithstyle.info/ahead-of-time-compilation-angular/</id>
    <published>2017-10-02T15:47:58.000Z</published>
    <updated>2019-12-02T21:26:20.063Z</updated>
    
    <content type="html"><![CDATA[<p>This week instead of a regular article I’ve decided to post a video recording of the talk I gave last week on Angular Warsaw meetup #14. It’s about <strong>Ahead Of Time compilation in Angular</strong>. </p><p>Learn how Angular works under the hood and how to significantly decrease the size of the bundle with your Angular application. Enjoy! </p><iframe width="560" height="315" src="https://www.youtube.com/embed/OLfja3F0-tk" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This week instead of a regular article I’ve decided to post a video recording of the talk I gave last week on Angular Warsaw meetup #14. 
      
    
    </summary>
    
      <category term="Angular" scheme="https://codewithstyle.info/categories/Angular/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/Angular/Web/"/>
    
    
      <category term="angular" scheme="https://codewithstyle.info/tags/angular/"/>
    
      <category term="aot" scheme="https://codewithstyle.info/tags/aot/"/>
    
      <category term="video" scheme="https://codewithstyle.info/tags/video/"/>
    
      <category term="talk" scheme="https://codewithstyle.info/tags/talk/"/>
    
  </entry>
  
  <entry>
    <title>Functional JavaScript part 8: functional-reactive programming with RxJS</title>
    <link href="https://codewithstyle.info/functional-javascript-part-8-functional-reactive-programming-rxjs/"/>
    <id>https://codewithstyle.info/functional-javascript-part-8-functional-reactive-programming-rxjs/</id>
    <published>2017-09-24T13:47:53.000Z</published>
    <updated>2019-12-02T21:26:20.067Z</updated>
    
    <content type="html"><![CDATA[<p>Let’s talk about RxJS - another concept that has recently established itself as an important part of modern JavaScript. In JavaScript applications you sometimes have to deal with streams of asynchronous events. For example, events could be produced by the user (button clicks, key presses) or pushed by a backend server (via web sockets or some other mechanism). </p><p>Given that applications are becoming more and more complex, it might become tricky to manage these streams in a traditional way (with callbacks). <strong>Reactive programming</strong> is a programming paradigm in which streams of data are central and therefore it’s much easier to work with them. <a href="https://github.com/Reactive-Extensions/RxJS" target="_blank" rel="noopener"><strong>RxJS</strong></a> is a <strong>functional reactive programming</strong> library. It means that it leverages functional techniques to facilitate dealing with event streams. In simple words, it lets you use the same <a href="https://codewithstyle.info/functional-javascript-part-2-array-operations/">operations that you learned to perform on arrays</a> on event streams. </p><p><strong>This post is part of the <a href="https://codewithstyle.info/functional-programming-javascript-plain-words/">Functional Programming in JavaScript series</a>.</strong></p><h3 id="Creating-observables-from-events"><a href="#Creating-observables-from-events" class="headerlink" title="Creating observables from events"></a>Creating observables from events</h3><p>RxJS introduces the concept of <strong>observable</strong>. An observable represents a stream of data (or events). Given an observable you can <strong>subscribe</strong> to it. When subscribing you provide a callback which will be fired every time a new item is popped out of the stream. Let’s take a text input field and create an observable that will represent the stream of keys typed into it.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/@reactivex/rxjs@5.0.0-beta.12/dist/global/Rx.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"textInput"</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> textInput = <span class="built_in">document</span>.getElementById(<span class="string">"textInput"</span>);</span><br><span class="line"><span class="keyword">var</span> keyStream = Rx.Observable.fromEvent(textInput, <span class="string">'keyup'</span>);</span><br></pre></td></tr></table></figure><p>As you can see, it’s pretty straightforward. RxJS allows us to easily convert classic JavaScript events to observables. Let’s now subscribe to this observable.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keyStream.subscribe(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Key pressed: "</span>, e.key));</span><br></pre></td></tr></table></figure><h3 id="Introducing-functional-operators"><a href="#Introducing-functional-operators" class="headerlink" title="Introducing functional operators"></a>Introducing functional operators</h3><p>I promised that RxJS has something to do with functional programming. Do you remember the filter operation? It would take an array and a predicate function and filter out elements which don’t satisfy the predicate. With RxJS you can treat the stream of events as if it were a regular JavaScript array. Can you guess the result of applying filter to our keyStream?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keyStream</span><br><span class="line">  .filter(<span class="function"><span class="params">e</span> =&gt;</span> e.key === e.key.toUpperCase())</span><br><span class="line">  .subscribe(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Capital key pressed: "</span>, e.key));</span><br></pre></td></tr></table></figure><p>Calling filter  on an observable creates a new observable which will only emit events that satisfy the predicate. In the above example we’re only passing on key presses if they are capital letters. </p><p><img src="/images/2017/09/filter.png" alt="" title="filter"> </p><p>Other array operations that you’ve learned such as map  or reduce  can also be applied to observables.</p><h3 id="Combining-observables"><a href="#Combining-observables" class="headerlink" title="Combining observables"></a>Combining observables</h3><p>Let’s say that every time a user types an upper case character we would like to perform a search using some REST API. We can do this elegantly using RxJS! We need to start thinking in terms of streams. We have a stream of key presses. Let’s transform it into a stream of search results coming from the REST service. What would we use if we wanted to transform an array-of-something to an array-of-something-else? We would use map. And this is exactly what we will use now.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keyStream</span><br><span class="line">  .filter(<span class="function"><span class="params">e</span> =&gt;</span> e.key === e.key.toUpperCase())</span><br><span class="line">  .map(<span class="function"><span class="params">e</span> =&gt;</span> fetch(<span class="string">"https://jsonplaceholder.typicode.com/posts?search="</span> + e.key));</span><br></pre></td></tr></table></figure><p>We use fetch to make the call to the backend server. However, fetch returns a promise so what we’ve done so far is transformed the stream of keys to a stream of promises. Not exactly what we wanted. Fortunately, it’s trivial to convert a promise to an observable.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keyStream</span><br><span class="line">  .filter(<span class="function"><span class="params">e</span> =&gt;</span> e.key === e.key.toUpperCase())</span><br><span class="line">  .map(<span class="function"><span class="params">e</span> =&gt;</span> Rx.Observable.fromPromise(fetch(<span class="string">"https://jsonplaceholder.typicode.com/posts?search="</span> + e.key)));</span><br></pre></td></tr></table></figure><p>There is one more problem with this though. At the moment we’re mapping each key press to an observable. Therefore, we’ve transformed an observable of keys to an observable of observables! In other words, for each key we will get a separate observable. It’s not perfect. We would much rather interact with a single observable instead. For that we need to combine the observables from the stream into a single one. Fortunately, there is an operator for that!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">keyStream</span><br><span class="line">  .filter(<span class="function"><span class="params">e</span> =&gt;</span> e.key === e.key.toUpperCase())</span><br><span class="line">  .flatMap(<span class="function"><span class="params">e</span> =&gt;</span> Rx.Observable.fromPromise(fetch(<span class="string">"https://jsonplaceholder.typicode.com/posts?search="</span> + e.key)))</span><br><span class="line">  .subscribe(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data));</span><br></pre></td></tr></table></figure><p>flatMap  takes a stream and a function mapping each event to another observable. Then it combines all of the resulting observables into a single one. </p><p><img src="/images/2017/09/flatMap.png" alt="" title="flatMap"> </p><p><code>flatMap</code> is an extremely important operation in the world of functional programming. It is a very high-level abstraction which allows you to combine structures. For example, there is a variant of flatMap  for array operations in the <a href="https://lodash.com/docs/4.17.4#flatMap" target="_blank" rel="noopener">lodash</a> library. Its purpose is to take an array of arrays and combine the nested arrays into a single array. Can you see the pattern emerging?</p><h3 id="Other-non-functional-operators"><a href="#Other-non-functional-operators" class="headerlink" title="Other non-functional operators"></a>Other non-functional operators</h3><p>There are many other interesting operators in RxJS which are not rooted in functional programming but are definitely worth exploring. Let’s finish off our example with one more improvement. At some point we might realize that calling the REST service after every key press is killing performance in our app. One possible solution to this is to only fire the request after some time passed since the last request. This would be a nightmare to implement with callbacks or promises. With RxJS it’s a matter of a single line</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">keyStream</span><br><span class="line">  .filter(<span class="function"><span class="params">e</span> =&gt;</span> e.key === e.key.toUpperCase())</span><br><span class="line">  .debounceTime(<span class="number">500</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">e</span> =&gt;</span> Rx.Observable.fromPromise(fetch(<span class="string">"https://jsonplaceholder.typicode.com/posts?search="</span> + e.key)));</span><br><span class="line">  .subscribe(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data));</span><br></pre></td></tr></table></figure><p><code>debounceTime</code> will do exactly what we want. It will wait 500 milliseconds after each key press. It will only emit this key press if there are no successful key presses in the incoming 500 milliseconds.</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>I’ve just scratched the surface of RxJS in this post. There are many other interesting operators which I encourage you to explore. Most importantly, it should all be much easier now once you are familiar with array operations. Once again you can see how universal the ideas in functional programming are. If you have any issues understanding anything in this post or if you simply would like to provide feedback, please leave a comment below. I want this course to be as good as possible and I need your help for that! If you found this post helpful, please consider sharing it on Facebook or Twitter.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let’s talk about RxJS - another concept that has recently established itself as an important part of modern JavaScript. In JavaScript app
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://codewithstyle.info/categories/JavaScript/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/JavaScript/Web/"/>
    
    
      <category term="functional programming" scheme="https://codewithstyle.info/tags/functional-programming/"/>
    
      <category term="rxjs" scheme="https://codewithstyle.info/tags/rxjs/"/>
    
  </entry>
  
  <entry>
    <title>Functional JavaScript part 7: Redux</title>
    <link href="https://codewithstyle.info/functional-javascript-part-7-redux/"/>
    <id>https://codewithstyle.info/functional-javascript-part-7-redux/</id>
    <published>2017-09-18T14:15:49.000Z</published>
    <updated>2019-12-02T21:26:20.067Z</updated>
    
    <content type="html"><![CDATA[<p>So far you had a chance to learn about two big ideas in functional JavaScript: functional array operations and immutability. Especially the latter concept could seem slightly theoretical to you. It’s time to see a practical application of immutability. You will now learn about Redux - an amazing concept which will change how you think about building applications. </p><p><strong>This post is part of the <a href="https://codewithstyle.info/functional-programming-javascript-plain-words/">Functional Programming in JavaScript series</a>.</strong></p><h3 id="Application-state"><a href="#Application-state" class="headerlink" title="Application state"></a>Application state</h3><p>Every web application in JavaScript has <strong>state</strong>. State is the sum of all data stored in memory during execution of the application. Every list of objects that you fetch from some backend API is part of the state. Variables that indicate whether some UI component should be visible or not are part of the state. Information about the currently logged user is part of the state. In a traditional Single Page Application the state is distributed across different places and can be updated from many different places. Therefore, it’s quite easy to lose control over the state. At some point, when making another change to your application, you might be surprised to learn that this particular variable is being updated by some method that you totally forgot about.</p><h3 id="Redux-approach-to-state-management"><a href="#Redux-approach-to-state-management" class="headerlink" title="Redux approach to state management"></a>Redux approach to state management</h3><p>Redux says that you should store the application state in a single object. It can be a complicated, deeply nested object. The important thing is that the state is stored in a single location (as opposed to being distributed across the whole application). Another rule imposed by Redux is that the state should be immutable - you should never change anything in it manually. Instead, whenever you wish to update something you should return a new copy of the state. Redux also says that all changes to the state should be initiated by <strong>actions</strong>. An action could be for example clicking on a button or receiving some data. The action can contain some additional data. So, you have a state and an action object. Given these two you should produce a new state object. Redux says that a function which takes a state and an action and produces a new state is called a <strong>reducer</strong>. </p><p><img src="/images/2017/08/reducer.png" alt="" title="reducer"></p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Let’s have a look at some real example. You are working on a bookstore application. Such application would store a list of books as part of its state. Therefore, the <strong>state</strong> object could look like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  books: [</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">"Code Complete"</span>, <span class="attr">author</span>: <span class="string">"Steve McConnell"</span>, <span class="attr">quantity</span>: <span class="number">10</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">"Clean Code"</span>, <span class="attr">author</span>: <span class="string">"Robert Cecil Martin"</span>, <span class="attr">quantity</span>: <span class="number">4</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>One of the possible actions a user can perform is to buy a book. Let’s see how an object describing such an <strong>action</strong> could look like.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> action = &#123;</span><br><span class="line"> type: <span class="string">"BUY_BOOK"</span>,</span><br><span class="line"> title: <span class="string">"Code Complete"</span>,</span><br><span class="line"> quantity: <span class="number">2</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Now we need to write a <strong>reducer</strong> - a function that will take the state and the action and produce a new state object. Given a list of books with quantities and an action object saying which and how many books are being bought, we need to find the book in the state and decrease its in-store quantity. Keep in mind that we need to return a new state object and not modify the existing one!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (action.type === <span class="string">"BUY_BOOK"</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newBooks = state.books.map(<span class="function"><span class="params">book</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (book.title === action.title) </span><br><span class="line">        <span class="keyword">return</span> &#123; </span><br><span class="line">          ...book, </span><br><span class="line">          quantity: book.quantity - action.quantity</span><br><span class="line">        &#125;;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123; ...state, <span class="attr">books</span>: newBooks &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s go through this code. First, we inspect the action’s type - there will be more actions in our application so we need to differentiate between them. Next, we map the existing collection of books to a new collection of books. The new one will be very similar to the old one except it will have decreased quantity for one of the books. That’s exactly what the function passed to map does. For most of the books it will return an unchanged object. However, when it finds a book with title corresponding to the one in the action, it will produce a new book object with decreased quantity.</p><h3 id="Benefits-of-Redux"><a href="#Benefits-of-Redux" class="headerlink" title="Benefits of Redux"></a>Benefits of Redux</h3><p>Ok, but what are the benefits of Redux? So far it looks like a complicated way to do simple things. That’s actually true. It doesn’t make much sense to use Redux when your application’s state is very simple. It shows its merit when you have to deal with a very complicated application that would normally be implemented with state distributed in many places. In such case, an application written the Redux way would be much less prone to introducing new bugs. Representing your application’s state as a single object gives you other interesting benefits. For example, you could store every action before applying it. You would then get a full history of your application’s state. It would be very easy to <strong>travel back in time</strong> or see how would your application look like if one of the actions hasn’t happened (by applying all actions apart from the one). In fact, there are <a href="https://github.com/gaearon/redux-devtools" target="_blank" rel="noopener">tools</a> which allow you to do exactly that.</p><h3 id="More-on-reducers"><a href="#More-on-reducers" class="headerlink" title="More on reducers"></a>More on reducers</h3><p>You might find the name <em>reducer</em> sounding familiar. Indeed, reducers are very much related to the reduce  higher order function which you learned about in <a href="https://codewithstyle.info/functional-javascript-part-3-reduce/">one of the previous chapters</a>. Reduce would operate on an array and would take a function which accepts the existing accumulator and next element array and returns the new accumulator. That’s exactly what a reducer function in Redux does! If you were given an array of actions and a reducer function than you could call reduce on that list and provide the reducer function as an argument. It’s also worth mentioning that functions such as reducers have a special name in functional programming. They are called <strong>pure functions</strong>. A function is pure if given some specific arguments will always return the same result. It means that the result doesn’t depend on any mutable state as is the case in Redux. Additionally, pure functions cannot cause any mutations themselves - in fact, they cannot produce any <strong>side effects</strong> at all (e.g. they cannot manipulate the DOM or print to console).</p><h3 id="Redux-library"><a href="#Redux-library" class="headerlink" title="Redux library"></a>Redux library</h3><p>Wait, wasn’t Redux supposed to be a library? The code above doesn’t include any non-vanilla JavaScript calls. That’s true - you can actually build applications the Redux way without using the <a href="http://redux.js.org/" target="_blank" rel="noopener">Redux library!</a> The library itself provides you with some utilities that make it easier to build applications. However, this article focuses on the concepts behind Redux and not on the library itself. Once you understood the concepts you will find learning the library very easy.</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>This chapter combines lots of ideas from the previous posts and shows you a really powerful concept in functional programming. Redux is a completely new way of building applications and definitely takes some time to get accustomed to but it can make handling complexity much easier. Note the heavy use of concepts introduced in the previous parts of the code - higher order functions, object spread operator and immutability. It shows how interconnected the concepts in functional programming are. For me it feels like pieces of a puzzle coming together! If you have any issues understanding anything in this post or if you simply would like to provide feedback, please leave a comment below. I want this course to be as good as possible and I need your help for that! If you found this post helpful, please consider sharing it on Facebook or Twitter.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;So far you had a chance to learn about two big ideas in functional JavaScript: functional array operations and immutability. Especially t
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://codewithstyle.info/categories/JavaScript/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/JavaScript/Web/"/>
    
    
      <category term="functional programming" scheme="https://codewithstyle.info/tags/functional-programming/"/>
    
      <category term="redux" scheme="https://codewithstyle.info/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>New-old ideas in JavaScript</title>
    <link href="https://codewithstyle.info/honest-advice-javascript-developers/"/>
    <id>https://codewithstyle.info/honest-advice-javascript-developers/</id>
    <published>2017-08-31T14:23:17.000Z</published>
    <updated>2019-12-02T21:26:20.067Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Modern-JavaScript-is-considered-hard"><a href="#Modern-JavaScript-is-considered-hard" class="headerlink" title="Modern JavaScript is considered hard"></a>Modern JavaScript is considered hard</h3><p>Have you noticed the abundance of tutorials, introductions and guides devoted to post-ES6 JavaScript? All these conferences, workshops, bootcamps where you get a chance to learn about <em>async/await</em> or <em>Redux</em>? The books and on-line courses? I think it shows how many people are struggling to grasp all these new JavaScript topics. </p><p>The point I’d like to make is that <strong>all of these new ideas in JavaScript are not new in terms of Computer Science</strong>. Therefore, you can really get ahead of others and future-proof your career by investing time into learning about existing, (superficially) less sexy, programming languages and frameworks.</p><p><img src="/images/2017/08/rxjs-1024x683.jpg" alt=""><br><strong>Source: <a href="https://imgflip.com/i/1ar013" target="_blank" rel="noopener">https://imgflip.com/i/1ar013</a></strong></p><h3 id="Revolution-in-JavaScript"><a href="#Revolution-in-JavaScript" class="headerlink" title="Revolution in JavaScript"></a>Revolution in JavaScript</h3><p>If you’ve been writing JavaScript for some time you must have noticed the revolution that is happening for some time. The dawn of ES6 (a.k.a. ECMAScript 2015) made JavaScript a much more complex language. Just look at the list of new language features at <a href="http://es6-features.org/" target="_blank" rel="noopener">es6-features.org</a> - it’s quite impressive given that you’re looking at a new version of existing language and not a completely new language. What’s more, you have to make more and more effort just to keep up with the language - <a href="https://thenewstack.io/whats-new-es2016/" target="_blank" rel="noopener">ECMAScript standard will now be updated every year</a>. </p><p>Although the 2016’s and 2017’s versions have not been as revolutionary as the 2015’s, the concepts introduced in them are definitely non-trivial. The explosion of new JavaScript frameworks doesn’t help. You can find all the new concepts introduced in Redux or RxJS intimidating even if you are a seasoned JavaScript developer.  </p><h3 id="The-new-old-ideas-in-JavaScript"><a href="#The-new-old-ideas-in-JavaScript" class="headerlink" title="The new-old ideas in JavaScript"></a>The new-old ideas in JavaScript</h3><p>There are far too many seemingly innovative concepts in JavaScript to mention all of them here. Instead, let me focus on a few examples just to give you the general idea.</p><h4 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h4><p>Promises in JavaScript were introduced as a cure to the so-called callback hell. Asynchrony in JavaScript is unavoidable. Before promises the only way to handle asynchronous operations was to pass callbacks as arguments to asynchronous functions (such as loading some data from the backend). Multiple asynchronous operations often mean that you must have multiple levels of nesting of callbacks which makes the code less readable and difficult to maintain. </p><p>Promises provide abstraction over a computation that might not have finished yet. Having such an abstraction lets you elegantly chain and compose async operations. This <a href="https://async-await.xyz/" target="_blank" rel="noopener">amazing animation</a> illustrates the concept (along with async/await): </p><p><img src="/images/2017/08/js-callbacks-promises-asyncawait-300x225.gif" alt=""> </p><p>The idea of promises is not new at all. In fact, a very similar concept (Tasks) has been present in C# since .NET Framework 4.0 (year 2010). Java had Futures long before that but they weren’t composable.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">task</span><br><span class="line">  .ContinueWith(t =&gt; GetMoreData()).Unwrap()</span><br><span class="line">  .ContinueWith(t =&gt; GetMoreData2(t.Result)).Unwrap()</span><br><span class="line">  .ContinueWith(t =&gt; t.Result.ToLower());</span><br></pre></td></tr></table></figure><p>Above you can see some C# code which uses Tasks (the equivalent of Promises). You have to admit that there are similarities with the JavaScript version. Rest assured that having understood the idea behind Tasks, wrapping your head around Promises is trivial.</p><h4 id="Reactive-programming"><a href="#Reactive-programming" class="headerlink" title="Reactive programming"></a>Reactive programming</h4><p>Reactive programming has been introduced into JavaScript in the form of the <a href="http://reactivex.io/" target="_blank" rel="noopener">RxJS</a> library. It became quite popular, even <a href="https://medium.com/google-developer-experts/angular-introduction-to-reactive-extensions-rxjs-a86a7430a61f" target="_blank" rel="noopener">making its way into the Angular framework</a>. </p><p><img src="/images/2017/08/reactive-stream-example-1024x482.png" alt=""><br><strong>Illustration of event stream processing. Source: <a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="noopener">http://reactivex.io/documentation/observable.html</a></strong></p><p>RxJS introduces the concept of Observables. It’s another way to handle asynchrony. Instead of setting up callbacks that should fire when some event happens you deal with a <strong>stream of events</strong>. It’s very powerful because you can perform different operations on that stream of events - for example filter out some events or join two event streams. En example of event is someone clicking something in your application. Reactive programming builds on the Observable pattern which has been with us since the dawn of Object Oriented Programming. I could find <a href="http://www.hanselman.com/blog/HanselminutesPodcast198ReactiveExtensionsForNETRxWithErikMeijer.aspx" target="_blank" rel="noopener">references to Rx.NET</a> (reactive extensions library for .NET) as early as from 2010. </p><p>Besides, reactive operators (such as map, filter or reduce) are derived directly from functional programming and languages as old as Haskel (1985). Below you can find a comparison between reactive code in JavaScript and .NET. Again, there are some minor differences but the concept is identical.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">observable.Select(n =&gt; n * n)</span><br><span class="line">          .Where(n =&gt; n % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">          .Zip(observable.Skip(<span class="number">1</span>), (x, y) =&gt; x * y);</span><br><span class="line"></span><br><span class="line">observable</span><br><span class="line">    .map(n =&gt; n * n)</span><br><span class="line">    .filter(n =&gt; n % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">        .zip(observable.skip(<span class="number">1</span>), (x, y) =&gt; x * y);</span><br></pre></td></tr></table></figure><h4 id="Async-await-and-generators"><a href="#Async-await-and-generators" class="headerlink" title="Async/await and generators"></a>Async/await and generators</h4><p>The async/await syntax is one more way to deal with asynchrony. It lets you write asynchronous code which looks as if it was synchronous! Here is an example from the Mozilla docs:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getProcessedData</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> v;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    v = <span class="keyword">await</span> downloadData(url); </span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    v = <span class="keyword">await</span> downloadFallbackData(url);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> processDataInWorker(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Async/await became part of JavaScript only recently - as part of the ES2017 standard. It has been present in C# since version 5 of the language (year 2012). Besides, async/await is strongly related to the concept of generators (another JavaScript novelty introduced in ES6). Generators were present in Python since version 2.2 (year 2001).</p><h4 id="Event-sourcing"><a href="#Event-sourcing" class="headerlink" title="Event sourcing"></a>Event sourcing</h4><p>Finally, an example not related to asynchronous programming. Redux is a library for managing complex state. Instead of representing your state as a mutable object(s) which changes whenever the user interacts or some data comes from the backend, you can look at it as a stream of immutable objects. Each consecutive object represents the new version of the state. New versions are produced by a <strong>reducer function</strong> which takes the previous version and an <strong>event</strong> and computes how the event affects the new shape of the state. </p><p>This idea borrows heavily from architectural patterns such as event sourcing and CQRS (as <a href="http://redux.js.org/docs/introduction/Motivation.html" target="_blank" rel="noopener">admitted</a> by Redux creators). This <a href="https://martinfowler.com/eaaDev/EventSourcing.html" target="_blank" rel="noopener">article from 2005</a> explains event sourcing in detail. I can’t point to any particular language here but chances are that if you have done any backend programming you might have heard about event sourcing long before it made its way into the JavaScript world.</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>These are just a few examples of seemingly new ideas in JavaScript which have actually been around for some time. I make a lot of references to .NET and C# because it is the language I know best but in fact C# is pretty progressive in terms of introducing new language features. I hope you feel convinced that spending some time to broaden your horizons and learn some backend language is totally worth it. If not, let me know your thoughts in the comments section! If you liked the article please consider sharing it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Modern-JavaScript-is-considered-hard&quot;&gt;&lt;a href=&quot;#Modern-JavaScript-is-considered-hard&quot; class=&quot;headerlink&quot; title=&quot;Modern JavaScript is
      
    
    </summary>
    
      <category term="Other topics" scheme="https://codewithstyle.info/categories/Other-topics/"/>
    
      <category term="Thoughts" scheme="https://codewithstyle.info/categories/Other-topics/Thoughts/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/Other-topics/Thoughts/Web/"/>
    
    
      <category term="javascript" scheme="https://codewithstyle.info/tags/javascript/"/>
    
      <category term="thoughts" scheme="https://codewithstyle.info/tags/thoughts/"/>
    
      <category term="fundamentals" scheme="https://codewithstyle.info/tags/fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Functional JavaScript part 6: immutable.js</title>
    <link href="https://codewithstyle.info/functional-javascript-part-6-immutable-js/"/>
    <id>https://codewithstyle.info/functional-javascript-part-6-immutable-js/</id>
    <published>2017-08-24T12:33:27.000Z</published>
    <updated>2019-12-02T21:26:20.067Z</updated>
    
    <content type="html"><![CDATA[<p>In the previous post we saw some techniques that can help us implement immutability. However, none of them feel very natural in plain, vanilla JavaScript. It doesn’t feel like the language and the standard library have been designed with immutability in mind. It’s not surprising given that one of the language’s main purposes was to <strong>mutate</strong> DOM (the Document Object Model). </p><p><img src="/images/2017/08/Zrzut-ekranu-2017-08-24-o-21.54.50-300x70.png" alt=""> </p><p>Fortunately, <a href="https://facebook.github.io/immutable-js/" target="_blank" rel="noopener">Immutable.js</a> comes to rescue. It is a library which makes working immutable objects much more natural. In this post we will learn how to use the library and how we can benefit from it. </p><p><strong>This post is part of the <a href="https://codewithstyle.info/functional-programming-javascript-plain-words/">Functional Programming in JavaScript series</a>.</strong></p><h3 id="Map-instead-of-object"><a href="#Map-instead-of-object" class="headerlink" title="Map instead of object"></a>Map instead of object</h3><p>Immutable.js introduces a few immutable data structures. Let’s focus on Map  which is an immutable version of plain JavaScript object. The name comes from the world of algorithms and data structures where we use it as a name for a structure which <em>maps</em> some keys to some values (just like a JavaScript object). It’s very easy to initialize a Map from a plain JavaScript object:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> product = Immutable.Map(&#123; <span class="attr">name</span>: <span class="string">"Product"</span>, <span class="attr">quantity</span>: <span class="number">10</span> &#125;);</span><br></pre></td></tr></table></figure><p>We must not use assignment operator with a Map object’s properties. Instead, we should call the set  method on it.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> product = Immutable.Map(&#123; <span class="attr">name</span>: <span class="string">"U-lock"</span>, <span class="attr">quantity</span>: <span class="number">10</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> updatedProduct = product.set(<span class="string">"category"</span>, <span class="string">"safety"</span>);</span><br></pre></td></tr></table></figure><p>As expected set will not mutate the original object. Instead, it will return a new updated object. We can easily return to the world of plain JavaScript objects with toJS:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">updatedProduct.toJS();</span><br></pre></td></tr></table></figure><h3 id="Nested-objects"><a href="#Nested-objects" class="headerlink" title="Nested objects"></a>Nested objects</h3><p>There are many interesting operations available on Map. For example, setIn works great with deeply nested objects. Imagine having an object with several levels of nesting and having to update a property residing in a deeply nested object.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> employee = &#123;</span><br><span class="line">  name: <span class="string">"John"</span>,</span><br><span class="line">  reportsTo: &#123;</span><br><span class="line">    name: <span class="string">"Alice"</span>,</span><br><span class="line">    reportsTo: &#123;</span><br><span class="line">      name: <span class="string">"Bob"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> immutableEmployee = Immutable.fromJS(employee);</span><br><span class="line"><span class="keyword">const</span> updatedEmployee = immutableEmployee.setIn([<span class="string">"reportsTo"</span>, <span class="string">"reportsTo"</span>], <span class="string">"Celine"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(updatedEmployee.toJS());</span><br></pre></td></tr></table></figure><p>First of all, note that we’ve used fromJS  instead of Map . This is because Map only works shallowly - when it sees a property that’s a reference to an object it doesn’t convert it to Map but jest leaves it as it is. On the other hand fromJS  will always traverse all levels of nesting. As you can see setIn takes an array of strings defining the path of properties leading to the value we are interested in. The second argument is the value we want to set the property to. Obviously setIn doesn’t mutate the object but returns a fresh copy instead.</p><h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><p>We haven’t yet discussed immutability of arrays. In the previous chapters we’ve talked about how to avoid mutating objects. What about arrays? Basic array operations in vanilla JavaScript are mutable - they update the array in-place:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">numbers.push(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>An immutable version of push would have to clone the array first and add the element to the new copy. We’ve already discussed a similar approach when talking about sort in the <a href="https://codewithstyle.info/functional-javascript-part-4-lodash/">chapter about lodash</a>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">immutablePush</span>(<span class="params">arr, newElement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arrCopy = arr.slice(<span class="number">0</span>);</span><br><span class="line">  arrCopy.push(newElement);</span><br><span class="line">  <span class="keyword">return</span> arrCopy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The ES6 spread operator lets us do this in a more concise way. It’s like the object spread operator - it “unwraps” array elements and lets you put them directly in another list.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newNumbers = [...numbers, <span class="number">7</span>];</span><br></pre></td></tr></table></figure><p>But how about adding an element in the middle of an array? It gets a little messy.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newNumbers = [...numbers.slice(<span class="number">0</span>, <span class="number">2</span>), <span class="number">7</span>, ...numbers.slice(<span class="number">3</span>)];</span><br></pre></td></tr></table></figure><p>Immutable.js simplifies immutable array operations by introducing a List object. List has methods similar to array’s but all of them are immutable and return a fresh copy instead of mutating the list.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbersList = Immutable.List([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"><span class="keyword">const</span> newNumbersList = numbersList.insert(<span class="number">2</span>, <span class="number">99</span>);</span><br></pre></td></tr></table></figure><p>List has many useful methods which make working with it in immutable way easier than working with arrays.</p><h3 id="Structural-sharing"><a href="#Structural-sharing" class="headerlink" title="Structural sharing"></a>Structural sharing</h3><p>We haven’t touched on an important drawback of immutability yet - performance. Cloning objects in JavaScript is expensive. With immutability we have to use cloning a lot since we aren’t allowed to mutate objects. This is especially painful if you have to deal with large objects and only want to update a single property. In such case you would need to re-create the whole object anyway. Fortunately, Immutable.js tries to address the issue by using various optimization techniques including <strong>structural sharing</strong>. It stores Maps in such a way that when you update some property you get a reference to a new Map which shares some of the data with the old Map. Since Maps are immutable this isn’t a problem - we don’t need to worry that the shared part will be accidentaly modified.</p><h3 id="Benchmark"><a href="#Benchmark" class="headerlink" title="Benchmark"></a>Benchmark</h3><p>I have created a benchmark in order to measure the performance of Immutable.js. In this benchmark I create an array of 100000 moderately complex objects. Next, I compare the performance of changing a single property of this object in one of 3 ways:</p><ol><li>Simply mutate the object (the mutable way) - <strong>224 test runs/second</strong></li><li>Deep clone using spread operator - <strong>2.36 test runs/second</strong></li><li>Clone using Immutable.js - <strong>4.97 test runs/second</strong></li></ol><p>We can see that all immutable options are much, much slower than simply mutating the object. This is because of the cost of cloning objects. However, we can also see that cloning with Immutable.js is two times faster than using the spread operator. The benchmark does not take into consideration the fact that in order to use Immutable.js our array of objects had to be converted into an array of Maps which is a quite expensive operation. The results would be much worse in such case. Therefore, it makes sense to use Immutable.js all the way throughout your application in order to avoid converting between Immutable.js data structures and vanilla JavaScript data structures. The benchmark is publicly available. Feel free to play with it: <a href="https://jsperf.com/immutability-performance-nested-objects/1" target="_blank" rel="noopener">https://jsperf.com/immutability-performance-nested-objects/1</a></p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>This post was a quick introduction to Immutable.js. We’ve learned about immutable data structures such as Map and List, how to perform operations on them and how Immutable.js approaches performance issues related to immutability. It’s understandable if the posts about Immutability seem a little abstract so far. In the next post we will fix it - you will see how useful can it be on an example of Redux. If you have any issues understanding anything in this post or if you simply would like to provide feedback, please leave a comment below. I want this course to be as good as possible and I need your help for that! If you found this post helpful, please consider sharing it on Facebook or Twitter.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In the previous post we saw some techniques that can help us implement immutability. However, none of them feel very natural in plain, va
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://codewithstyle.info/categories/JavaScript/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/JavaScript/Web/"/>
    
    
      <category term="functional programming" scheme="https://codewithstyle.info/tags/functional-programming/"/>
    
      <category term="immutability" scheme="https://codewithstyle.info/tags/immutability/"/>
    
  </entry>
  
  <entry>
    <title>Functional JavaScript part 5: immutability basics</title>
    <link href="https://codewithstyle.info/functional-javascript-part-5-immutability-basics/"/>
    <id>https://codewithstyle.info/functional-javascript-part-5-immutability-basics/</id>
    <published>2017-08-17T18:32:59.000Z</published>
    <updated>2019-12-02T21:26:20.066Z</updated>
    
    <content type="html"><![CDATA[<p>In previous posts we’ve discussed how to deal with arrays in a functional way. We’ve learned about an important concept in Functional Programming: higher order functions. Let’s now tackle another very important concept: immutability. </p><p><strong>This post is part of the <a href="https://codewithstyle.info/functional-programming-javascript-plain-words/">Functional Programming in JavaScript series</a>.</strong></p><h3 id="What-is-immutability"><a href="#What-is-immutability" class="headerlink" title="What is immutability?"></a>What is immutability?</h3><p>Immutability is a fancy name for a specific rule for writing code. This rule says: <em>never change a value or reference once it has been assigned</em>. There are many reasons why you might decide to decide to use immutability. Most importantly, it makes your code easier to reason about. When working with traditional code with mutations, every time you call some function and pass an object to it, you have to assume that the function might change some property in the object you’ve passed. Such changes might be surprising, especially when some other developer is working on that function.</p><h4 id="Example-of-issues-with-mutability"><a href="#Example-of-issues-with-mutability" class="headerlink" title="Example of issues with mutability"></a>Example of issues with mutability</h4><p>If you decide to embrace immutability in your code base you can be sure that if you pass an object to a function, none of its properties will be changed. Less surprises and less possibilities of error. Let’s see an example:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setShipmentAddress</span>(<span class="params">person, product</span>) </span>&#123;</span><br><span class="line">  product.shipmentAddress = person.address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Assume that we are using this function somewhere in our code. It’s part of a common library and another developer is responsible for it so we don’t bother looking at the source code. One day, the developer is told that the product’s address should always be in upper case. Let’s assume he’s not terribly careful and decides to implement it this way:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setShipmentAddress</span>(<span class="params">product, person</span>) </span>&#123;</span><br><span class="line">  person.address = person.address.toLowerCase();</span><br><span class="line">  product.shipmentAddress = person.address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You don’t bother to look at the source code and start using the function straight away. Initially, it looks good - the function has assigned a lowercase address to product. However, after deployment to production you start receiving bug reports - why is person’s address displayed in lower case? Oh, wait…</p><h4 id="Immutable-solution"><a href="#Immutable-solution" class="headerlink" title="Immutable solution"></a>Immutable solution</h4><p>All this mess could be avoided if you agreed on the immutability rule. In such case the other developer would have to implement setShipmentAddress in such a way that it would not mutate any of the input objects. Instead, it would return a fresh product object with updated address. You could then assume that this function will never change either product  nor person so the above situation would never happen!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setShipmentAddress</span>(<span class="params">product, person</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name: product.name,</span><br><span class="line">    quantity: product.quantity,</span><br><span class="line">    shipmentAddress: person.address</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can see that with immutability we have a clear separation of function’s inputs and outputs. This is a very simplified example. In reality such <strong>unintentional side effects</strong> can be much more subtle and have much worse consequences. Let’s see how to avoid them at all thanks to immutability.</p><h3 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a>Constants</h3><p>We will start small and have a look at simple variables. Variables in JavaScript are obviously mutable - once you assign an object or value to a given variable, you are free to change it at any point in the future. ES6 introduced a new keyword to the language: const. It is meant to be used in place of the var keyword. Declaring a variable as const  means that you cannot change it in the future!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line">a = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>Running the above code results in an error:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught TypeError: Assignment to constant variable.</span><br></pre></td></tr></table></figure><p>You might be wondering why anyone would use one such thing. The main advantage is that it helps you avoid situations in which you accidentally change an existing variable. What’s more, it expresses your intentions better. If you mark a variable as const and then another developer comes and wants to change your code in a way that would require reassignment on that variable, they will realize that wasn’t your intention. They will think twice before making the change.</p><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>Let’s look at a code piece from one of the previous chapters:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> safetyProducts = _.filter(products, p =&gt; p.category === <span class="string">"Safety"</span>);</span><br><span class="line"><span class="keyword">var</span> quantities = _.map(safetyProducts, p =&gt; p.quantity);</span><br><span class="line"><span class="keyword">var</span> bigQuantites = _.filter(quantities, q =&gt; q &gt; <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>Here we declare three variables and each of them is used only once. It will never make sense to re-assign to them. Therefore, it makes sense to change them to const.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> safetyProducts = _.filter(products, p =&gt; p.category === <span class="string">"Safety"</span>);</span><br><span class="line"><span class="keyword">const</span> quantities = _.map(safetyProducts, p =&gt; p.quantity);</span><br><span class="line"><span class="keyword">const</span> bigQuantites = _.filter(quantities, q =&gt; q &gt; <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>Note that this code piece was already written in functional style. Using const  often makes sense when dealing with functional code. One final remark about const is that while it guarantees that the variable cannot be changed, it doesn’t say anything about the object (or array) assigned to that variable. Therefore, this code would be perfectly legal:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> product = &#123;</span><br><span class="line">  name: <span class="string">"U-lock"</span>,</span><br><span class="line">  quantity: <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">product.quantity = <span class="number">15</span>;</span><br></pre></td></tr></table></figure><p>This is because the variable stores a reference to an object. We only mark the reference as immutable but not the object.</p><p><img src="/images/2017/08/const-and-references-1.png" alt="" title="const and references"></p><h3 id="Freezing-objects"><a href="#Freezing-objects" class="headerlink" title="Freezing objects"></a>Freezing objects</h3><p>How do we implement immutable objects in JavaScript then? We can use the Object.freeze method. It’s job is to mark all properties as read-only and prevent adding new properties.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> john2 = &#123;</span><br><span class="line">  name: <span class="string">"John"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.freeze(john2);</span><br><span class="line">john2.age = <span class="number">33</span>;</span><br><span class="line"><span class="built_in">console</span>.log(john2); <span class="comment">// prints &#123;name: "John", age: 25&#125;</span></span><br></pre></td></tr></table></figure><p>As we can see the age property was <strong>not</strong> changed. If we enabled strict mode this code would throw an error.</p><h3 id="Don’t-mutate-clone"><a href="#Don’t-mutate-clone" class="headerlink" title="Don’t mutate, clone"></a>Don’t mutate, clone</h3><p>Ok, but how can we implement “changes” to frozen object? Instead of mutating it we will simply return a new copy with applied changes. How to implement this, though? One of the ways would be:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buyProduct</span>(<span class="params">product</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name: product.name,</span><br><span class="line">    quantity: product.quantity - <span class="number">1</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>However, imagine having an object with 50 properties. We would need to rewrite them all!</p><h4 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a><code>Object.assign</code></h4><p>Let’s have a look at some more clever ways to do this. The first option is to use the Object.assign  method introduced in ES6. Object.assign takes a target object and a source object(s) and copies all properties from the source object(s) to the target object.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> product = &#123;</span><br><span class="line">  name: <span class="string">"U-lock"</span>,</span><br><span class="line">  quantity: <span class="number">10</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(product, &#123; <span class="attr">category</span>: <span class="string">"Safety"</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(product);</span><br></pre></td></tr></table></figure><p>This code will print the following result to the console:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">name</span>: <span class="string">"U-lock"</span>, <span class="attr">quantity</span>: <span class="number">10</span>, <span class="attr">category</span>: <span class="string">"Safety"</span>&#125;</span><br></pre></td></tr></table></figure><p>Wait, but we are mutating the product object here, right? That’s correct. However, we can use a little trick to return a new object instead of mutating the existing one. We can easily specify a new, empty object as the source object:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> categorizedProduct = <span class="built_in">Object</span>.assign(&#123;&#125;, product, &#123; <span class="attr">category</span>: <span class="string">"Safety"</span> &#125;);</span><br></pre></td></tr></table></figure><p>Here we are providing two source objects and an empty target object. All of the properties from the source objects will be copied to the target empty object. As a result we get a fresh object with all the properties of product and the new category  property. It’s important to note that Object.assign  performs <strong>shallow</strong> assignment. If we have a nested object in one of the sources than it will <strong>not</strong> be cloned. Is it good or bad? It depends on our use case.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> john = &#123;</span><br><span class="line">  name: <span class="string">"John"</span>,</span><br><span class="line">  age: <span class="number">25</span>,</span><br><span class="line">  address: &#123;</span><br><span class="line">    street: <span class="string">"Wynalazek"</span>,</span><br><span class="line">    city: <span class="string">"Warsaw"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> alice = <span class="built_in">Object</span>.assign(&#123;&#125;, john, &#123; <span class="attr">name</span>: <span class="string">"Alice"</span> &#125;);</span><br><span class="line">alice.address.city = <span class="string">"London"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(john.address.city); <span class="comment">// "London"</span></span><br></pre></td></tr></table></figure><h4 id="Object-spread-operator"><a href="#Object-spread-operator" class="headerlink" title="Object spread operator"></a>Object spread operator</h4><p>This is actually not part of the JavaScript specification (yet). It is part of a <a href="https://github.com/tc39/proposal-object-rest-spread" target="_blank" rel="noopener">proposal</a> and will likely make it to one of the future JavaScript versions. However, it’s already supported in most modern browsers. Object spread operator is an even more convenient way of applying changes to objects without having to mutate them. Let’s see an example:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> alice2 = &#123; ...john, <span class="attr">name</span>: <span class="string">"Alice"</span> &#125;;</span><br></pre></td></tr></table></figure><p>This new syntax can be roughly translated into: take all properties from john object, combine them with the new name property and put it all in the new object. The three dots are applied to an object in order to “unwrap” its properties. Since such “unwrapped” properties cannot live on their own, they should always be put within curly braces. But curly braces always create a new object hence we will get a fresh object with copied properties. We don’t need to add any new property. This line would simply clone john :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> johnCopy = &#123; ...john &#125;;</span><br></pre></td></tr></table></figure><p>Just as in the case of Object.assign  we have to pay special attention to nested objects.</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>In this post we’ve discussed four techniques which can help us write immutable code: constants, Object.freeze, Object.assign  and object spread operator. The last two techniques do not enforce immutability but rather make it easier to implement. I hope you agree with me that there are some benefits to using immutability. If you’re still not convinced, bear with me until we talk about Redux which unleashes the full potential of immutability. Before that, we will take a look at Immutable.js - a library which can make writing immutable code feel much more natural. </p><p>If you have any issues understanding anything in this post or if you simply would like to provide feedback, please leave a comment below. I want this course to be as good as possible and I need your help for that! If you found this post helpful, please consider sharing it on Facebook or Twitter.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In previous posts we’ve discussed how to deal with arrays in a functional way. We’ve learned about an important concept in Functional Pro
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://codewithstyle.info/categories/JavaScript/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/JavaScript/Web/"/>
    
    
      <category term="javascript" scheme="https://codewithstyle.info/tags/javascript/"/>
    
      <category term="immutability" scheme="https://codewithstyle.info/tags/immutability/"/>
    
  </entry>
  
  <entry>
    <title>Functional JavaScript part 4: lodash</title>
    <link href="https://codewithstyle.info/functional-javascript-part-4-lodash/"/>
    <id>https://codewithstyle.info/functional-javascript-part-4-lodash/</id>
    <published>2017-08-12T08:17:25.000Z</published>
    <updated>2019-12-02T21:26:20.066Z</updated>
    
    <content type="html"><![CDATA[<p>With this post we will finalize the part of this course devoted to array operations Vanilla JavaScript provides us with some higher order functions (such as forEach , filter , map and reduce). However, there are actually many more such functions in the world of functional programming. <a href="https://lodash.com/" target="_blank" rel="noopener">Lodash</a> is a library which extends your arsenal of higher order functions. Let’s have a look at how to use it in practice. </p><p><strong>This post is part of the <a href="https://codewithstyle.info/functional-programming-javascript-plain-words/">Functional Programming in JavaScript series</a>.</strong></p><h3 id="Exploring-lodash"><a href="#Exploring-lodash" class="headerlink" title="Exploring lodash"></a>Exploring lodash</h3><p>The best place to explore functions available in lodash is the <a href="https://lodash.com/docs/" target="_blank" rel="noopener">documentation</a>. You will notice that there are many expandable sections on the left hand side. For now let’s focus on <strong>Array</strong> and <strong>Collection</strong>. </p><p><img src="/images/2017/08/lodash_documentation-1024x612.png" alt=""></p><h3 id="Using-lodash"><a href="#Using-lodash" class="headerlink" title="Using lodash"></a>Using lodash</h3><p>Lodash methods are not available directly on the array object. It could be achieved with JavaScript’s prototypical inheritance but it’s not considered a good practice to extend native prototypes (actually, it’s disputable but <a href="https://github.com/lodash/lodash/issues/409" target="_blank" rel="noopener">lodash creators decided not to do this</a>). Therefore, in order to use a lodash method we need to call it on the global _  object. You may note that this will make chaining less convenient but there is a cure for that - we’ll look at it at the end of this post. Let’s see a usage example:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(_.drop(numbers, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>Drop function takes an array and a number of elements to drop. It returns a new array that doesn’t contain the first n  elements. As a side note, it’s actually not a higher order function since it doesn’t take a function as argument.</p><h3 id="Validation-with-every-and-any"><a href="#Validation-with-every-and-any" class="headerlink" title="Validation with every and any"></a>Validation with every and any</h3><p>Let’s consider the following requirement: <em>we’re running a bike parts shop. W__e are given a list of items in the customer’s shopping cart. We should validate that he is ordering at least one piece of each item.</em> All of the imperative approaches to this problem I can think of are a little clumsy. We could either:</p><ul><li>count the items with quantity equal to 0 and check if the number is equal to zero</li><li>have a separate function in which we iterate over the items and return early if we encounter one with quantity equal to 0</li></ul><p>Let’s see how we can use lodash in order to solve it in an elegant way:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> basket = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"Cable Lock"</span>, <span class="attr">quantity</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"U Lock"</span>, <span class="attr">quantity</span>: <span class="number">5</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"Tail Light"</span>, <span class="attr">quantity</span>: <span class="number">0</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!_.every(basket, item =&gt; item.quantity &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">  alert(<span class="string">"You must order at least 1 piece of each item"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Function every takes a function that evaluates to true or false, applies this function on all elements and returns true only if the function was true on all elements. In other words, it checks whether <strong>every</strong> element satisfies given condition. In fact, what we want to do is to check if it is not true that every element satisfies given condition. Therefore, we can check whether there are <strong>some</strong> elements that don’t satisfy our condition (the condition being quantity greater than 0).</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (_.some(basket, item =&gt; item.quantity == <span class="number">0</span>)) &#123;</span><br><span class="line">  alert(<span class="string">"You must order at least 1 piece of each item"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Which results in even cleaner and more readable code. Doesn’t it feel a bit like writing in natural language?</p><h3 id="Grouping-with-groupBy"><a href="#Grouping-with-groupBy" class="headerlink" title="Grouping with groupBy"></a>Grouping with groupBy</h3><p>Here comes another requirement! <em>We’ve received a list of available products from some backend API. It would be nice to display them in separate boxes based on the category they belong to.</em> The imperative solution is particularly verbose:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> products = [</span><br><span class="line"> &#123; <span class="attr">name</span>: <span class="string">"Cable Lock"</span>, <span class="attr">category</span>: <span class="string">"Safety"</span> &#125;,</span><br><span class="line"> &#123; <span class="attr">name</span>: <span class="string">"U Lock"</span>, <span class="attr">category</span>: <span class="string">"Safety"</span> &#125;,</span><br><span class="line"> &#123; <span class="attr">name</span>: <span class="string">"Tail Light"</span>, <span class="attr">category</span>: <span class="string">"Basics"</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> productsByCategory = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; products.length; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> category = products[i].category;</span><br><span class="line">  <span class="keyword">if</span> (!productsByCategory.hasOwnProperty(category))   &#123;</span><br><span class="line">    productsByCategory[category] = [];</span><br><span class="line">  &#125;</span><br><span class="line">  productsByCategory[category].push(products[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(productsByCategory);</span><br></pre></td></tr></table></figure><p>We create an empty object (productsByCategory) in which we will store the results - keys will represent categories and for each key we will store an array of products. Next, we iterate over the products. For each product we check whether we already have an entry in the productsByCategory object. If we don’t then we need to create it and initialize it with an empty array. Finally, we add the product to the list under its category. The result will look like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">Safety</span>: <span class="built_in">Array</span>(<span class="number">2</span>), <span class="attr">Basics</span>: <span class="built_in">Array</span>(<span class="number">1</span>)&#125;</span><br></pre></td></tr></table></figure><p>I bet you’re expecting the functional version to be much simpler - and it is. Yes, it’s a single line again.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> productsByCategory = _.groupBy(products, product =&gt; product.category);</span><br></pre></td></tr></table></figure><p>The function takes an array and a function which determines how to group the elements of that array. The grouping functions is evaluated for each element. Those elements for which the same value is returned are packed into separate groups. Finally, an object is returned with keys equal to unique values returned by the grouping function applied on all of the elements. </p><p><img src="/images/2017/08/drawit-diagram.png" alt="" title="drawit diagram"> </p><p>The grouping function does not have to be a simple property selector - we can put any sort of expression in it. For example, it’s trivial to split products into groups based on the length of their names:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> productsByNameLength = _.groupBy(products, product =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (product.name.length &lt; <span class="number">10</span>) <span class="keyword">return</span> <span class="string">"short"</span>;</span><br><span class="line">  <span class="keyword">if</span> (product.name.length &gt;= <span class="number">10</span> &amp;&amp; product.name.length &lt; <span class="number">20</span>) <span class="keyword">return</span> <span class="string">"medium"</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"long"</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Sorting-with-orderBy"><a href="#Sorting-with-orderBy" class="headerlink" title="Sorting with orderBy"></a>Sorting with orderBy</h3><p>The last useful function I’d like you to look at is orderBy. As the name suggests, it let’s you sort an array. Vanilla JavaScript already has a sort  function built-in. orderBy  is more convenient to use and more functional in its nature. Firstly, while sort  orders the array in-place, orderBy  doesn’t modify the existing array but returns a fresh copy. Secondly, sort takes a comparator function - a function which takes two elements and compares them. orderBy  is more consistent with other functions we’ve looked at - it takes a function which selects the value to use for ordering. Let’s say that we would like to have a fresh copy of our products array sorted by quantity. Without lodash we would need to do the following:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sortedBasket = basket.slice(<span class="number">0</span>);</span><br><span class="line">sortedBasket.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.quantity - b.quantity);</span><br><span class="line"><span class="built_in">console</span>.log(sortedBasket);</span><br></pre></td></tr></table></figure><p>In the first line we use slice  in order to clone the array. slice  is for cutting out slices of an array. We can tell it to cut out the whole array as a slice which will give as a copy of this array. Next we call sort  providing a comparator function. This comparator takes two elements and returns a negative number if the first element is smaller than the second, positive number if the second element is smaller and 0 if the elements are equal. By subtracting the second element from the first we will achieve the desired behavior. Let’s now see a lodash solution:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sortedBasket = _.orderBy(basket, item =&gt; item.quantity);</span><br></pre></td></tr></table></figure><p>Here we just specify that we want to use the quantity property for sorting. The original array will remain as it was. You might be wondering why it can be important to not change the original array. One important aspect of functional programming is <strong>immutability</strong>. The idea is to never modify existing objects but instead return new copies. It might sound wasteful but in fact it has many advantages. We will take a deeper look at immutability in the posts to come. For now, here are a few practical examples of when it’s required to not sort an array in-place.</p><ul><li>One example would be passing an array between two Angular components - we don’t want one of the components to modify internal state of another component</li><li>Another example is Redux where we are not allowed to mutate state as we always have to return a fresh copy of the state; there will be a separate chapter dedicates solely to Redux</li></ul><h3 id="Chaining"><a href="#Chaining" class="headerlink" title="Chaining"></a>Chaining</h3><p>I’ve already mentioned that with lodash syntax it’s no longer as easy to chain method calls as with vanilla Javascript. However, lodash has solved this problem. Let’s see an example:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> safetyProducts = _.filter(products, p =&gt; p.category === <span class="string">"Safety"</span>);</span><br><span class="line"><span class="keyword">var</span> quantities = _.map(safetyProducts, p =&gt; p.quantity);</span><br><span class="line"><span class="keyword">var</span> bigQuantites = _.filter(quantities, q =&gt; q &gt; <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>We have three consecutive lodash calls here. It would be nice to chain these calls so that the data flow would be more readable.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bigQuantites = _.chain(products)</span><br><span class="line">  .filter(<span class="function"><span class="params">p</span> =&gt;</span> p.category === <span class="string">"Safety"</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">p</span> =&gt;</span> p.quantity)</span><br><span class="line">  .filter(<span class="function"><span class="params">q</span> =&gt;</span> q &gt; <span class="number">10</span>)</span><br><span class="line">  .value();</span><br></pre></td></tr></table></figure><p>Here we use the chain  method to wrap our array in a special object that knows about all the lodash methods. Next, we can simply call lodash methods directly on this object. At the end we need to unwrap our array by calling value.</p><p><img src="/images/2017/08/lodash-chaining.png" alt="" title="lodash chaining"></p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>And that’s all about lodash. Of course, there is much, much more in it and I strongly encourage you to explore it using the documentation. Since you already know the concept of higher order functions understanding the remaining functions will be much easier for you. I hope you find higher order functions on arrays useful and fun. They’re really worth learning and understanding since the concept is very widespread. The investment will pay off in random places (for example when learning RxJS). </p><p>How to use functional array operations? From now on, every time you find yourself writing a for loop, stop for a moment and try to figure out if you can write it using in a more functional style. The cases when it’s not possible or beneficial are very, very rare. This post concludes the chapter about array operations. Next we will take a look at immutability in JavaScript! </p><p>If you have any issues understanding anything in this post or if you simply would like to provide feedback, please leave a comment below. I want this course to be as good as possible and I need your help for that! If you found this post helpful, please consider sharing it on Facebook or Twitter.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;With this post we will finalize the part of this course devoted to array operations Vanilla JavaScript provides us with some higher order
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://codewithstyle.info/categories/JavaScript/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/JavaScript/Web/"/>
    
    
      <category term="javascript" scheme="https://codewithstyle.info/tags/javascript/"/>
    
      <category term="functional programming" scheme="https://codewithstyle.info/tags/functional-programming/"/>
    
      <category term="lodash" scheme="https://codewithstyle.info/tags/lodash/"/>
    
  </entry>
  
  <entry>
    <title>Functional JavaScript part 3: reduce</title>
    <link href="https://codewithstyle.info/functional-javascript-part-3-reduce/"/>
    <id>https://codewithstyle.info/functional-javascript-part-3-reduce/</id>
    <published>2017-08-04T08:00:53.000Z</published>
    <updated>2019-12-02T21:26:20.066Z</updated>
    
    <content type="html"><![CDATA[<p>In the <a href="http://codewithstyle.info/functional-javascript-part-2-array-operations/">previous post</a> we’ve looked at three very useful functions: forEach, map and filter. Let’s now look at reduce  - a bit more complicated function which shows the real power of functional programming. </p><p><strong>This post is part of the <a href="https://codewithstyle.info/functional-programming-javascript-plain-words/">Functional Programming in JavaScript series</a>.</strong></p><h3 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h3><p>I will describe to you a real-world problem which my colleague was dealing with at work. He was working on a filtering mechanism where the user could define conditions on a column in a table. The column would usually be mapped to a property of an object. However, it should also support nested properties. At some point in his code, he had to solve the following problem: <em>given a string representing the path of nested properties in an object, return the value of that nested property</em>. We can’t assume anything about the length of the path - properties can be arbitrarily nested. For example, given path author.address.city.size  and object:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  author: &#123;</span><br><span class="line">    name: <span class="string">"John"</span>,</span><br><span class="line">    address: &#123;</span><br><span class="line">      street: <span class="string">"Postępu"</span>,</span><br><span class="line">      city: &#123;</span><br><span class="line">        name: <span class="string">"Warsaw"</span>,</span><br><span class="line">        size: <span class="string">"large"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This function should return “large”. As usual, let’s first approach the problem in a traditional, imperative way.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="string">"author.address.city.size"</span>;</span><br><span class="line"><span class="keyword">var</span> pathParts = path.split(<span class="string">"."</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> current = book;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; pathParts.length; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> currentPart = pathParts[i];</span><br><span class="line">  current = current[currentPart];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(current);</span><br></pre></td></tr></table></figure><p>Firstly, we split the path so that instead of a single string, we deal with an array where each element is a single property in consecutively nested object. Next, we initialize a helper variable current to the object which we wish to inspect (book  in our case). This variable will store the currently nested objects as we descend deeper and deeper inside the object. We iterate over the path parts and for each part we use it to go one level deeper. Once we are done, we end up with the desired value. And here comes the functional version:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pathParts.reduce(<span class="function">(<span class="params">current, currentPart</span>) =&gt;</span> current[currentPart], book);</span><br></pre></td></tr></table></figure><p>A single line! Isn’t it awesome? Ok, I cheated a bit by omitting some code, but it’s still one line versus four.</p><h3 id="But-how-does-it-work"><a href="#But-how-does-it-work" class="headerlink" title="But how does it work?"></a>But how does it work?</h3><p>With previous higher-order functions (forEach , map  and filter) we passed a function to be applied on each element. This time it is a bit different. We pass a function which takes two arguments - an <strong>accumulator</strong> and the currently processed element. What is accumulator? It is a value which represents the intermediate result of processing. Reduce looks at consecutive elements of the provided array. The accumulator should always hold a valid result for all elements processed so far. In other words, accumulator accumulates the results of processing consecutive array elements. </p><p>It’s easiest to understand when compared with the imperative code above. The current  variable is actually an accumulator. For every loop step, we take the current level on nesting (stored in the accumulator) and use it to get to the next level of nesting. Then, we store the result as the new accumulator. Reduce follows exactly the same process but it hides the details of looping and initializing the accumulator. Let’s have a deeper look at how reduce  should be called. It takes two parameters:</p><ul><li><strong>reducer function</strong> which transforms the current accumulator value and an array’s element to next accumulator - it encapsulates the loop step in the imperative code where we did exactly the same thing - processed the next array element and produced a new accumulator</li><li><strong>initial accumulator</strong> - because we need to start with some value of accumulator (as in the imperative code, where we initialize current = book)</li></ul><h3 id="Another-example"><a href="#Another-example" class="headerlink" title="Another example"></a>Another example</h3><p>Let’s have a look at another example in which we will use reduce  in a different way. Our use case is much simpler now: <em>take an array of numbers and return a sum of its elements</em>. Pause for a moment now and try to come up with a way to use reduce  to solve this problem. Let’s try to figure out what should we store in the accumulator. I’ve already said that for every step the accumulator should store the valid result for the currently processed array elements. In our case the <em>result</em> is the sum of currently processed elements - that’s exactly what we will store in the accumulator. Next, let’s see what the reducer function should do. </p><p>As we know, it should take the current array element and the accumulator and produce the new accumulator. Since we agreed that the accumulator will store the sum of elements processed so far, then in order to produce a new accumulator we simply need to add the current array element to the old accumulator! <img src="/images/2017/08/reduce-explained.png" alt="" title="reduce explained"> Finally, the initial accumulator value. Since we’re going to add array elements to it, so it’s best to initialize it simply to 0. Wrapping it up, this is how our reduce  call should look like:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> sum = numbers.reduce(<span class="function">(<span class="params">accumulator, currentNumber</span>) =&gt;</span> accumulator + currentNumber);</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>In this article I’ve explained one of the most powerful concepts of functional programming - the reduce  function. Reduce has abundance of applications. <a href="http://redux.js.org/docs/introduction/" target="_blank" rel="noopener">Redux</a> is based exactly on this concept. In Redux, we write reducer functions which take the current state and an action and produce a new state. Does it sound familiar now? I will dedicate a separate episode of this course to Redux, so stay tuned. Another great example is the <a href="https://en.wikipedia.org/wiki/MapReduce" target="_blank" rel="noopener">MapReduce</a> programming model used in parallel processing of large data sets. I hope I’ve got you at least a little bit excited about reduce :-) </p><p>I will conclude the part about array operations with <a href="https://codewithstyle.info/functional-javascript-part-4-lodash/">a post about lodash</a> - a library which extends the collection of higher order functions available in vanilla JavaScript with many more operations.</p><p>If you have any issues understanding anything in this post or if you simply would like to provide feedback, please leave a comment below. I want this course to be as good as possible and I need your help for that! If you found this post helpful, please consider sharing it on Facebook or Twitter.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In the &lt;a href=&quot;http://codewithstyle.info/functional-javascript-part-2-array-operations/&quot;&gt;previous post&lt;/a&gt; we’ve looked at three very us
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://codewithstyle.info/categories/JavaScript/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/JavaScript/Web/"/>
    
    
      <category term="javascript" scheme="https://codewithstyle.info/tags/javascript/"/>
    
      <category term="functional programming" scheme="https://codewithstyle.info/tags/functional-programming/"/>
    
      <category term="lodash" scheme="https://codewithstyle.info/tags/lodash/"/>
    
  </entry>
  
  <entry>
    <title>Functional JavaScript part 2: array operations</title>
    <link href="https://codewithstyle.info/functional-javascript-part-2-array-operations/"/>
    <id>https://codewithstyle.info/functional-javascript-part-2-array-operations/</id>
    <published>2017-08-02T11:48:27.000Z</published>
    <updated>2019-12-02T21:26:20.066Z</updated>
    
    <content type="html"><![CDATA[<p>In the <a href="http://codewithstyle.info/functional-javascript-part-1-introduction/">first post of the series</a>, we’ve discussed which elements of the JavaScript language might be useful when writing functional code. Let’s now see the most obvious example of functional programming in JavaScript - array operations. </p><p><strong>This post is part of the <a href="https://codewithstyle.info/functional-programming-javascript-plain-words/">Functional Programming in JavaScript series</a>.</strong></p><h3 id="Imperative-approach-to-arrays"><a href="#Imperative-approach-to-arrays" class="headerlink" title="Imperative approach to arrays"></a>Imperative approach to arrays</h3><p>Arrays are a basic programming construct present in most of programming languages. They let us deal with situations where we need to store or operate on multiple instances of some piece of data. As I already explained, imperative programming is all about executing instructions in a sequence. We can use various kinds of loops to deal with arrays. Usually, the loop body describes what to do to each element of an array. Let’s have a look at the for loop in JavaScript. The below example iterates over an array and prints each element.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> books = [ <span class="string">"Gone with the Wind"</span>, <span class="string">"War and Peace"</span> ]; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; books.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(books[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This code looks very familiar. Is there anything wrong with it? The problem that we are solving here can be stated as <em>print every element of given array of books</em>. However, there is much more going on in this piece of code:</p><ul><li>Declare an index variable and initialize it to zero</li><li>Increment this variable by one until it exceeds the length of the array</li><li>For each step use that variable to access i-th element of the array and print it</li></ul><p>Won’t you agree that while our intent is very simple, the above process is quite complex? What’s worse, there are many things that we can get wrong in this code - initialize the index to 1, use &lt;= instead of &lt;, forget about incrementing the index variable. This is because we have to be very specific about how to iterate the array and it’s quite easy to miss something. We could rewrite this code using the while  loop. However, it wouldn’t really buy as anything since the process would be roughly the same, only written in different way. <em>Actually, using the for…of construct from ES6 would be a big improvement in readability while still being imperative code. I’ll talk about it in one of the future posts. For now, let’s skip over it.</em></p><h3 id="ForEach"><a href="#ForEach" class="headerlink" title="ForEach"></a>ForEach</h3><p>As I’ve already mentioned in the first post of the series, we can rewrite this code in a more functional way:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">books.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">book</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(book);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>What’s going on here? We’re calling the build-in forEach  method on the books  array. forEach is kind of special because it accepts a function as one of it’s parameters. In functional programming, we have a special name for functions which accept (or return) other functions as parameters - <strong>higher order functions</strong>. But what does forEach  actually do? It runs given function on every element of an array. So basically, it does exactly the same thing as the for loop above but it hides the ugly details of having an index variable and incrementing it. Isn’t that cool? Let’s break it down a bit. Instead of using an anonymous function, let’s use a named function:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printBook</span>(<span class="params">book</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(book);</span><br><span class="line">&#125;</span><br><span class="line">books.forEach(printBook);</span><br></pre></td></tr></table></figure><p>Now, calling books.forEach(printBook) is essentially equivalent to:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">printBook(books[<span class="number">0</span>]);</span><br><span class="line">printBook(books[<span class="number">1</span>]);</span><br><span class="line">...</span><br><span class="line">printBook(books[books.length - <span class="number">1</span>]);</span><br></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>I hope you agree that the forEach loop improved our code on multiple levels. However, we can observe a much more spectacular improvement with the following example. Let’s have a look at the following use case: <em>given an array of post ids, return an array of post objects</em>. Let’s assume that we have a REST API available that will return a post object given a post id (we will use an actual API from <a href="https://jsonplaceholder.typicode.com" target="_blank" rel="noopener">https://jsonplaceholder.typicode.com</a>).</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webApiUrl = <span class="string">"https://jsonplaceholder.typicode.com/posts/"</span>;</span><br><span class="line"><span class="keyword">var</span> postIds = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> postPromises = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; postIds.length; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> promise = fetch(webApiUrl + postIds[i]).then(<span class="function"><span class="params">response</span> =&gt;</span> response.json());</span><br><span class="line">  postPromises.push(promise);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all(postPromises).then(<span class="function"><span class="params">posts</span> =&gt;</span> <span class="built_in">console</span>.log(posts));</span><br></pre></td></tr></table></figure><p>In the above piece, we iterate over the array of ids. For each id we call the REST API using <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API" target="_blank" rel="noopener">fetch</a> and get a promise object in return. We push this object to a special array postPromises  where we store the results. Finally, we call Promise.all  which would transfer the array of promises into a single promise containing the desired array of posts (<em>if you’re not familiar with promises, here is a <a href="https://developers.google.com/web/fundamentals/getting-started/primers/promises" target="_blank" rel="noopener">good read</a>).</em> That seems like a lot of code to do such a simple thing! And we have even more “imperative code overhead” - not only we need to maintain the index variable but we also have to create an array to which we will add results of the fetch  call, one by one. Let’s now see a functional solution to the same problem.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webApiUrl = <span class="string">"https://jsonplaceholder.typicode.com/posts/"</span>;</span><br><span class="line"><span class="keyword">var</span> postIds = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> postPromises = postIds.map(<span class="function"><span class="params">postId</span> =&gt;</span> fetch(webApiUrl + postId).then(<span class="function"><span class="params">response</span> =&gt;</span> response.json()));</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all(postPromises).then(<span class="function"><span class="params">posts</span> =&gt;</span> <span class="built_in">console</span>.log(posts));</span><br></pre></td></tr></table></figure><p>So what does map  do? It takes an array and transforms it to another array by applying given function on each element. Let’s see how it is different from forEach:</p><ul><li>forEach  runs given function on each element</li><li>map  runs given function on each element and collects the returned values, producing a new array</li></ul><p><img src="/images/2017/08/Map-explained.png" alt="" title="Map explained"></p><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p>So far the functions we’ve discussed operated on all elements of an array. What if we would like to apply some operation only to some elements of an array? In other words, what if we wanted to filter out some elements? As usual, let’s see an example of an imperative approach first. We will extend the example from the previous post: _given an array of post ids, return an array of posts _<strong><em>but only for even ids</em></strong>. In the imperative version, we can simply filter out odd ids by adding an if  statement:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webApiUrl = <span class="string">"https://jsonplaceholder.typicode.com/posts/"</span>;</span><br><span class="line"><span class="keyword">var</span> postIds = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> postPromises = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; postIds.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (postIds[i] % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> promise = fetch(webApiUrl + postIds[i]).then(<span class="function"><span class="params">response</span> =&gt;</span> response.json());</span><br><span class="line">    postPromises.push(promise);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all(postPromises).then(<span class="function"><span class="params">posts</span> =&gt;</span> <span class="built_in">console</span>.log(posts));</span><br></pre></td></tr></table></figure><p>Let’s now have a look at a functional version:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webApiUrl = <span class="string">"https://jsonplaceholder.typicode.com/posts/"</span>;</span><br><span class="line"><span class="keyword">var</span> postIds = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> postPromises = postIds</span><br><span class="line">  .filter(<span class="function"><span class="params">postId</span> =&gt;</span> postId % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">postId</span> =&gt;</span> fetch(webApiUrl + postId).then(<span class="function"><span class="params">response</span> =&gt;</span> response.json()));</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all(postPromises).then(<span class="function"><span class="params">posts</span> =&gt;</span> <span class="built_in">console</span>.log(posts));</span><br></pre></td></tr></table></figure><p>We’ve added a call to the filter  function. The filter  function takes a <strong>filtering function</strong> and applies it to every element of an array. If the value returned by the filtering function is false, than given element is not included in the resulting array. In other words, the filtering function is used to decide which elements should stay and which should be filtered out. </p><p><img src="/images/2017/08/filter-explained.png" alt="" title="filter explained"> </p><p>In the above example, you can already see how easily we can <strong>chain</strong> invocations of higher order functions. This is because every such function is invoked on an array and returns an array. With such code, the <strong>data flow</strong> is immediately visible and easy to understand. What I mean by that is that it’s easy to understand how the array is transformed. </p><p><img src="/images/2017/08/chaining-higher-order-functions-1.png" alt="" title="chaining higher order functions"></p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>In this post we’ve discussed three very useful functions which allow you to better articulate your intents with code. What’s more, using these functions might result in less buggy code - they present fewer opportunities to make a bug then traditional, imperative code. The forEach  example was basic and rather theoretical while the other examples were taken from a real-world situation. In the next post, we will continue exploring the world of higher order functions by looking at  reduce. </p><p>If you have any issues understanding anything in this post or if you simply would like to provide feedback, please leave a comment below. I want this course to be as good as possible and I need your help for that! If you found this post helpful, please consider sharing it on Facebook or Twitter.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In the &lt;a href=&quot;http://codewithstyle.info/functional-javascript-part-1-introduction/&quot;&gt;first post of the series&lt;/a&gt;, we’ve discussed which
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://codewithstyle.info/categories/JavaScript/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/JavaScript/Web/"/>
    
    
      <category term="javascript" scheme="https://codewithstyle.info/tags/javascript/"/>
    
      <category term="functional programming" scheme="https://codewithstyle.info/tags/functional-programming/"/>
    
  </entry>
  
  <entry>
    <title>Functional JavaScript part 1: introduction</title>
    <link href="https://codewithstyle.info/functional-javascript-part-1-introduction/"/>
    <id>https://codewithstyle.info/functional-javascript-part-1-introduction/</id>
    <published>2017-07-29T07:36:31.000Z</published>
    <updated>2019-12-02T21:26:20.066Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to the first post of the series about functional JavaScript! In this series of articles I’ll show you some basic functional programming techniques applied to JavaScript as well as explain how functional concepts are used in modern JavaScript frameworks. </p><p><strong>This post is part of the <a href="https://codewithstyle.info/functional-programming-javascript-plain-words/">Functional Programming in JavaScript series</a>.</strong></p><h3 id="Why-learn-functional-programming"><a href="#Why-learn-functional-programming" class="headerlink" title="Why learn functional programming?"></a>Why learn functional programming?</h3><p>Recently, we’ve observed a massive trend of embracing functional programming. Many object oriented languages started to incorporate functional programming features (e.g. streams in Java, pattern matching in C#, etc.). In the front-end world there is an abundance of examples of how functional programming concepts made its way into popular frameworks:</p><ul><li>unidirectional data flow in React and Angular</li><li>immutability, event sourcing, higher-order functions in Redux</li><li>reactive operators in RxJS</li><li>functional-reactive frameworks such as Cycle.js</li></ul><p>In my experience, the above topics are difficult to grasp for people who are not familiar with functional programming at all. Learning the functional ways gives you a great head-start when dealing with these concepts. And given that the trend is definitely in favor of FP, we may anticipate even more FP concepts coming into the JavaScript world. Obviously, there are more benefits to FP. Using functional techniques usually results in cleaner, less buggy, self-descriptive code. Besides, it is really fun and intellectually rewarding. </p><p><strong>Whether you like it or not, you are probably going to use functional programming to some extent.</strong> Why not take initiative and learn it properly?</p><h3 id="What-is-functional-programming"><a href="#What-is-functional-programming" class="headerlink" title="What is functional programming?"></a>What is functional programming?</h3><p>Many people associate programming with writing down some <strong>instructions</strong> telling the computer what to do. This is just one of many approaches to programming. We call this approach <strong>imperative programming</strong>. In imperative programming, your primary building block are <strong>statements</strong>. There are many kinds of statements - variable assignments, if  statements, for  loops and more. Your program executes from top to bottom, taking the statements one by one and running them. Functional programming is different. </p><p>In functional programming, instead of specifying exactly what to do by providing a list of instructions, you define your program as a <strong>function</strong> which takes some input and produces some output. But how can a complex program fit into a function? The answer lies in composition. You break down your program into multiple smaller functions and compose them. As a result, when writing functional code, you don’t need to be as specific as while writing imperative code. Because of that, the code is more readable, less prone to bugs and mistakes and more self-describing. </p><p>The below example illustrates what I mean by that. In the imperative way, you need to be very specific about how to use an index variable to iterate over an array. You need to provide details such as how to initialize the variable and how to increment it. There are many places where you can get it wrong and the intent is not that clear by looking at the code. Compare it with the functional piece. We abstract away the details of how to iterate over an array. The code is very readable and catches the intent of the programmer.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> books = [ <span class="string">"Gone with the Wind"</span>, <span class="string">"War and Peace"</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// imperative way</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; books.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(books[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// functional way</span></span><br><span class="line">books.forEach(<span class="function"><span class="params">book</span> =&gt;</span> <span class="built_in">console</span>.log(book));</span><br></pre></td></tr></table></figure><h3 id="Is-JavaScript-functional"><a href="#Is-JavaScript-functional" class="headerlink" title="Is JavaScript functional?"></a>Is JavaScript functional?</h3><p>Although JavaScript is far from being a pure functional language, it has some support for functional programming and makes writing functional code pretty natural.</p><h4 id="Passing-functions"><a href="#Passing-functions" class="headerlink" title="Passing functions"></a>Passing functions</h4><p>Most importantly, functions are first category citizens in JavaScript. It means that you can assign functions to variables and do with them anything you would do with any variable. Most importantly, you can pass functions as parameter to another function or return it from a function. Thanks to that, JavaScript makes it possible to naturally compose functions.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateHeader</span>(<span class="params">updater</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> headerEl = <span class="built_in">document</span>.getElementById(<span class="string">"header"</span>);</span><br><span class="line">  updater(headerEl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setColorToRed</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  element.setAttribute(<span class="string">"style"</span>, <span class="string">"color:red"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">capitalizeContent</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  element.innerText = element.innerText.toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">updateHeader(<span class="built_in">Math</span>.random() &gt; <span class="number">0.5</span> ? setColorToRed : capitalizeContent);</span><br></pre></td></tr></table></figure><p>In the above example, we can see that JavaScript allows us to <strong>treat functions as data</strong>. We pick one of the functions at random and pass it as an argument to another function.</p><h4 id="Anonymous-functions"><a href="#Anonymous-functions" class="headerlink" title="Anonymous functions"></a>Anonymous functions</h4><p>Another aspect of JavaScript which makes it FP friendly is the support for anonymous functions. In functional programming we create functions all the time. Therefore, it wouldn’t be very convenient if every function had to be named. Fortunately, in JavaScript we can create functions without naming it.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">updateHeader(<span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">  element.innerText = element.innerText.toUpperCase();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Actually, thanks to the ES6 standard we can write anonymous functions in a more concise way:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">updateHeader(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">  element.innerText = element.innerText.toUpperCase()</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">updateHeader(<span class="function"><span class="params">element</span> =&gt;</span> element.innerText = element.innerText.toUpperCase());</span><br></pre></td></tr></table></figure><h4 id="Clojures"><a href="#Clojures" class="headerlink" title="Clojures"></a>Clojures</h4><p>One very useful aspect of anonymous functions is called <strong>clojures</strong>. Thanks to the clojure mechanism, it’s possible to reference variables from outside of the scope of the function inside the anonymous function’s body. This mechanism is especially useful when returning functions.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getHeaderUpdater</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> headerEl = <span class="built_in">document</span>.getElementById(<span class="string">"header"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    headerEl.innerText = element.innerText.toUpperCase();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By returning a function which references a variable from outer scope, we’ve created a clojure. It means that the returned function has captured the headerEl  variable - it will remain in memory even when the control flow exits getHeaderUpdater.</p><h4 id="Immutability"><a href="#Immutability" class="headerlink" title="Immutability"></a>Immutability</h4><p>As we will soon learn, immutability is an important aspect of FP. The idea of immutability is that you shouldn’t mutate (modify) objects. Once you assign some properties to an object, they should stay as they are until the very end. If you need to change some property, you should return a new copy of the object instead of modifying it. </p><p>Immutability makes your code much less prone to errors - you can make assumptions about your objects and you don’t need to worry that they will be changed from a completely different place in your code. JavaScript doesn’t support programming very well - it was designed as a language to <strong>mutate</strong> the DOM model. However, ES6 adds support for <strong>destructuring</strong> which can be helpful with regards to immutability. What’s more, there are libraries which can help you enforce immutability such as <a href="https://facebook.github.io/immutable-js/" target="_blank" rel="noopener">immutable.js</a>.</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>I hope that I’ve convinced you that it’s worth spending some time on learning functional programming. Since you already know JavaScript and at the same time the language is pretty well suited for writing functional code, there are really no excuses not to give it a try! Stay tuned and get ready for the <a href="http://codewithstyle.info/functional-javascript-part-2-array-operations/">next article</a> in which we will talk about dealing with arrays the functional way. </p><p>If you have any issues understanding anything in this post or if you simply would like to provide feedback, please leave a comment below. I want this course to be as good as possible and I need your help for that! If you found this post helpful, please consider sharing it on Facebook or Twitter.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to the first post of the series about functional JavaScript! In this series of articles I’ll show you some basic functional progr
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://codewithstyle.info/categories/JavaScript/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/JavaScript/Web/"/>
    
    
      <category term="javascript" scheme="https://codewithstyle.info/tags/javascript/"/>
    
      <category term="functional programming" scheme="https://codewithstyle.info/tags/functional-programming/"/>
    
  </entry>
  
  <entry>
    <title>An introvert&#39;s guide to public speaking</title>
    <link href="https://codewithstyle.info/introverts-guide-public-speaking/"/>
    <id>https://codewithstyle.info/introverts-guide-public-speaking/</id>
    <published>2017-06-08T17:10:43.000Z</published>
    <updated>2019-12-02T21:26:20.068Z</updated>
    
    <content type="html"><![CDATA[<p>Two weeks ago I had an opportunity to talk at the <a href="https://www.codeeurope.pl/en" target="_blank" rel="noopener">Code Europe</a> conference in Warsaw. By doing this I managed to achieve one of my long term goals - to speak in front of more than 100 people. It might not sound impressive but given that I am a rather shy person I consider it a success. </p><p>I really believe that getting into public speaking gives you enormous benefits. It helps you develop as a person and ultimately become more open and confident. I’m still at the beginning of this road. Nevertheless, I’d like to share some of my thoughts and hopefully inspire some of you to start speaking in public.</p><h3 id="Why-should-I-care"><a href="#Why-should-I-care" class="headerlink" title="Why should I care?"></a>Why should I care?</h3><p>As I already mentioned, I believe learning to be a better speaker can be very beneficial for you. Here is what exactly do I mean:</p><ul><li><strong>Confidence boost</strong> - for me that’s the most important one. By exposing yourself to such a stressful situation (and it is stressful, I’m not going to lie) you lower the point at which other situations seem stressful. Important interview? Having to talk to a stranger? Just remind yourself how you performed in front of a whole group of strangers.</li><li><strong>Become a better communicator</strong> - preparing for an important talk involves a lot of rehearsing. During the rehearsals you get a chance to monitor and eliminate some of your bad speaking habits such as using stop words or gesticulating too much. These improvements stay with you even after you had delivered your talk.</li><li><strong>Open up new options</strong> - not sure if you’d like to be a programmer until the end of your life? Getting involved with public speaking my reward you with some new opportunities. After my conference talk a person from a major Polish IT publishing house approached me to discuss a possibility of me authoring a video course. If you get some experience explaining stuff to people you might discover training is the way to go. Besides, there are many people who just live off giving tech talks.</li><li><strong>Learn stuff</strong> - even if you consider yourself an expert in the topic you’d like to talk about you will still want to do some more research as part of the preparation. You will want to be as prepared as possible for your QA session to avoid the stress of not having an answer to a question. As a byproduct, you will get a deeper understanding of the topic.</li></ul><h3 id="Ok-so-how-do-I-get-started"><a href="#Ok-so-how-do-I-get-started" class="headerlink" title="Ok, so how do I get started?"></a>Ok, so how do I get started?</h3><h4 id="Step-1-find-a-topic"><a href="#Step-1-find-a-topic" class="headerlink" title="Step 1: find a topic"></a>Step 1: find a topic</h4><p>When asked why they don’t try public speaking, many of my programming friends answer: I have no interested topic to talk about. It’s a nice excuse but entirely not true in my opinion. The topic of your talk doesn’t have to be sexy/revolutionary/something-nobody-else-talked-about. I think a great topic recipe is: <em>pick a new framework/language/approach related to your area of expertise, learn it and explain it to people</em>. Many people don’t have time/energy to stay up to date so by explaining the stuff to them you will be <strong>providing value</strong>.</p><h4 id="Step-2-find-an-audience"><a href="#Step-2-find-an-audience" class="headerlink" title="Step 2: find an audience"></a><strong>Step 2: find an audience</strong></h4><p>This might sound tough for a shy person but it’s not really that bad. The keyword here is <strong>meetups</strong>. Use <a href="https://www.meetup.com" target="_blank" rel="noopener">meetup.com</a> or if it’s not popular in your town, just check out the student groups at your university. Approach the meetup organizer and offer that you would like to give a talk on the selected topic. If it sounds scary, you can write a personal message to the organizer in which you say that you attended the meetup a couple of times and really liked it and would like to contribute (I did exactly this). </p><p>Why meetups? They will provide you with a low-risk way to get started. The audience is not too large and the people who attend meetups are usually there to learn something and not to judge your speaking skills. This was very comforting to me.</p><h4 id="Step-3-rehearse-rehearse-rehearse"><a href="#Step-3-rehearse-rehearse-rehearse" class="headerlink" title="Step 3: rehearse, rehearse, rehearse"></a>Step 3: rehearse, rehearse, rehearse</h4><p>You can find ton of (often conflicting) advice on how to prepare your presentation. You must really try out some approaches and find what works best for you. What works for me is to sit down with a pen and piece of paper and come up with a storyboard - a series of small rectangles with images and text. They don’t necessarily have to map 1-1 to slides but rather provide a skeleton for your presentation. However, I’d rather focus on things related to reducing stress. </p><p>Most importantly - <strong>rehearse</strong>! From my experience, it’s the single most important way to reduce the stress during the actual talk. You have to build up the confidence that you know what you’re talking about and that you’ll not get lost in the middle of the talk. This doesn’t mean memorizing the whole script - in fact, I would discourage it. It’s more about remembering all the points you want to touch upon during your talk. </p><p><strong>Get some audience</strong> for your rehearsals - a friend or a spouse. I know, it will feel totally awkward the first time you do it. But trust me, it’s worth it! </p><p>Although I would never memorize the whole script, I think it can be helpful to <strong>learn the first few lines by heart</strong>. It will give you the comforting feeling that no matter what you will not fail at the start of your presentation. Your rehearsals should be as close to the actual performance as possible. Practice your posture, body language, switching slides. Everything matters. </p><p>Finally, there is a chance that you’d like to include a demo/live coding in your session. As you may suspect, the possibility of failure during a live coding session is high and therefore this element introduces a lot of stress. Consider recording and playing a screencast - it might seem lame but for most people it won’t matter. And for you, it will be far less stressful.</p><h4 id="Step-4-the-D-day"><a href="#Step-4-the-D-day" class="headerlink" title="Step 4: the D-day!"></a>Step 4: the D-day!</h4><p>Arrive early and double check all of your dependencies - internet connection, slide projector connection. Definitely get a wireless clicker/presenter - you don’t want to be physically tied to your laptop. </p><p>Familiarize yourself with the microphone - your voice will sound strange to you if you’ve never used it before. If you’re not confident about your body stance, the simplest thing to do is to just stand straight and hold your hands behind your back. It will automatically make your chest more open and you feel more confident. It sounds stupid but it really works! And no body language is better than wild, distracting gesticulation. </p><p>Enjoy the QA session! If you have difficulty approaching people on daily basis, now is the moment when people are approaching you. Deliver the talk and enjoy the applause at the end!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Two weeks ago I had an opportunity to talk at the &lt;a href=&quot;https://www.codeeurope.pl/en&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Code Europe&lt;/a&gt; c
      
    
    </summary>
    
      <category term="Misc" scheme="https://codewithstyle.info/categories/Misc/"/>
    
      <category term="Other topics" scheme="https://codewithstyle.info/categories/Misc/Other-topics/"/>
    
      <category term="Thoughts" scheme="https://codewithstyle.info/categories/Misc/Other-topics/Thoughts/"/>
    
    
      <category term="public speaking" scheme="https://codewithstyle.info/tags/public-speaking/"/>
    
      <category term="conferences" scheme="https://codewithstyle.info/tags/conferences/"/>
    
      <category term="thoughts" scheme="https://codewithstyle.info/tags/thoughts/"/>
    
  </entry>
  
  <entry>
    <title>How I built a PWA with Angular and Firebase Part 3: Push Notifications with Firebase Cloud Messaging</title>
    <link href="https://codewithstyle.info/push-notifications-with-fcm/"/>
    <id>https://codewithstyle.info/push-notifications-with-fcm/</id>
    <published>2017-05-28T11:50:33.000Z</published>
    <updated>2019-12-02T21:26:20.069Z</updated>
    
    <content type="html"><![CDATA[<p>This post is the last post of the series in which I will describe how I built my first PWA, <a href="http://friendtainer.com/" target="_blank" rel="noopener">Friendtainer</a>. It will touch on many topics such as Angular 2, Ionic 2, Firebase, service workers, push notifications, serverless architectures. I hope you will find it useful when building your own PWAs. In this part of the series, we’ll look at the most interesting part of the app - push notifications and Firebase Cloud Messaging.</p><ul><li><a href="https://codewithstyle.info/how-i-built-a-progressive-web-app-with-angular-and-firebase-part-1/">Part 1: Explaining PWA and introduction</a></li><li><a href="https://codewithstyle.info/how-i-built-a-pwa-with-angular-and-firebase-part-2-ionic-2/">Part 2: Ionic and app manifest</a></li><li><a href="https://codewithstyle.info/push-notifications-with-fcm/">Part 3: Push notifications with Firebase Cloud Messaging</a></li></ul><h3 id="Recap-of-the-architecture"><a href="#Recap-of-the-architecture" class="headerlink" title="Recap of the architecture"></a>Recap of the architecture</h3><p>In <a href="http://codewithstyle.info/how-i-built-a-progressive-web-app-with-angular-and-firebase-part-1/">Part 1</a> of this series I described the architecture of my app. Let’s focus on the part related to push notifications. We will use Firebase Cloud Messaging to implement notifications. Why do we need it? As the name suggests, push notifications are being <strong>pushed</strong> directly to users’ devices. If we wanted to implement it ourselves, we would need to somehow figure out how to find the device, connect to it and send data to it. FCM can do this work for us. We can tell it what’s the message and who to deliver it to and it will take care of the delivery. </p><p><img src="/images/2017/05/maxresdefault-1024x576.jpg" alt=""> </p><p>However, we still need something to actually send the message (i.e. to tell FCM what and to whom should be delivered). FCM refers to the piece that pushes messages as <strong>application server</strong>. Our setup is <strong>serverless</strong> so we will not use a single, centralized server for pushing the notifications. Instead, we will use a function-as-a-service offering called <a href="https://webtask.io/" target="_blank" rel="noopener">Webtask.io</a>. Webtask lets us run a piece of JavaScript code in the cloud, without having to care about where and how it’s executed. <em>BTW, you can use Firebase Cloud Functions instead of Webtask. I decided to use Webtask because when I was working on Friendtainer, Functions were not available yet.</em> </p><p>Friendtainer has a single webtask that’s responsible for determining which users need to be shown a reminder. It’s automatically started every 24 hours. For each user that needs to be shown a reminder, the webtask tells FCM to deliver a notification to that user. FCM finds the user’s device and sends the notification. Since the device has a service worker installed and running in the background, it handles the notification and shows a notification banner. </p><p>As I said, FCM takes care of message delivery to a specific device. However, we are responsible for pairing of users and devices. Although a user can have multiple devices (especially with a PWA that can be run on desktop, smartphone, tablet, etc.), we are going to assume one device per user - it simplifies things by a lot. There are three pieces required to get this working:</p><ul><li>The client app - it will handle subscribing to notifications and associating FCM token with the user</li><li>The service worker (part of the client app) - will handle incoming messages and display the notifications</li><li>The webtask - will send messages</li></ul><h3 id=""><a href="#" class="headerlink" title=""></a><img src="/images/2017/05/Architecture.png" alt=""></h3><h3 id="Service-worker"><a href="#Service-worker" class="headerlink" title="Service worker"></a>Service worker</h3><p>Notifications only make sense if you are able to receive them even if the application is not in the foreground. This is possible to achieve in modern web applications thanks to service workers. Service worker is a piece of JavaScript code which can run in the background, independently of the website which loaded it. Currently, service workers are used mostly for two things:</p><ul><li>providing caching and offline access</li><li>push notifications</li></ul><p>If you are using Ionic, it has already generated the service worker for you. You will find that it’s not empty. Ionic sets up offline caching of all static resources for you. Let’s setup handling messages from GCM in our service worker:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">importScripts(<span class="string">'https://www.gstatic.com/firebasejs/3.5.2/firebase-app.js'</span>);</span><br><span class="line">importScripts(<span class="string">'https://www.gstatic.com/firebasejs/3.5.2/firebase-messaging.js'</span>);</span><br><span class="line"></span><br><span class="line">firebase.initializeApp(&#123;</span><br><span class="line">  <span class="comment">// get this from Firebase console, Cloud messaging section</span></span><br><span class="line">  <span class="string">'messagingSenderId'</span>: <span class="string">'***'</span> </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> messaging = firebase.messaging();</span><br><span class="line"></span><br><span class="line">messaging.setBackgroundMessageHandler(<span class="function"><span class="keyword">function</span>(<span class="params">payload</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Received background message '</span>, payload);</span><br><span class="line">  <span class="comment">// here you can override some options describing what's in the message; </span></span><br><span class="line">  <span class="comment">// however, the actual content will come from the Webtask</span></span><br><span class="line">  <span class="keyword">const</span> notificationOptions = &#123;</span><br><span class="line">    icon: <span class="string">'/assets/images/logo-128.png'</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> self.registration.showNotification(notificationTitle, notificationOptions);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Subscribing-to-notifications"><a href="#Subscribing-to-notifications" class="headerlink" title="Subscribing to notifications"></a>Subscribing to notifications</h3><p>Next, we need to extend the user interface of our app to allow users to register their intent to receive push notifications. I’ve created the below service.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="comment">// based on https://github.com/firebase/quickstart-js/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MessagingService &#123;</span><br><span class="line">  <span class="keyword">private</span> messaging: firebase.messaging.Messaging;</span><br><span class="line">  <span class="keyword">private</span> unsubscribeOnTokenRefresh = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line">    @Inject(FirebaseRef) fb: any,</span><br><span class="line">    <span class="keyword">private</span> userService: UserService</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">this</span>.messaging = fb.messaging();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> enableNotifications(): firebase.Thenable&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Requesting permission...'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.messaging.requestPermission().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Permission granted'</span>);</span><br><span class="line">        <span class="comment">// token might change - we need to listen for changes to it and update it</span></span><br><span class="line">        <span class="keyword">this</span>.setupOnTokenRefresh();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.updateToken();</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> disableNotifications(): firebase.Thenable&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">this</span>.unsubscribeOnTokenRefresh();</span><br><span class="line">    <span class="keyword">this</span>.unsubscribeOnTokenRefresh = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.userService.removeFcmToken().then();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> updateToken(): firebase.Thenable&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.messaging.getToken().then(<span class="function">(<span class="params">currentToken</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (currentToken) &#123;</span><br><span class="line">        <span class="comment">// we've got the token from Firebase, now let's store it in the database</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userService.setFcmKey(currentToken);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'No Instance ID token available. Request permission to generate one.'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> setupOnTokenRefresh(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.unsubscribeOnTokenRefresh = <span class="keyword">this</span>.messaging.onTokenRefresh(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Token refreshed"</span>);</span><br><span class="line">      <span class="keyword">this</span>.userService.removeFcmToken().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="keyword">this</span>.updateToken(); &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let me explain how it works. On the high level, our application needs to call Firebase in order to get a <strong>registration token</strong>. This token identifies the target that notifications will be pushed to. By target, I mean specific browser on a specific device. If you request permissions from Firefox and Chrome both installed on the same machine, you will get two different registration tokens. </p><p><img src="/images/2017/05/Messaging-workflow.png" alt="" title="Messaging workflow">   </p><p>When you call enableNotifications, the library checks if the browser permits showing notifications. If this is not the case, the user will be asked whether he wishes to receive notifications. The promise will succeed only if he accepts. Next, we call setupOnTokenRefresh  in order to handle the situation when the token is updated. Finally, we call userService.setFcmKey() . You should implement the UserService  yourself and this particular method should simply store the token in some user profile object (in the database). </p><p>Basically, we need to associate users to FCM tokens beacause when sending a message, we can’t specify the targeted user but only his FCM token. You should consider associating multiple tokens with single user. If you want to be able to push messages to all devices owned by a user, you need to associate all of them with the user’s profile. Note that we also implemented disableNotifications . This method removes the association between the current user and the FCM token. </p><p><strong>You should consider calling this method when the user is logging out of the application</strong> - otherwise, you may end up in a situation when some other user using the same device receives notifications targeted to the other user. Lastly, remember to pass messagingSenderId  when initializing Firebase in the app and add the following values in your manifest file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;gcm\_sender\_id&quot;: &quot;103953800507&quot;, // this value is always the same</span><br><span class="line">&quot;gcm\_user\_visible_only&quot;: true</span><br></pre></td></tr></table></figure><h3 id="Sending-notifications"><a href="#Sending-notifications" class="headerlink" title="Sending notifications"></a>Sending notifications</h3><p>The final missing piece is to send the notification. In Friendtainer it’s the responsibility of a Webtask which is triggered on some schedule. You can use any FaaS provider for that (using Firebase Cloud Functions might be a good choice since than you will stay within the Firebase ecosystem). The actual sending is pretty easy. Let’s see an example.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fcmOptions = &#123;</span><br><span class="line">    method: <span class="string">"POST"</span>,</span><br><span class="line">    url: <span class="string">"https://fcm.googleapis.com/fcm/send"</span>,</span><br><span class="line">    <span class="comment">// get the key from Firebase console</span></span><br><span class="line">    headers: &#123; Authorization: \<span class="string">`key=<span class="subst">$&#123;fcmServerKey&#125;</span>\` &#125;, </span></span><br><span class="line"><span class="string">    json: &#123;</span></span><br><span class="line"><span class="string">        notification: &#123; </span></span><br><span class="line"><span class="string">            title: "Message title",</span></span><br><span class="line"><span class="string">            body: "Message body",</span></span><br><span class="line"><span class="string">            click_action: "URL to your app?"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        // userData is where your client stored the FCM token for the given user</span></span><br><span class="line"><span class="string">        // it should be read from the database</span></span><br><span class="line"><span class="string">        to: userData.fcmRegistrationKey</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">return request(fcmOptions).catch(() =&gt; console.log(\`ERROR: Push failed for user <span class="subst">$&#123;userData.email&#125;</span>\`));</span></span><br></pre></td></tr></table></figure><p>We need to retrieve the association between the user and the token from the database first. In the above code, it’s stored in the userData  object. Next, we build an object describing what should go into the message and who to send it to. Finally, we make a simple web request to Firebase Cloud Messaging. It will then route our message and deliver it to the desired device.</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>In this series I talked about building a mobile app using the latest greatest offerings of the PWA approach. We’ve covered how to make a web app look like a mobile app, make the web app <em>installable</em> on a mobile device and how to implement web push notifications which behave exactly as native notifications. I think given all these features the web platform is now ready to compete with native applications and that in the long run we will see the demise of many mobile apps.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This post is the last post of the series in which I will describe how I built my first PWA, &lt;a href=&quot;http://friendtainer.com/&quot; target=&quot;_b
      
    
    </summary>
    
      <category term="Angular" scheme="https://codewithstyle.info/categories/Angular/"/>
    
      <category term="Tutorials" scheme="https://codewithstyle.info/categories/Angular/Tutorials/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/Angular/Tutorials/Web/"/>
    
    
      <category term="angular" scheme="https://codewithstyle.info/tags/angular/"/>
    
      <category term="firebase" scheme="https://codewithstyle.info/tags/firebase/"/>
    
      <category term="pwa" scheme="https://codewithstyle.info/tags/pwa/"/>
    
  </entry>
  
  <entry>
    <title>My talk at Code Europe 2017: afterthoughts and the Q&amp;A session</title>
    <link href="https://codewithstyle.info/talk-code-europe-2017-afterthoughts-qa-session/"/>
    <id>https://codewithstyle.info/talk-code-europe-2017-afterthoughts-qa-session/</id>
    <published>2017-05-27T13:58:14.000Z</published>
    <updated>2019-12-02T21:26:20.071Z</updated>
    
    <content type="html"><![CDATA[<p>Two days ago I delivered my first conference tech talk at <a href="http://codeeurope.pl/" target="_blank" rel="noopener">Code Europe</a>. It’s a major programming conference taking place in three different cities in Poland (I presented in Warsaw). My talk was based on one of the posts I wrote for this blog: <a href="http://codewithstyle.info/building-serverless-web-application-angular-2-webtask-firebase/">Building serverless web application with Angular 2, Webtask and Firebase</a>. </p><p><img src="/images/2017/05/584151c052d4c3.81439466_625.jpg" alt=""> </p><p>It was a great experience. I’ve spend a lot of time practicing, trying to implement all the knowledge I’ve learned from various blog posts about public speaking and tech talks (I really recommend <a href="https://www.sqlskills.com/blogs/paul/public-speaking-a-primer/" target="_blank" rel="noopener">this</a> and <a href="https://www.hanselman.com/blog/11TopTipsForASuccessfulTechnicalPresentation.aspx" target="_blank" rel="noopener">this</a>). I had a lot of support from my <a href="https://www.7n.com/" target="_blank" rel="noopener">contracting agency</a> for which I’m very grateful. It was a lot of hard work but it’s totally worth it. The way you feel after the presentation when people come over to thank you for a great talk is the best reward you can get. Besides, I feel like the whole process made me more confident and a better communicator in general. </p><p><img src="/images/2017/05/code_europe_milosz_piechocki-1024x768.jpg" alt=""> </p><p>My talk included a demo in which I built a small web application. This application allowed the audience to ask questions in real-time (using their phones) which I answered at the end of the talk. This turned out to be a funny thing to do since people were posting anonymously and some of the questions were not related to the talk at all :). However, I’ve decided to pick some and post here along with some more elaborate answers. </p><p><strong>What are the disadvantages sides of serverless?</strong> </p><p>I only mentioned vendor lock-in (the fact that it’s difficult to move your stuff between different service providers; this is particularly true with BaaS) while in fact there are more points to consider. <a href="https://www.martinfowler.com/articles/serverless.html" target="_blank" rel="noopener">This article</a> does a great job enumerating them. In short:</p><ul><li>Vendor control - since you are outsourcing your infrastructure, you no longer have control over it; if something breaks the only thing you can do is to hope that somebody on the other side will fix it quick</li><li>Multitenancy - in FaaS your code shares hardware and infrastructure with someone else’s code; this can lead to problems such as one user using up all the available resources; obviously service providers are trying hard not to allow such a situation</li><li>Repetition of logic across various platforms - one of the guys asked explicitly about that; if you have clients developed in multiple platforms (e.g. JavaScript and .NET) than you will end up with duplicated logic; see below</li></ul><p><strong>How do you authenticate users so only data they have permission to is pulled to their instance of the client?</strong> </p><p>In Firebase Authentication is tightly integrated with Real-time database. This means that you can use a special variable called auth  when creating validation rules. Let’s say we store contacts in a database. For each user id we store a list of contacts.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  contacts: &#123;</span><br><span class="line">    &quot;user1&quot;: [&#123; ... &#125;, &#123; ... &#125;],</span><br><span class="line">    &quot;user2&quot;: [&#123; ... &#125;, &#123; ... &#125;],</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>With the below rule we can define that an authenticated user only has access to the data under his user id.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;rules&quot;: &#123;  </span><br><span class="line">    &quot;contacts&quot;: &#123;</span><br><span class="line">      &quot;$userId&quot;: &#123;</span><br><span class="line">        &quot;.write&quot;: &quot;auth.uid == $userId&quot;,</span><br><span class="line">        &quot;.read&quot;: &quot;auth.uid == $userId&quot;,</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Won’t such automation push the “regular programmers” out of the market at some point?</strong></p><p>I think that serverless might remove some of the sysops jobs. It’s effectively a form of outsourcing and companies usually outsource stuff so that they don’t need to hire people full-time.</p><p>From the developer’s perspective, I think the best thing we can do is to stay up to date and learn serverless.</p><p><strong>Can I do server processing doing some tasks without client-side?</strong></p><p>The author clarified that what he meant is whether it’s possible to execute serverless code in other ways than by making a web request from some client. It totally is, for example Webtask.io has a scheduled execution mode in which you can define that your task should be triggered on some sort of schedule.</p><p>Cloud Functions in Firebase have an even longer list of possible triggers. For example, you can setup your function to execute when something specific happens in your Realtime Database or when some condition related to Google Analytics is fulfilled.</p><p><strong>How about access from no browser client in context off logic duplication</strong></p><p>That’s a totally valid point. If you have clients developed in multiple platforms (e.g. JavaScript and .NET) than you will end up with duplicated logic.</p><p>On the other hand, serverless might help you avoid duplication in some other places. For example, you can have your codebase shared between the client and your FaaS functions. During the demonstration in my talk I used exactly that - I reused the config file and the domain model in the Webtask.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Two days ago I delivered my first conference tech talk at &lt;a href=&quot;http://codeeurope.pl/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Code Europe&lt;/a&gt;.
      
    
    </summary>
    
      <category term="Misc" scheme="https://codewithstyle.info/categories/Misc/"/>
    
      <category term="Other topics" scheme="https://codewithstyle.info/categories/Misc/Other-topics/"/>
    
      <category term="Thoughts" scheme="https://codewithstyle.info/categories/Misc/Other-topics/Thoughts/"/>
    
    
      <category term="conferences" scheme="https://codewithstyle.info/tags/conferences/"/>
    
      <category term="firebase" scheme="https://codewithstyle.info/tags/firebase/"/>
    
      <category term="thoughts" scheme="https://codewithstyle.info/tags/thoughts/"/>
    
  </entry>
  
  <entry>
    <title>How I built a PWA with Angular and Firebase Part 2: Ionic and app manifest</title>
    <link href="https://codewithstyle.info/how-i-built-a-pwa-with-angular-and-firebase-part-2-ionic-2/"/>
    <id>https://codewithstyle.info/how-i-built-a-pwa-with-angular-and-firebase-part-2-ionic-2/</id>
    <published>2017-05-09T16:47:22.000Z</published>
    <updated>2019-12-02T21:26:20.068Z</updated>
    
    <content type="html"><![CDATA[<p>This post is part of a series in which I will describe how I built my first PWA, <a href="http://friendtainer.com" target="_blank" rel="noopener">Friendtainer</a>. It will touch on many topics such as Angular 2, Ionic 2, Firebase, service workers, push notifications, serverless architectures. I hope you find it useful when building your own PWAs. In this part of the series, we’ll look at how to create a PWA app using the Ionic 2 framework. Additionally, I will talk about the app manifest and how to use it to allow adding the app icon to the device’s home screen.</p><ul><li><a href="https://codewithstyle.info/how-i-built-a-progressive-web-app-with-angular-and-firebase-part-1/">Part 1: Explaining PWA and introduction</a></li><li><a href="https://codewithstyle.info/how-i-built-a-pwa-with-angular-and-firebase-part-2-ionic-2/">Part 2: Ionic and app manifest</a></li><li><a href="https://codewithstyle.info/push-notifications-with-fcm/">Part 3: Push notifications with Firebase Cloud Messaging</a></li></ul><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>As I mentioned in the <a href="http://codewithstyle.info/how-i-built-a-progressive-web-app-with-angular-and-firebase-part-1/">previous post</a>, there are a couple of requirements that a web app has to comply with in order to be called a PWA. In this post we’ll focus on the items in bold.</p><ul><li><strong>Looks like a native app on mobile devices</strong></li><li>Loads fast and supports offline mode</li><li><strong>Can be launched from the phone’s home screen</strong></li><li><strong>Runs full-screen</strong></li><li>May support push notifications (so the phone will display notifications even if the browser is not running)</li></ul><h2 id="Ionic"><a href="#Ionic" class="headerlink" title="Ionic"></a>Ionic</h2><p>Ionic is a web/mobile application framework based on Angular. It’s primary goal is to facilitate building hybrid mobile applications. Hybrid mobile apps are apps consisting of two parts - a native wrapper and a web app. The wrapper acts as a bridge between the web app and the device, providing an API to native functionalities. Although we are not going to build a hybrid app but a PWA, we can still benefit from Ionic. It contains a rich library of UI components which help us build a web app that looks like a native app. What’s more, Ionic detects the platform it’s running on and the components look different on iOS, Android and Windows Phone. </p><p><img src="/images/2017/05/Zrzut-ekranu-2017-05-09-o-20.25.18.png" alt=""><br><strong>Friendtainer on Android</strong></p><p><img src="/images/2017/05/Zrzut-ekranu-2017-05-09-o-20.24.38.png" alt=""><br><strong>Friendtainer on iPhone</strong></p><p>Ionic comes with it’s own command line tool which you can use to generate the project skeleton as well as particular pages.</p><h2 id="Getting-started-with-Ionic"><a href="#Getting-started-with-Ionic" class="headerlink" title="Getting started with Ionic"></a>Getting started with Ionic</h2><p>In order to get started with Ionic you need to download it first:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g ionic</span><br></pre></td></tr></table></figure><p>Now you can use the ionic  command line tool. Run this command to generate the project skeleton:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic start myApp sidemenu</span><br></pre></td></tr></table></figure><p>Now you can start adding Ionic pages like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic generate page Contacts</span><br></pre></td></tr></table></figure><p>Ionic page is basically an Angular component with some added functionality. Every Ionic app has a root component called AppComponent  which hosts the navigation and the current page. Pages form a stack where the topmost page is the one that’s currently visible to the user. It’s super-easy to create pages using the rich component library provided in Ionic. The <a href="https://ionicframework.com/docs/components/#overview" target="_blank" rel="noopener">documentation</a> is great, providing live examples which demonstrate the look and feel on all supported platforms. Ionic make it very convenient to develop and test your app. Just run the following command to run it locally in development mode:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic serve</span><br></pre></td></tr></table></figure><h2 id="Building-production-package"><a href="#Building-production-package" class="headerlink" title="Building production package"></a>Building production package</h2><p>Once your app is ready you need to deploy it. You need to build a package that contains optimized versions of all the JavaScript files and static assets. Ionic’s build process is geared towards supporting different target platforms such as iOS or Android. This only applies to hybrid apps. In our case, we want to produce a package that has no dependency on the bridging API. For that we need to specify browser  as the target platform when building the package. Before deploying your app to production, it’s highly recommended to optimize it. Optimization involves bundling and minifying the JavaScript source code, running Angular AOT (Ahead Of Time) compilation and setting the app in prod mode. As a result, the optimized package is much smaller and has much better performance. In order to build the app with the optimizations, use the prod  flag:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic build --prod browser</span><br></pre></td></tr></table></figure><p>The build process can take some time. Once it’s done, you can find your package inside the platforms/browser  directory. It’s just a bunch of static files so you can just drop it on a HTTP server. Or, use Firebase hosting as I did.</p><h2 id="App-manifest"><a href="#App-manifest" class="headerlink" title="App manifest"></a>App manifest</h2><p>So far, Ionic helped us deal with providing native-like experience inside the app. How about some elements external to the app? Specifically, I mean home screen integration and the full-screen mode. The web app manifest specification allows us to control those aspects of the user experience. Manifest file is basically a JSON file containing some metadata about your application. We can use this file to specify the name of the app, the icon to be used on the home screen and whether it should run full screen or not. Once we provide all this information, some modern browsers (including Chrome) will display a prompt suggesting the user visiting your app to add an icon for it to the home screen. </p><p><img src="/images/2017/04/Zrzut-ekranu-2017-04-14-o-12.00.43.png" alt=""><br><strong>Chrome home screen prompt</strong></p><p>Ionic apps created using the CLI tool already include a manifest file so you just need to modify it. You can find it under the following path: src/manifest.json Below you can find the manifest file for Friendtainer. As you can see, it contains the app title, references to the icon image in several sizes and some info about colors.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;Friendtainer&quot;,</span><br><span class="line">  &quot;short_name&quot;: &quot;Friendtainer&quot;,</span><br><span class="line">  &quot;start_url&quot;: &quot;index.html&quot;,</span><br><span class="line">  &quot;display&quot;: &quot;standalone&quot;,</span><br><span class="line">  &quot;icons&quot;: [&#123;</span><br><span class="line">    &quot;src&quot;: &quot;assets/images/logo-500.png&quot;,</span><br><span class="line">    &quot;sizes&quot;: &quot;500x500&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;image/png&quot;</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    &quot;src&quot;: &quot;assets/images/logo-256.png&quot;,</span><br><span class="line">    &quot;sizes&quot;: &quot;256x256&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;image/png&quot;</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    &quot;src&quot;: &quot;assets/images/logo-128.png&quot;,</span><br><span class="line">    &quot;sizes&quot;: &quot;128x128&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;image/png&quot;</span><br><span class="line">  &#125;],</span><br><span class="line">  &quot;background_color&quot;: &quot;#FFFFFF&quot;,</span><br><span class="line">  &quot;theme_color&quot;: &quot;#68A9FF&quot;,</span><br><span class="line">  &quot;gcm\_sender\_id&quot;: &quot;103953800507&quot;,</span><br><span class="line">  &quot;gcm\_user\_visible_only&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Full-screen mode is achieved by setting the display  option to standalone. Android phones will also provide a splash screen for your app based on the settings found in the manifest file. The splash screen is composed of the app title and the app image. Background and theme colors are also used when showing the splash screen.</p><p><img src="/images/2017/05/Zrzut-ekranu-2017-05-09-o-20.34.18.png" alt=""><br><strong>Splashscreen based on the above manifest</strong> </p><p>The remaining two settings starting with the gcm  prefix are related to Google Cloud Messaging. I will describe them in more detail once we discuss push notifications. <strong>To be continued…</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This post is part of a series in which I will describe how I built my first PWA, &lt;a href=&quot;http://friendtainer.com&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
      <category term="Angular" scheme="https://codewithstyle.info/categories/Angular/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/Angular/Web/"/>
    
    
      <category term="angular" scheme="https://codewithstyle.info/tags/angular/"/>
    
      <category term="firebase" scheme="https://codewithstyle.info/tags/firebase/"/>
    
      <category term="pwa" scheme="https://codewithstyle.info/tags/pwa/"/>
    
      <category term="ionic" scheme="https://codewithstyle.info/tags/ionic/"/>
    
  </entry>
  
  <entry>
    <title>How I built a PWA with Angular and Firebase Part 1: Introduction</title>
    <link href="https://codewithstyle.info/how-i-built-a-progressive-web-app-with-angular-and-firebase-part-1/"/>
    <id>https://codewithstyle.info/how-i-built-a-progressive-web-app-with-angular-and-firebase-part-1/</id>
    <published>2017-04-14T16:29:30.000Z</published>
    <updated>2019-12-02T21:26:20.067Z</updated>
    
    <content type="html"><![CDATA[<p>This post is part of a series in which I will describe how I built my first PWA. It will touch on many topics such as Angular 2, Ionic 2, Firebase, service workers, push notifications, serverless architectures. I hope you find it useful when building your own PWAs. I’ve spent last month working on my new project. It’s called <a href="http://friendtainer.com" target="_blank" rel="noopener">Friendtainer</a> and it’s a smartphone app which helps you meet with your friends regularly. You can add contacts and decide how often you want to meet. If you fail to record a meeting within given timespan you will start receiving reminders until you record a meeting.</p><ul><li><a href="https://codewithstyle.info/how-i-built-a-progressive-web-app-with-angular-and-firebase-part-1/">Part 1: Explaining PWA and introduction</a></li><li><a href="https://codewithstyle.info/how-i-built-a-pwa-with-angular-and-firebase-part-2-ionic-2/">Part 2: Ionic and app manifest</a></li><li><a href="https://codewithstyle.info/push-notifications-with-fcm/">Part 3: Push notifications with Firebase Cloud Messaging</a></li></ul><h3 id="PWAs-Progressive-Web-Apps"><a href="#PWAs-Progressive-Web-Apps" class="headerlink" title="PWAs (Progressive Web Apps)"></a>PWAs (Progressive Web Apps)</h3><p>I decided to create the app as a Progressive Web Application (PWA). What is a PWA? It’s a new term coined by Google which basically means a web application which provides a native-like experience on mobile devices. There are a few indicators of whether a web app is a PWA:</p><ul><li>Looks like a native app on mobile devices</li><li>Loads fast and supports offline mode</li><li>Can be launched from the phone’s home screen</li><li>Runs full-screen</li><li>May support push notifications (so the phone will display notifications even if the browser is not running)</li></ul><p>What are the advantages of a PWA over a native mobile app? <strong>Discoverability</strong>! You don’t need to put your app in the App Store or the Play Store. All your users need to do is to go to a specific URL. Besides, you can use your web skills and don’t need to learn platform-specific technologies such as Swift or the Android framework.</p><h3 id="Modern-web-technologies-at-work"><a href="#Modern-web-technologies-at-work" class="headerlink" title="Modern web technologies at work"></a>Modern web technologies at work</h3><p>As you can see, there are quite a few requirements that the app should satisfy. Let’s take them one by one.</p><ul><li><em>Looks like a native app on mobile devices</em> - I know Angular best so I would like to use it to build the app. <a href="http://ionic.io/2" target="_blank" rel="noopener">Ionic 2</a> is an excellent framework based on Angular 2 which provides a set of UI components that make your app look like a native app. The framework detects the device it’s running on and applies different styling depending on whether it’s the iOS or the Android operating system.</li></ul><p><img src="/images/2017/04/Zrzut-ekranu-2017-04-14-o-12.06.43.png" alt=""></p><ul><li><em>Loads fast and supports offline mode</em> - this part is taken care of by <a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="noopener">Service Workers</a>. Service Workers is a relatively new technology which allows you to run JavaScript in the background. What it means is that your web app can register a piece of JavaScript code that will keep running even if the user closes the browser! Service Workers can also intercept HTTP calls made by the app. Therefore, it’s possible to implement offline caching of all calls made by the app using them.</li><li><em>Can be launched from the phone’s home screen</em> and <em>Runs full-screen</em> - another technology called <a href="https://developers.google.com/web/fundamentals/engage-and-retain/web-app-manifest/" target="_blank" rel="noopener">The Web App Manifest</a> is responsible exactly for this. It’s quite easy to achieve - all you need to do is write a JSON file which defines various properties of the app. Given a proper manifest, Chrome on Android will show a suggestion to the user to install the app on the home screen.</li></ul><p><img src="/images/2017/04/Zrzut-ekranu-2017-04-14-o-12.00.43.png" alt=""></p><ul><li><em>Push notifications</em> - I wanted my app to send friend meeting reminders to the users so Push Notifications sounds great! Thanks to Service Workers and the <a href="https://developer.mozilla.org/en/docs/Web/API/Push_API" target="_blank" rel="noopener">Push API</a> it’s possible for a web app to produce native-like notifications on Android phones. However, something has to send the notifications. I decided to use Firebase Cloud Messaging as a transport and Webtask for hosting the code that would actually invoke the notifications.</li></ul><h3 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h3><p>I wanted to develop my app fast and not spend time on setting up infrastructure so I decided to go for serverless architecture with Firebase Database instead of a dedicated backend. Firebase Database is a no-SQL, real-time database that web applications can directly connect to. It is tightly integrated with Firebase authentication and has a powerful validation rule engine. Therefore, it’s possible to avoid having a separate application server. </p><p><img src="/images/2017/04/Architecture.png" alt="" title="Architecture"> </p><p>The app will consist of the following components:</p><ul><li>The frontend written in Ionic 2 utilizing Service Workers for offline caching and receiving push notifications while the app is not in the foreground. It will also have a Web Manifest file to enable adding to the home screen.</li><li>The data will be stored in a Firebase Database. Validation rules will enforce that a user can only modify their own data. Firebase will also provide authentication.</li><li>A scheduled <a href="https://webtask.io/" target="_blank" rel="noopener">Webtask</a> (function-as-a-service) will run daily, read data from the Firebase Database and send out push notifications and email reminders. Firebase also offers a similar functionality (it’s called Functions) but at the moment of writing they don’t support scheduled execution.</li></ul><p>If you are not that familiar with Firebase or Webtasks, take a look at <a href="http://codewithstyle.info/building-serverless-web-application-angular-2-webtask-firebase/">my previous post</a> where I talk more about it. </p><p><strong>Check out <a href="http://codewithstyle.info/how-i-built-a-pwa-with-angular-and-firebase-part-2-ionic-2/">Part 2: Ionic 2 and app manifest</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This post is part of a series in which I will describe how I built my first PWA. It will touch on many topics such as Angular 2, Ionic 2,
      
    
    </summary>
    
      <category term="Angular" scheme="https://codewithstyle.info/categories/Angular/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/Angular/Web/"/>
    
    
      <category term="angular" scheme="https://codewithstyle.info/tags/angular/"/>
    
      <category term="firebase" scheme="https://codewithstyle.info/tags/firebase/"/>
    
      <category term="serverless" scheme="https://codewithstyle.info/tags/serverless/"/>
    
      <category term="pwa" scheme="https://codewithstyle.info/tags/pwa/"/>
    
  </entry>
  
  <entry>
    <title>Method overload resolution in C# 6.0: an interesting bug story</title>
    <link href="https://codewithstyle.info/method-overload-resolution-in-c-6-0-an-interesting-bug-story/"/>
    <id>https://codewithstyle.info/method-overload-resolution-in-c-6-0-an-interesting-bug-story/</id>
    <published>2017-04-07T11:40:58.000Z</published>
    <updated>2019-12-02T21:26:20.069Z</updated>
    
    <content type="html"><![CDATA[<p>Recently at work I’ve been looking into migrating our projects from VS2013 to VS2017. As part of the process we decided to move from C# 5.0 to C# 7.0. It turned out that after the switch some of our projects won’t build anymore. I spent some time investigating the issue and found the outcome interesting so let me share my story with you.</p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Below is the code that caused issues. It is an interface declaration with two overloads of a single Get  method.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface IRepository&lt;T&gt; where T : class</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">T <span class="title">Get</span>(<span class="params"><span class="keyword">object</span> id, <span class="keyword">params</span> Expression&lt;Func&lt;T, <span class="keyword">object</span>&gt;&gt;[] includeExprs</span>)</span>;</span><br><span class="line"><span class="function">T <span class="title">Get</span>(<span class="params"><span class="keyword">object</span> id, <span class="keyword">params</span> <span class="keyword">string</span>[] includeExprs</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The code itself was fine. However, if we try to call it like this:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repository.Get(<span class="string">"some id"</span>);</span><br></pre></td></tr></table></figure><p>strange things will happen. Under VS2013 the code will compile without issues. However, under VS2017 it will cause a compile error:</p><p>The call is ambiguous between the following methods or properties: ‘IRepository<t>.Get(object, params Expression&lt;Func&lt;T, object&gt;&gt;[])’ and ‘IRepository<t>.Get(object, params string[])’</t></t></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Hmm, this totally makes sense. How is the compiler supposed to know which overload I mean? The solution is pretty simple - either don’t use method overloading here or provide a third overload that takes no parameter list.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">T <span class="title">Get</span>(<span class="params"><span class="keyword">object</span> id</span>)</span>;</span><br></pre></td></tr></table></figure><p>I started to wonder which language feature introduced in C# 6.0 or C# 7.0 is responsible for this change of behaviour. After spending some time on fruitless thinking, I decided to ask a <a href="http://stackoverflow.com/questions/42951282/breaking-change-in-method-overload-resolution-in-c-sharp-6-explanation" target="_blank" rel="noopener">question</a> on StackOverflow. <a href="http://stackoverflow.com/users/267/lasse-v-karlsen" target="_blank" rel="noopener">Lasse</a> in his elaborate answer enlightened me that this is not strictly a change introduced by one of the new language features but rather a stricter behaviour introduced by the <a href="https://roslyn.codeplex.com/" target="_blank" rel="noopener">Roslyn</a> compiler which is shipped with Visual Studio starting from version 2015. I have later found this stated explicitly in <a href="https://github.com/dotnet/roslyn/blob/master/docs/compilers/CSharp/Overload%20Resolution.md#tie-breaking-rule-with-unused-param-array-parameters" target="_blank" rel="noopener">Roslyn documentation</a>.</p><h3 id="Another-problem"><a href="#Another-problem" class="headerlink" title="Another problem"></a>Another problem</h3><p>I decided to solve the issue by adding a third method overload taking only the id  parameter. In its implementation I picked one of the existing overloads randomly and called it with an empty parameter list:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">Get</span>(<span class="params"><span class="keyword">object</span> id</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.Get(id, <span class="keyword">new</span> <span class="keyword">string</span>[] &#123;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>How surprised I was to find out that some of our unit tests started to fail. After another couple of hours, I found the reason. It turned out that one of the overloads of the Get  method behaved differently with an empty parameter list (the first one would load all includes for an entity when given an empty list while the second one would load none).</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>This was the moment when I realized how dangerous the before-Roslyn behaviour was. Given a call that was in fact ambiguous, the compiler would choose one of the overloads in a way that is by no means clear or intuitive. If by any luck it chose the same overload that you meant (as it happened in our case) you were relying on subtle, non-documented implementation detail of the compiler . The whole story thought me to be more careful when dealing with method overloading. The algorithm used for overload resolution is actually pretty complex and implements lots of rules (as exemplified <a href="https://github.com/dotnet/roslyn/blob/master/docs/compilers/CSharp/Overload%20Resolution.md#tie-breaking-rule-with-unused-param-array-parameters" target="_blank" rel="noopener">here</a> or in John’s Skeet <a href="http://csharpindepth.com/" target="_blank" rel="noopener">C# in Depth</a> book). Always make sure that it’s absolutely clear (both to you and the readers of your code) which method overload you mean.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently at work I’ve been looking into migrating our projects from VS2013 to VS2017. As part of the process we decided to move from C# 5
      
    
    </summary>
    
      <category term=".NET" scheme="https://codewithstyle.info/categories/NET/"/>
    
      <category term="Articles" scheme="https://codewithstyle.info/categories/NET/Articles/"/>
    
      <category term="Other topics" scheme="https://codewithstyle.info/categories/NET/Articles/Other-topics/"/>
    
    
      <category term="csharp" scheme="https://codewithstyle.info/tags/csharp/"/>
    
      <category term="csharp6" scheme="https://codewithstyle.info/tags/csharp6/"/>
    
  </entry>
  
  <entry>
    <title>JS Poland 2017 Conference: get free ticket and discount codes</title>
    <link href="https://codewithstyle.info/js-poland-2017-conference-get-free-ticket-and-discount-codes/"/>
    <id>https://codewithstyle.info/js-poland-2017-conference-get-free-ticket-and-discount-codes/</id>
    <published>2017-04-03T10:47:31.000Z</published>
    <updated>2019-12-02T21:26:20.068Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2017/04/jspoland.png" alt=""></p><p>I proudly announce that my blog is partnering up with <a href="http://js-poland.pl/" target="_blank" rel="noopener">JS Poland 2017</a>!</p><p><a href="http://js-poland.pl/" target="_blank" rel="noopener">JS Poland</a> is a promising conference where you will learn about the current state of ES6, Angular, React, Redux, TypeScript and many more. </p><p>The conference features 15 great speakers such as <a href="https://lucamezzalira.com/" target="_blank" rel="noopener">Luca Mezzalira</a> (Google Developer Expert, running the <a href="http://www.meetup.com/London-JavaScript-Community/" target="_blank" rel="noopener">London JavaScript Community)</a>, <a href="https://twitter.com/nirkaufman" target="_blank" rel="noopener">Nir Kaufman</a> (whose talk at <a href="http://www.ng-poland.pl/" target="_blank" rel="noopener">NgPoland</a> got me into Redux) and <a href="http://gilfink.azurewebsites.net/" target="_blank" rel="noopener">Gil Fink</a> (a Microsoft Most Valuable Professional). </p><p>There will also be 3 days of workshops. JS Poland will take place <strong>June 19</strong> in <strong>Warsaw</strong>. If you aren’t from Poland, it’s an exciting opportunity to visit my beautiful country! The conference is planned to host 800 guests from all over the world! </p><p>As part of my partnership with JS Poland, I’m delighted to offer you <strong>discount codes</strong> and one <strong>free ticket</strong>. To get the <strong>10% discount</strong>, register <a href="http://js-poland.pl/" target="_blank" rel="noopener">here</a> and use the following code: codewithstyle_._ The code is valid until <strong>2017-04-15 23:59</strong>. </p><p>Want to get the <strong>free ticket</strong> worth over <strong>100 EUR</strong>? Share this post on <a href="https://twitter.com/" target="_blank" rel="noopener">Twitter</a> and <a href="http://facebook.com" target="_blank" rel="noopener">Facebook</a>. The person with the highest count of likes under their share by the end of May will get a free ticket! </p><p>JS Poland is organized by my friend, <a href="https://twitter.com/ngKalbarczyk" target="_blank" rel="noopener">Dariusz Kalbarczyk</a>, who has already successfully organized <a href="http://www.ng-poland.pl/" target="_blank" rel="noopener">NgPoland 2016</a> conference which gathered more than 700 hundreds developers from all over the world. See you at <a href="http://js-poland.pl/" target="_blank" rel="noopener">JS Poland</a>!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/2017/04/jspoland.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;I proudly announce that my blog is partnering up with &lt;a href=&quot;http://js-poland.pl
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://codewithstyle.info/categories/JavaScript/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/JavaScript/Web/"/>
    
    
      <category term="javascript" scheme="https://codewithstyle.info/tags/javascript/"/>
    
      <category term="conferences" scheme="https://codewithstyle.info/tags/conferences/"/>
    
  </entry>
  
  <entry>
    <title>Setting up coverage reports on TFS with OpenCover</title>
    <link href="https://codewithstyle.info/setting-up-coverage-reports-on-vsts-with-opencover/"/>
    <id>https://codewithstyle.info/setting-up-coverage-reports-on-vsts-with-opencover/</id>
    <published>2017-03-30T16:27:25.000Z</published>
    <updated>2019-12-02T21:26:20.071Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.stack.imgur.com/KF67A.jpg" alt=""></p><p>Code coverage is a metric which indicates the percentage of volume of your source code covered by your tests. It is certainly a good idea to have code coverage reports generated as part of Continuous Integration - it allows you to keep track of quality of your tests or even set requirements for your builds to have a certain coverage. Code coverage in Visual Studio is only available in the Enterprise edition. Fortunately, thanks to OpenCover you can still generate coverage reports even if you don’t have access to the Enterprise license. In this article I will show you how to configure a Build Definition on Team Foundation Server 2015/2017 to use OpenCover to produce code coverage reports. </p><p><strong>UPDATE: The full script is available <a href="https://gist.github.com/miloszpp/629f6756185bbd8e3e8c0670f681b8c6" target="_blank" rel="noopener">here</a>.</strong> </p><p><strong>UPDATE 2: Christian Klutz has created a <a href="https://github.com/cklutz/my-vsts-tasks" target="_blank" rel="noopener">VSTS task</a> based on this article. You may want to check it out. Unfortunately, I won’t be able to offer any help on the topic since I haven’t been using TFS for some time.</strong></p><h3 id="Preparations"><a href="#Preparations" class="headerlink" title="Preparations"></a>Preparations</h3><p>We are going to put some files on TFS. We will need:</p><ul><li>RunOpenCover.ps1 - PowerShell script that will run OpenCover - we are going to write it in a moment</li><li><a href="https://github.com/Microsoft/vsts-task-lib" target="_blank" rel="noopener">vsts-task-lib</a> - a PowerShell script library which provides some helpful util functions</li><li><a href="https://www.nuget.org/packages/opencover" target="_blank" rel="noopener">OpenCover</a> executable</li><li><a href="https://www.nuget.org/packages/OpenCoverToCoberturaConverter/" target="_blank" rel="noopener">OpenCoverToCoberturaConverter</a> - a tool to convert the report to a format understandable by Visual Studio</li><li>(optional) <a href="https://www.nuget.org/packages/ReportGenerator/" target="_blank" rel="noopener">ReportGenerator</a> - a tool do generate HTML reports</li></ul><p>The last three items are available as NuGet packages. I suggest organizing all these files into the following directory structure:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">BuildTools</span><br><span class="line">\* Packages</span><br><span class="line">  \* OpenCover.4.6.519 - the contents of OpenCover package goes here</span><br><span class="line">  \* OpenCoverToCoberturaConverter.0.2.6.0 - the contents of OpenCoverToCoberturaConverter package goes here</span><br><span class="line">  \* ReportGenerator.2.5.6 - the contents of ReportGenerator package goes here</span><br><span class="line">\* Scripts</span><br><span class="line">  \* vsts-task-lib - the contents of vsts-task-lib / powershell / VstsTaskSdk goes here</span><br><span class="line">  \* RunOpenCover.ps1 - the script that we are going to write</span><br></pre></td></tr></table></figure><p>Once done, check it in to your TFS instance. I’ve put the BuildTools directory on the top level of the repository. Next, I’ve added a mapping to my Build Definition in order to make that directory available during the build.</p><h3 id="Create-the-PowerShell-script"><a href="#Create-the-PowerShell-script" class="headerlink" title="Create the PowerShell script"></a>Create the PowerShell script</h3><p>Let’s now write the PowerShell script. The script is going to perform a couple of steps:</p><ul><li>We would like our script to use a file pattern to scan for test assemblies in the same way that the “native” <em>Visual Studio Tests</em> task does. For that, we can use <em>Find-Files</em> cmdlet available in <em>vsts-task-lib</em>.</li><li>Next, we run OpenCover and use the list of paths with test assemblies as parameters.</li><li>Next, we need to convert the results file produced by OpenCover to Cobertura - a file format which TFS can understand.</li><li>Finally, we can use the same results file to produce an HTML, human-readable report.</li></ul><p>The script will take a couple of parameters as input:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Param(</span><br><span class="line">    [string]$sourcesDirectory, #the root of your project</span><br><span class="line">    [string]$testAssembly, #the file pattern describing test assemblies to look for</span><br><span class="line">    [string]$testFiltercriteria=&quot;&quot;, #test filter criteria (as in Run Visual Studio Tests task)</span><br><span class="line">    [string]$openCoverFilters=&quot;+[*]*&quot; #OpenCover-specific filters</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Next, let’s run the <em>Find-Files</em> utility to search against the pattern defined in <em>$testAssembly</em>. This code is copied from the original <a href="https://github.com/Microsoft/vsts-tasks/blob/master/Tasks/VsTest/VSTest.ps1" target="_blank" rel="noopener">Run Visual Studio Tests task source code</a>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">\# load helper functions from the vsts-task-lib library</span><br><span class="line">. $PSScriptRoot\\vsts-task-lib\\LegacyFindFunctions.ps1</span><br><span class="line">\# resolve test assembly files (copied from VSTest.ps1)</span><br><span class="line">$testAssemblyFiles = @()</span><br><span class="line">\# check for solution pattern</span><br><span class="line">if ($testAssembly.Contains(&quot;*&quot;) -Or $testAssembly.Contains(&quot;?&quot;))</span><br><span class="line">&#123;</span><br><span class="line">    Write-Host &quot;Pattern found in solution parameter. Calling Find-Files.&quot;</span><br><span class="line">    Write-Host &quot;Calling Find-Files with pattern: $testAssembly&quot;    </span><br><span class="line">    $testAssemblyFiles = Find-Files -LegacyPattern $testAssembly -LiteralDirectory $sourcesDirectory</span><br><span class="line">    Write-Host &quot;Found files: $testAssemblyFiles&quot;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    Write-Host &quot;No Pattern found in solution parameter.&quot;</span><br><span class="line">    $testAssembly = $testAssembly.Replace(&apos;;;&apos;, &quot;`0&quot;) # Barrowed from Legacy File Handler</span><br><span class="line">    foreach ($assembly in $testAssembly.Split(&quot;;&quot;))</span><br><span class="line">    &#123;</span><br><span class="line">        $testAssemblyFiles += ,($assembly.Replace(&quot;`0&quot;,&quot;;&quot;))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">\# build test assembly files string for vstest</span><br><span class="line">$testFilesString = &quot;&quot;</span><br><span class="line">foreach ($file in $testAssemblyFiles) &#123;</span><br><span class="line">    $testFilesString = $testFilesString + &quot; &quot;&quot;$file&quot;&quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can finally run OpenCover. The command to do this is pretty complicated. OpenCover supports different test runners (VSTest being only one of them) so we need to specify the path to VSTest as one of the arguments. The path below <code>(%VS140COMNTOOLS%..\\IDE\\CommonExtensions\\Microsoft\\TestWindow\\vstest.console.exe</code>) is valid for Visual Studio 2015 installation. Another important argument is -mergebyhash . It forces OpenCover to treat assemblies with the same hash as one. I’ve spent a few hours figuring out why my coverage score is so low. It turned out that OpenCover analyzed few copies of the same assembly.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Start-Process &quot;$PSScriptRoot\\..\\Packages\\OpenCover.4.6.519\\OpenCover.Console.exe&quot; -wait -NoNewWindow -ArgumentList &quot;-register:user -filter:&quot;&quot;$OpenCoverFilters&quot;&quot; -target:&quot;&quot;%VS140COMNTOOLS%\\..\\IDE\\CommonExtensions\\Microsoft\\TestWindow\\vstest.console.exe&quot;&quot; -targetargs:&quot;&quot;$testFilesString /TestCaseFilter:$testFiltercriteria /logger:trx&quot;&quot; -output:OpenCover.xml -mergebyhash&quot; -WorkingDirectory $PSScriptRoot</span><br></pre></td></tr></table></figure><p>Next, let’s convert the results generated by OpenCover to Cobertura format.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Start-Process &quot;$PSScriptRoot\\..\\Packages\\OpenCoverToCoberturaConverter.0.2.6.0\\tools\\OpenCoverToCoberturaConverter.exe&quot; -Wait -NoNewWindow -ArgumentList &quot;-input:&quot;&quot;$PSScriptRoot\\OpenCover.xml&quot;&quot; -output:&quot;&quot;$PSScriptRoot\\Cobertura.xml&quot;&quot; -sources:&quot;&quot;$sourcesDirectory&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><p>Finally, we will generate a HTML report based on the results from OpenCover.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Start-Process &quot;$PSScriptRoot\\..\\Packages\\ReportGenerator.2.5.6\\tools\\ReportGenerator.exe&quot; -Wait -NoNewWindow -ArgumentList &quot;-reports:&quot;&quot;$PSScriptRoot\\OpenCover.xml&quot;&quot; -targetdir:&quot;&quot;$PSScriptRoot\\CoverageReport&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><p>And that’s it.</p><h3 id="Configure-the-Build-Definition"><a href="#Configure-the-Build-Definition" class="headerlink" title="Configure the Build Definition"></a>Configure the Build Definition</h3><p>We will need to add three build steps to our Build Definition. If you have a <em>Visual Studio Tests</em> task in it, remove it - you will no longer need it.</p><ul><li><p><em>PowerShell</em> task - set the Script Path to point to RunOpenCover.ps1 and specify the Arguments:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-sourcesDirectory &quot;$(Build.SourcesDirectory)&quot; -testAssembly &quot;**\\*.Tests.dll;-:**\\obj\\**&quot; -testFiltercriteria &quot;TestCategory!=INTEGRATION&quot;</span><br></pre></td></tr></table></figure></li><li><p><em>Publish Test Results</em> task - configure it as on the image below; as a by-product of generating coverage reports, we produce test results - we need to tell TFS where to find them</p></li></ul><p><img src="/images/2017/03/opencover1-1.png" alt=""></p><ul><li><em>Publish Code Coverage Results</em> task - configure it as on the image below; thanks to this task the results will be visible  on the build summary page</li></ul><p><img src="/images/2017/03/opencover2-1.png" alt=""> </p><p>And that’s it! Run the build definition and enjoy your code coverage results. You can find the on the build summary page. The HTML report is available as one of the build artifacts.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/KF67A.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Code coverage is a metric which indicates the percentage of volume of your 
      
    
    </summary>
    
      <category term=".NET" scheme="https://codewithstyle.info/categories/NET/"/>
    
      <category term="Other topics" scheme="https://codewithstyle.info/categories/NET/Other-topics/"/>
    
      <category term="Tutorials" scheme="https://codewithstyle.info/categories/NET/Other-topics/Tutorials/"/>
    
    
      <category term="csharp" scheme="https://codewithstyle.info/tags/csharp/"/>
    
      <category term="tfs" scheme="https://codewithstyle.info/tags/tfs/"/>
    
      <category term="powershell" scheme="https://codewithstyle.info/tags/powershell/"/>
    
  </entry>
  
  <entry>
    <title>Understand monads with LINQ</title>
    <link href="https://codewithstyle.info/understand-monads-linq/"/>
    <id>https://codewithstyle.info/understand-monads-linq/</id>
    <published>2017-03-18T11:19:35.000Z</published>
    <updated>2019-12-02T21:26:20.072Z</updated>
    
    <content type="html"><![CDATA[<p>This post is another attempt on explaining <strong>the M word</strong> in an approachable way. This explanation will best suite C# developers who are familiar with LINQ and query expressions. However, if you are not familiar with C# but would like to learn how powerful and expressive some of its features are, please read on!</p><h3 id="Recap-of-LINQ-and-query-expressions"><a href="#Recap-of-LINQ-and-query-expressions" class="headerlink" title="Recap of LINQ and query expressions"></a>Recap of LINQ and query expressions</h3><p>LINQ is a technology introduced in C# 3.0 and .NET 3.5. One of its major applications is processing collections in an elegant, declarative way. Here’s an example of LINQ’s s_elect_ expression:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = <span class="keyword">new</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> squares = numbers.Select(x =&gt; x * x);</span><br></pre></td></tr></table></figure><p>Query expressions are one of the language features which constitute LINQ. Thanks to it LINQ expressions can look in a way which resembles SQL expressions:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> squares = <span class="keyword">from</span> x <span class="keyword">in</span> numbers <span class="keyword">select</span> x * x;</span><br></pre></td></tr></table></figure><p>Before LINQ you would need to write a horrible, imperative loop which literates over the <em>numbers</em> array and appends the results to a new array.</p><h3 id="Single-element-collection-Maybe-class"><a href="#Single-element-collection-Maybe-class" class="headerlink" title="Single element collection: Maybe class"></a>Single element collection: Maybe class</h3><p>It’s pretty easy to understand what <em>select</em> expression does in the above example: it apples a given expression to each element of a collection and produces a collection containing the results. Let’s now imagine that instead of arbitrary collection, we are working with a special kind of collection - one that can have either one element or no elements at all. In other words, it’s either empty, or full. How should <em>select</em> expression act on such a collection? Exactly the same way that it works with regular collections. If our collection has one element than apply the given expression to it and return a new collection with the result. If the collection is empty, just return an empty collection. Note that such a special collection is actually quite interesting - it represents an object that either has a value or is empty. Let’s create such an object and call it <em>Maybe</em>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Maybe&lt;TValue&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> TValue <span class="keyword">value</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">bool</span> hasValue;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">internal</span> <span class="title">Maybe</span>(<span class="params">TValue <span class="keyword">value</span>, <span class="keyword">bool</span> hasValue</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">value</span> = <span class="keyword">value</span>;</span><br><span class="line">        <span class="keyword">this</span>.hasValue = hasValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s create two factory methods to allow more convenient creation of instances of <em>Maybe</em>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">MaybeFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Maybe&lt;T&gt; Some&lt;T&gt;(T <span class="keyword">value</span>) =&gt; <span class="keyword">new</span> Maybe&lt;T&gt;(<span class="keyword">value</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Maybe&lt;T&gt; None&lt;T&gt;() =&gt; <span class="keyword">new</span> Maybe&lt;T&gt;(<span class="keyword">default</span>(T), <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Thanks to type inference in generic method calls and the <strong>static using</strong>feature we can now simply write:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> some = Some(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">var</span> none = None&lt;<span class="keyword">int</span>&gt;();</span><br></pre></td></tr></table></figure><h3 id="Making-Maybe-LINQ-friendly"><a href="#Making-Maybe-LINQ-friendly" class="headerlink" title="Making Maybe LINQ-friendly"></a>Making Maybe LINQ-friendly</h3><p>Since we’ve already discussed how <em>select</em> would work on <em>Maybe</em>, let’s implement it! Adding support for query expressions to your custom types is surprisingly easy. You just need to define a method which confirms to a specific signature (it’s an interesting design decision by C# creators which allows more flexibility than requiring the type to implement a specific interface).</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Maybe&lt;TResult&gt; Select&lt;TResult&gt;(Func&lt;TValue, TResult&gt; mapperExpression)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.hasValue)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> MaybeFactory.Some(mapperExpression(<span class="keyword">this</span>.<span class="keyword">value</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> MaybeFactory.None&lt;TResult&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>What’s going on here? Firstly, let’s take a look at the signature. Our method takes a function which transforms the value contained by <em>Maybe</em> to another type.  It returns an instance of <em>Maybe</em> containing an instance of the result type. If it’s confusing, just replace <em>Maybe</em> with <em>List</em> or _IEnumerable. _It makes perfect sense to write a <em>select</em> expression which transforms a list of <em>ints</em> to a list of <em>strings</em>. It works the same way with our <em>Maybe</em> type. <img src="/images/2017/03/select-1.png" alt="" title="select"> Now, the implementation. There are two cases:</p><ul><li>If the object contains a value than apply the <em>mapper</em> function and return a new <em>Maybe</em> instance with the result</li><li>If the object is empty, there is nothing to convert - return a new empty <em>Maybe</em> instance</li></ul><p>Let’s give it a try:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Maybe&lt;<span class="keyword">int</span>&gt; age = Some(<span class="number">27</span>);</span><br><span class="line">Maybe&lt;<span class="keyword">string</span>&gt; result = <span class="keyword">from</span> x <span class="keyword">in</span> age <span class="keyword">select</span> <span class="keyword">string</span>.Format(<span class="string">"I'am &#123;0&#125; years old"</span>, x);</span><br></pre></td></tr></table></figure><p>Nice! We can now use <em>select</em> expressions with <em>Maybe</em> type.</p><h3 id="Taking-it-one-step-further"><a href="#Taking-it-one-step-further" class="headerlink" title="Taking it one step further"></a>Taking it one step further</h3><p>Let’s now imagine that given an employee’s id, our goal is to return the name of theirs supervisor’s supervisor. A person can but does not have to have a supervisor. We are given a repository class with the following method:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">GetPersionById</span>(<span class="params">Guid id</span>) </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>And a <em>Person</em> class:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Person ReportsTo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In order to find the person’s supervisor’s supervisor’s name we would need to write a series of _if_ statements:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetSupervisorSupervisorName</span>(<span class="params">Person employee</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (employee != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (employee.ReportsTo != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (employee.ReportsTo.ReportsTo != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> employee.ReportsTo.ReportsTo.Name;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Can we improve this code with our new <em>Maybe</em> type? Of course we can! First of all, since <em>Maybe</em> represents a value which may or may not exist, it seems reasonable for <em>GetPersonById</em> to return <em>Maybe<person></person></em> instead of <em>Person</em>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Maybe&lt;Person&gt; <span class="title">GetPersonById</span>(<span class="params">Guid id</span>)</span></span><br></pre></td></tr></table></figure><p>Next, let’s modify the <em>Person</em> class. Since a person can either have or not have a supervisor, it’s again a good fit for the <em>Maybe</em> type:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">MonadicPerson</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Maybe&lt;MonadicPerson&gt; ReportsTo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Given these modifications we can now rewrite <em>GetSupervisorSupervisorName</em> in a neater and more elegant way:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Maybe&lt;<span class="keyword">string</span>&gt; <span class="title">GetSupervisorName</span>(<span class="params">Maybe&lt;MonadicPerson&gt; maybeEmployee</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">from</span> employee <span class="keyword">in</span> maybeEmployee</span><br><span class="line">           <span class="keyword">from</span> supervisor <span class="keyword">in</span> employee.ReportsTo</span><br><span class="line">           <span class="keyword">from</span> supervisorSupervisor <span class="keyword">in</span> supervisor.ReportsTo</span><br><span class="line">           <span class="keyword">select</span> supervisorSupervisor.Name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Why is this better than the previous version? First of all, we explicitly represent the fact that given a person, the method might or might not return a valid result. Previously, the method always returned a <em>string</em>. There was no way to indicate that it can sometimes return <em>null</em> (apart from a comment). A user of such a method could forget to perform null check and in consequence be surprised by a runtime error. What’s more, we avoid the nesting of if statements. In this example we only go two levels deep. What if there were 5 levels? Code without these nested if statements is much cleaner and more readable. It expresses the actual logic, not on the boilerplate of null-checking.</p><h3 id="Making-it-work"><a href="#Making-it-work" class="headerlink" title="Making it work"></a>Making it work</h3><p>If you’re copying these snippets to Visual Studio, you might have noticed that the last one won’t compile. By implementing <em>Select</em> we told the compiler how to apply functions to values inside <em>Maybe</em> instances. However, here we have a slightly more complex situation. We take a value which sits inside a <em>Maybe</em> instance and apply a function to it. As a result we get another <em>Maybe</em> instance, so now we have a <em>Maybe</em> inside a <em>Maybe</em>. The compiler doesn’t know how to handle this situation and we need to tell it by implementing <em>SelectMany</em>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Maybe&lt;TResult&gt; SelectMany&lt;TIntermediate, TResult&gt;(</span><br><span class="line">    Func&lt;TValue, Maybe&lt;TIntermediate&gt;&gt; mapper,</span><br><span class="line">    Func&lt;TValue, TIntermediate, TResult&gt; getResult</span><br><span class="line">)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.hasValue)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> intermediate = mapper(<span class="keyword">this</span>.<span class="keyword">value</span>);</span><br><span class="line">        <span class="keyword">if</span> (intermediate.hasValue)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> MaybeFactory.Some(getResult(<span class="keyword">this</span>.<span class="keyword">value</span>, intermediate.<span class="keyword">value</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> MaybeFactory.None&lt;TResult&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The first parameter to <em>SelectMany</em> is a function which takes a value (which sits inside <em>Maybe</em>) and returns a new <em>Maybe</em>. In our example, that would be a function which takes a <em>Person</em> and returns its <em>ReportsTo</em> property. The second parameter is a function which takes the original value, the value sitting inside <em>Maybe</em> returned by the first parameter and transforms both into a result. In our case that would be a function which takes a <em>Person</em> and returns its <em>Name</em>. Inside the implementation we have the nested if statements that we had to write when we didn’t use the _Maybe _type. And this is the crucial idea about monads - they help you hide ugly boilerplate code and let the developer focus on the actual logic. Again, let me draw a diagram for those of you who prefer visual aids: <img src="/images/2017/03/SelectMany.png" alt="" title="SelectMany"></p><h3 id="Ok-so-what’s-exactly-a-Monad"><a href="#Ok-so-what’s-exactly-a-Monad" class="headerlink" title="Ok, so what’s exactly a Monad?"></a>Ok, so what’s exactly a Monad?</h3><p>Monad is any generic type which implements _SelectMany _(strictly speaking, this is far from a formal definition, but I think it’s sufficient in this context and captures the core idea). <em>SelectMany</em> is a slightly more general version of an operation which in the functional programming world is referred to as <strong>bind</strong>. Monadic types are like wrappers around some values. Binding monads is all about composing them. By wrapping and unwrapping of the values inside monads, we can perform additional operations (such as handling empty results in our case) and hide them away from the user. <em>Maybe</em> is a classic example of a monad. Another great candidate for monad is C#’s <em>Task<t></t></em> type. You can think of it as a type that wraps some value (the one that will be returned when the task completes). By combining tasks you describe that one task should be executed after the other finishes.</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>I hope this article helped you understand what monads are about. If you find this interesting, check out the F# programming language where monads are much more common and feel more natural. Check out this excellent resource about F#: <a href="https://fsharpforfunandprofit.com/" target="_blank" rel="noopener">https://fsharpforfunandprofit.com/</a>. It’s also worth mentioning that there exists an interesting C# library which exploits the concepts I described in this article: <a href="https://github.com/louthy/csharp-monad" target="_blank" rel="noopener">https://github.com/louthy/csharp-monad</a>. Check it out if you’re interested.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This post is another attempt on explaining &lt;strong&gt;the M word&lt;/strong&gt; in an approachable way. This explanation will best suite C# develo
      
    
    </summary>
    
      <category term=".NET" scheme="https://codewithstyle.info/categories/NET/"/>
    
      <category term="Best Of" scheme="https://codewithstyle.info/categories/NET/Best-Of/"/>
    
      <category term="Other topics" scheme="https://codewithstyle.info/categories/NET/Best-Of/Other-topics/"/>
    
      <category term="Tutorials" scheme="https://codewithstyle.info/categories/NET/Best-Of/Other-topics/Tutorials/"/>
    
    
      <category term="functional programming" scheme="https://codewithstyle.info/tags/functional-programming/"/>
    
      <category term="monads" scheme="https://codewithstyle.info/tags/monads/"/>
    
      <category term="csharp" scheme="https://codewithstyle.info/tags/csharp/"/>
    
  </entry>
  
  <entry>
    <title>Firebase authentication in Angular2 application with Angularfire2</title>
    <link href="https://codewithstyle.info/firebase-authentication-angular2-application-angularfire2/"/>
    <id>https://codewithstyle.info/firebase-authentication-angular2-application-angularfire2/</id>
    <published>2017-02-22T16:21:01.000Z</published>
    <updated>2019-12-02T21:26:20.065Z</updated>
    
    <content type="html"><![CDATA[<p>Implementing authentication in web apps is a tedious and repetitive task. What’s more, it’s very easy to do it wrong and expose security holes in our app. Fortunately, <strong>Firebase Authentication</strong> comes to rescue offering authentication as a service. It means that you no longer need to implement storage and verification of credentials, email verification, password recovery, etc. In this post I’ll explain how to add email/password authentication to an Angular2 application. </p><p>Site note: Firebase Authentication can be very useful when building a <a href="http://codewithstyle.info/building-serverless-web-application-angular-2-webtask-firebase/">serverless application</a>. For reference, here is a working example illustrating this article: <a href="https://github.com/miloszpp/angularfire-sdk-auth-sample" target="_blank" rel="noopener">https://github.com/miloszpp/angularfire-sdk-auth-sample</a>.  </p><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>Firebase offers two ways of implementing authentication:</p><ul><li><strong>FirebaseUI Auth</strong> - a library of ready-to-use GUI components (such as login/registration forms, password recovery, etc.)</li><li><strong>Firebase Authentication SDK</strong> - a more flexible approach in which we need to implement above components ourselves; the role of Firebase is to store and verify user credentials; let’s focus on this one</li></ul><p>We’ll implement three components:</p><ul><li><strong>Register</strong> component will show a registration form and will ask Firebase to create an entry for a user upon submission</li><li><strong>Login</strong> component will show a login form and will ask Firebase to verify provided credentials upon submission</li><li><strong>Home</strong> component will show the currently logged user (provided there is one)</li></ul><p>We’ll use the excellent <a href="https://github.com/angular/angularfire2" target="_blank" rel="noopener">Angularfire2</a> library. It provides an Angular-friendly abstraction layer over Firebase. Additionally, it exposes <em>authentication state</em> as an <strong>observable</strong>, making it very easy for other components to subscribe to events such as login and logout.</p><h3 id="Preparations"><a href="#Preparations" class="headerlink" title="Preparations"></a>Preparations</h3><p>To begin with, let’s install Angularfire2 and Firebase modules:</p><p>npm install firebase angularfire2</p><p>Next, we need to enable email/password authentication method in the Firebase console. </p><p><img src="/images/2017/02/Zrzut-ekranu-2017-02-21-o-21.27.24-1024x414.png" alt="Firebase: enabling email/password authentication"> </p><p>Finally, let’s load Angularfire2 in our <strong>app.module.ts</strong>:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; AuthProviders, AuthMethods &#125; <span class="keyword">from</span> <span class="string">'angularfire2'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> authConfig = &#123;</span><br><span class="line">    provider: AuthProviders.Password,</span><br><span class="line">    method: AuthMethods.Password</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  declarations: [ <span class="comment">/* ... */</span> ],</span><br><span class="line">  imports: [</span><br><span class="line">    AngularFireModule.initializeApp(config.firebase, authConfig),</span><br><span class="line">    /\* ... *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">  ],</span></span><br><span class="line"><span class="regexp">  providers: [],</span></span><br><span class="line"><span class="regexp">  bootstrap: [AppComponent]</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp">export class AppModule &#123; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="Login-component"><a href="#Login-component" class="headerlink" title="Login component"></a>Login component</h3><p>Firstly, let’s inject AngularFire into the component:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> model: LoginModel;</span><br><span class="line"><span class="keyword">public</span> authState: FirebaseAuthState;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> af: AngularFire</span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>.model = &#123; email: <span class="string">""</span>, password: <span class="string">""</span> &#125;;</span><br><span class="line">  <span class="keyword">this</span>.af.auth.subscribe(<span class="function">(<span class="params">auth</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.authState = auth;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you can see, this.af.auth  is an observable. It fires whenever an event related to authentication occurs. In our case, it’s either logging in or logging out. FirebaseAuthState  stores information about currently logged user. Next, let’s add two methods for logging in and logging out:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> submit() &#123;</span><br><span class="line">  <span class="keyword">this</span>.af.auth.login(<span class="keyword">this</span>.model).catch(alert);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> logout() &#123;</span><br><span class="line">  <span class="keyword">this</span>.af.auth.logout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you can see, we simply propagate calls to the Angularfire2 API. When logging in, we need to provide email and password (encapsulated in model). Finally, we need some HTML to display the form:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> (<span class="attr">ngSubmit</span>)=<span class="string">"submit()"</span> *<span class="attr">ngIf</span>=<span class="string">"!authState"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"Email"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"model.email"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"password"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"model.password"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">"authState"</span>&gt;</span></span><br><span class="line">  Logged as &#123; &#123; authState.auth.email &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"logout()"</span>&gt;</span>Logout<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The form is only visible when the user is not logged in (authState  will be undefined). Otherwise, we show the user name and the logout button.</p><h3 id="Register-component"><a href="#Register-component" class="headerlink" title="Register component"></a>Register component</h3><p>We’ve allowed our users to logged in but so far there are no registered users! Let’s fix that and create a registration component. Firstly, we need to inject the AngularFire service just like we did in the login controller. Next, let’s create a method to be called when the user provides his registration details:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> submit() &#123;</span><br><span class="line">  <span class="keyword">this</span>.af.auth.createUser(<span class="keyword">this</span>.model).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="comment">/* success! */</span>, alert);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Finally, here goes the HTML form:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> (<span class="attr">ngSubmit</span>)=<span class="string">"submit()"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"Email"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"model.email"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"password"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"model.password"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>In this tutorial I showed you how to take advantage of Firebase Authentication and use it in an Angular 2 application. This example doesn’t exploit the full potential of Firebase Authentication - it can also do email verification (with actual email sending and customizable email templates), password recovery and logging in with social accounts (Facebook, Twitter, etc.). I will touch on these topics in the following articles. Let me know if you have any feedback regarding this post - feel free to post a comment!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Implementing authentication in web apps is a tedious and repetitive task. What’s more, it’s very easy to do it wrong and expose security 
      
    
    </summary>
    
      <category term="Angular" scheme="https://codewithstyle.info/categories/Angular/"/>
    
      <category term="Tutorials" scheme="https://codewithstyle.info/categories/Angular/Tutorials/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/Angular/Tutorials/Web/"/>
    
    
      <category term="angular" scheme="https://codewithstyle.info/tags/angular/"/>
    
      <category term="firebase" scheme="https://codewithstyle.info/tags/firebase/"/>
    
      <category term="serverless" scheme="https://codewithstyle.info/tags/serverless/"/>
    
  </entry>
  
  <entry>
    <title>C# in Depth: book notes</title>
    <link href="https://codewithstyle.info/c-depth-book-notes/"/>
    <id>https://codewithstyle.info/c-depth-book-notes/</id>
    <published>2017-01-15T19:03:55.000Z</published>
    <updated>2019-12-02T21:26:20.064Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2017/01/pobrane-1.jpeg" alt="pobrane"></p><p>I just finished reading this must-read position for C# developers. I believe that it’s very easy to learn a programming language to an extent that is sufficient for creating software. Because of that, one can easily lose motivation to dig deeper and gain better understanding of the language. C# in Depth is a proof of why one shouldn’t stop at this point. There is a lot to learn by looking at the details of a language, how it evolved and how some of it’s features are implemented. I think the book is fantastic. I loved the author’s writing style which is very precise (very little hand waving) but not boring at the same time. It feels that he’s giving you just the right amount of detail. Here are a couple of interesting things I learned about when reading the book. The list is by no means complete but it gives a taste of what’s in the book.</p><ul><li>I learned that it’s possible to support LINQ query expressions for your own types very easily. The mechanism is convention-based - there is no specific interface to implement. Your type must have methods that match some specific signatures. This didn’t sound well to me in the first place, but if you think about it, it allows for greater flexibility. For example, with such approach you can add query expression support to existing types (which you don’t have control over) with extension methods.</li><li>I finally understood why the keywords used to indicate variance in generic types are called out and in. Generic type parameter can be covariant if it’s used for values that are coming out of an API (something’s coming out so you can only increase the restriction on it when deriving). Conversely, when value is an input of an API it’s type can be contravariant (something’s coming in, so you can relax the restrictions when deriving). This explanation plays well with my intuition of how collections can be covariant as long as they are immutable (i.e. there are no inputs to the API)</li><li>I understood how dynamic typing is implemented in C# and how to create your own types which can react dynamically (with IDynamicMetaObjectProvider, DynamicObject and ExpandObject). The chapter explaining what code is generated when making dynamic calls is the most complex (and most interesting) piece of the book.</li><li>I understood what code is generated when using the async/await feature and what are the consequences. For example, the code inside an async method does not execute until you await it. Therefore, argument validation wouldn’t give immediate feedback to the caller unless the method is awaited at the point of calling. The same applies to iterators.</li><li>I learned that something as simple as a foreach loop is actually doing a lot of work under the hood - it creates a try/catch/finally block and disposes of the enumerator if it happens to implement Disposable.</li><li>I embraced the complexity of type inference of lambda expression parameters and return types.</li></ul><p>To sum up, I totally recommend reading this book. It’s not a small time investment, but I think it’s totally worth it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/2017/01/pobrane-1.jpeg&quot; alt=&quot;pobrane&quot;&gt;&lt;/p&gt;
&lt;p&gt;I just finished reading this must-read position for C# developers. I beli
      
    
    </summary>
    
      <category term=".NET" scheme="https://codewithstyle.info/categories/NET/"/>
    
      <category term="Articles" scheme="https://codewithstyle.info/categories/NET/Articles/"/>
    
      <category term="Other topics" scheme="https://codewithstyle.info/categories/NET/Articles/Other-topics/"/>
    
      <category term="Thoughts" scheme="https://codewithstyle.info/categories/NET/Articles/Other-topics/Thoughts/"/>
    
    
      <category term="csharp" scheme="https://codewithstyle.info/tags/csharp/"/>
    
      <category term="book" scheme="https://codewithstyle.info/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>Building serverless web application with Angular 2, Webtask and Firebase</title>
    <link href="https://codewithstyle.info/building-serverless-web-application-angular-2-webtask-firebase/"/>
    <id>https://codewithstyle.info/building-serverless-web-application-angular-2-webtask-firebase/</id>
    <published>2016-12-27T16:46:43.000Z</published>
    <updated>2019-12-02T21:26:20.064Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I’ve been playing a lot with my pet project <a href="http://codewithstyle.info/tradux/">Tradux</a>. It is a simple trading platform simulator which I built as an exercise in Redux, event sourcing and serverless architectures. I’ve decided to share some of the knowledge I learned in the form of this tutorial. </p><p>We’re going to build (guess what?) a TODO app. The client (in Angular 2) will be calling a Webtask whenever an event occurs (task created or task marked as done). The Webtask will update the data in the Firebase Database which will be then synchronized to the client. Webtask is function-as-a-service offering which allows you to run pieces of code on demand, without having to worry about infrastructure, servers, etc. - i.e. serverless. </p><p><img src="/images/2016/12/Architecture.png" alt="Architecture" title="Architecture"> </p><p>The full source code is available on <a href="https://github.com/miloszpp/serverless-todo" target="_blank" rel="noopener">Github</a>. </p><p><strong>UPDATE:</strong> recently I gave a talk on this topic during <a href="https://www.meetup.com/AngularJS-Warsaw/events/237216962/" target="_blank" rel="noopener">#11 AngularJS Warsaw meetup</a>. During the talk I built a silghtly different demo application which additionally performs spell checking in the webtask. Check out the <a href="https://github.com/miloszpp/angularjs-warsaw-serverless" target="_blank" rel="noopener">Github repo</a> for the source code.</p><h3 id="Project-skeleton"><a href="#Project-skeleton" class="headerlink" title="Project skeleton"></a>Project skeleton</h3><p>Let’s start with a very simple client in Angular 2. We will use Angular CLI to scaffold most of the code.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g angular-cli</span><br><span class="line">ng new serverless-todo</span><br></pre></td></tr></table></figure><p>It takes a while for this command to run and it will install much more stuff than we need, but it’s still the quickest and most convenient way to go. Let’s create a single component.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd serverless-todo</span><br><span class="line">ng generate component tasks</span><br></pre></td></tr></table></figure><p>Now, let’s create the following directory structure. We’d like to share some code between the client and the webtask so we will put it in common directory.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">|--app // the Angular 2 application</span><br><span class="line">|--common // stuff shared between the client and webtasks</span><br><span class="line">|  |--config.ts // Firebase and Webtask connection details</span><br><span class="line">|  |--config-secret.ts // secret parts of our config - careful not to share this</span><br><span class="line">|  `--model.ts // common interface definitions</span><br><span class="line">`--webtasks // source code for webtasks</span><br><span class="line">   |--add-task.ts // there will be only one webtask - it will be used for adding items to our list</span><br></pre></td></tr></table></figure><p>Let’s start with defining the following interfaces inside model.ts. The first one is a command that will be sent from the client to the webtask. The second one is the entity representing an item on the list that will be stored in the database.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> AddTaskCommand &#123;</span><br><span class="line">    content: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Task &#123;</span><br><span class="line">    content: <span class="built_in">string</span>;</span><br><span class="line">    created: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Finally, remember to add the Tasks component to app.component.html :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-tasks</span>&gt;</span><span class="tag">&lt;/<span class="name">app-tasks</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Adding-Firebase-to-the-Client"><a href="#Adding-Firebase-to-the-Client" class="headerlink" title="Adding Firebase to the Client"></a>Adding Firebase to the Client</h3><p>Before we proceed, you need to create a <a href="https://firebase.google.com/" target="_blank" rel="noopener">Firebase</a> account. Firebase is a cloud platform which provides useful services for developing and deploying web and mobile applications. We will focus on one particular aspect of Firebase - the Realtime Database. The Realtime Database is a No-SQL storage mechanism which supports automatic synchronization of clients. In other words, when one of the clients modifies a record in the database, all other clients will see the changes (almost in real-time). Once you created the account, let’s modify the database access rules. By default, the database only allows authenticated users. We will change it to allow anonymous reads. You can find the Rules tab once you click on the Database menu item.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;rules&quot;: &#123;</span><br><span class="line">    &quot;.read&quot;: true,</span><br><span class="line">    &quot;.write&quot;: &quot;auth != null&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Firebase provides a generous limit in the free Spark subscription. Create an account and define a new application. Once you are done, put the following definition in config.ts :</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> config = &#123;</span><br><span class="line">    addTaskUrl: <span class="string">""</span>,</span><br><span class="line">    firebase: &#123;</span><br><span class="line">        apiKey: <span class="string">"&lt;&lt;YOUR API KEY&gt;&gt;"</span>,</span><br><span class="line">        authDomain: <span class="string">"&lt;&lt;YOUR FIREBASE PROJECT ID&gt;&gt;.firebaseapp.com"</span>,</span><br><span class="line">        databaseURL: <span class="string">"https://&lt;&lt;YOUR FIREBASE PROJECT ID&gt;&gt;.firebaseio.com/"</span>,</span><br><span class="line">        storageBucket: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>If you cannot find your settings, here is a helper for you. If you are really lazy, you can use the following settings, although I cannot guarantee any availability. <img src="/images/2016/12/firebase2.png" alt="firebase2"> Let’s now add Firebase to our client. There is an excellent library called AngularFire2 which we are going to use. Run the following commands:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save firebase</span><br><span class="line">npm install --save angularfire2</span><br></pre></td></tr></table></figure><p>Modify the imports section of AppModule  inside app.module.ts  so that it looks like this (you can import AngularFireModule  from angularfire2  module):</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    FormsModule,</span><br><span class="line">    HttpModule,</span><br><span class="line">    AngularFireModule.initializeApp(config.firebase)</span><br><span class="line">  ],</span><br></pre></td></tr></table></figure><p>Now you can inject AngularFire object to Tasks component (tasks.compontent.ts ):</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> tasks: FirebaseListObservable&lt;Task[]&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> http: Http, angularFire: AngularFire</span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>.tasks = angularFire.database.list(<span class="string">'tasks'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You will also need some HTML to display tasks. I will include the form for adding tasks as well (tasks.component.html ):</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>TODO list<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"content"</span>&gt;</span>Task<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"content"</span> #<span class="attr">content</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> (<span class="attr">click</span>)=<span class="string">"addTask(content.value)"</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let task of tasks | async"</span>&gt;</span></span><br><span class="line">      &#123; &#123; task.content &#125;&#125; <span class="tag">&lt;<span class="name">small</span>&gt;</span>&#123; &#123; task.created | date &#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Our client is ready to display tasks, however there are no tasks in the database yet. Note how we can bind directly to FirebaseListObservable - Firebase will take care of all the updates for us.</p><h3 id="Creating-the-Webtask"><a href="#Creating-the-Webtask" class="headerlink" title="Creating the Webtask"></a>Creating the Webtask</h3><p>Now we need to create the Webtask responsible for adding tasks to the list. Before we continue, please create an account on <a href="http://webtask.io/" target="_blank" rel="noopener">webtask.io</a>. Again, you can use it for free for the purposes of this tutorial. The website will ask you to run the following commands:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install wt-cli -g</span><br><span class="line">wt init &lt;&lt;YOUR EMAIL&gt;&gt;</span><br></pre></td></tr></table></figure><p>Creating Webtasks is amazingly easy. You just need to define a function which takes a HTTP context and a callback to execute when the job is done. Paste the following code inside webtasks/add-task.ts :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; config &#125; <span class="keyword">from</span> <span class="string">'../common/config'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; firebaseSecret &#125; <span class="keyword">from</span> <span class="string">'../common/config-secret'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AddTaskCommand, Task &#125; <span class="keyword">from</span> <span class="string">'../common/model'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">context, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> tasksUrl = <span class="string">`<span class="subst">$&#123;config.firebase.databaseURL&#125;</span>/tasks.json?auth=<span class="subst">$&#123;firebaseSecret&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">const</span> command = <span class="xml"><span class="tag">&lt;<span class="name">AddTaskCommand</span>&gt;</span>context.body;</span></span><br><span class="line"><span class="xml">    console.log(\`Received command: $&#123;JSON.stringify(command)&#125;\`);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    const task: Task = &#123;</span></span><br><span class="line"><span class="xml">        content: command.content,</span></span><br><span class="line"><span class="xml">        created: Date.now()</span></span><br><span class="line"><span class="xml">    &#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    const requestOptions = &#123;</span></span><br><span class="line"><span class="xml">        method: 'POST',</span></span><br><span class="line"><span class="xml">        url: tasksUrl,</span></span><br><span class="line"><span class="xml">        json: task</span></span><br><span class="line"><span class="xml">    &#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    request(requestOptions, () =&gt; callback(null, "Finished"));</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>The above snippet parses the request body (note how it uses the same AddTaskCommand  interface that the client). Later, it creates a Task  object and calls Firebase via the REST API to add the object to the collection. You could use the Firebase Javascript client instead of calling the REST API directly, however I couldn’t get it working in the Webtask environment. Obviously in a production app you would perform validation here. Note that you need to define the firebaseSecret  constant. You can find the private API key here: </p><p><img src="/images/2016/12/Zrzut-ekranu-2016-12-27-o-18.24.37-1024x566.png" alt="zrzut-ekranu-2016-12-27-o-18-24-37"> </p><p>Firebase complains that this is a legacy method but it’s simply the quickest way to do that. Why do we need to pass the secret now? That’s because we defined a database access rule which says that anonymous writes are not permitted. Using the secret key allows us to bypass the rule. Obviously, in a production app you would use some proper authentication. We are ready to deploy the Webtask. A Webtask has to be a single JavaScript file. Ours is TypeScript and it depends on many other modules. Fortunately, Webtask.io provides a bundler which can do the hard work for us. Install it with the following command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g webtask-bundle</span><br></pre></td></tr></table></figure><p>Now we can compile the TypeScript code to JavaScript, then run the bundler to create a single file and then deploy it using the Webtask CLI:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tsc add-task.ts &amp;&amp; \</span><br><span class="line">wt-bundle --output add-task-bundle.js add-task.js &amp;&amp; \</span><br><span class="line">wt create add-task-bundle.js &amp;&amp; \</span><br><span class="line">wt ls</span><br></pre></td></tr></table></figure><p>Voila, the Webtask is now in the wild. The CLI will tell you its URL. Copy it and paste inside config.ts:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> config = &#123;</span><br><span class="line">    addTaskUrl: <span class="string">"&lt;&lt;YOUR WEBTASK URL&gt;&gt;"</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Calling-the-Webtask-from-the-Client"><a href="#Calling-the-Webtask-from-the-Client" class="headerlink" title="Calling the Webtask from the Client"></a>Calling the Webtask from the Client</h3><p>There is just one missing part - we need to call the Webtask from the client. Go to the Tasks component and add the below method:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">addTask(content: <span class="built_in">string</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> command: AddTaskCommand = &#123; content &#125;;</span><br><span class="line">  <span class="built_in">console</span>.log(\<span class="string">`Adding task: <span class="subst">$&#123;JSON.stringify(command)&#125;</span>\`);</span></span><br><span class="line"><span class="string">  this.http.post(config.addTaskUrl, command).subscribe(</span></span><br><span class="line"><span class="string">    () =\&gt; console.log('Success'),</span></span><br><span class="line"><span class="string">    error =&gt; alert(\`Adding task failed with error <span class="subst">$&#123;error&#125;</span>\`)</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>This function is already linked to in HTML. Now, run the following command in console and enjoy the result!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng serve</span><br></pre></td></tr></table></figure><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>In this short tutorial I showed how to quickly build a serverless web application using Webtasks. Honestly, you achieve the same result without the Webtasks and by talking directly to Firebase from the Client. However, having this additional layer allows you to perform complex validation or calculations. See <a href="http://codewithstyle.info/tradux/">Tradux</a> for a nice example of a complex Webtask. You can very easily use Firebase to deploy your app.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently I’ve been playing a lot with my pet project &lt;a href=&quot;http://codewithstyle.info/tradux/&quot;&gt;Tradux&lt;/a&gt;. It is a simple trading platf
      
    
    </summary>
    
      <category term="Angular" scheme="https://codewithstyle.info/categories/Angular/"/>
    
      <category term="Best Of" scheme="https://codewithstyle.info/categories/Angular/Best-Of/"/>
    
      <category term="Tutorials" scheme="https://codewithstyle.info/categories/Angular/Best-Of/Tutorials/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/Angular/Best-Of/Tutorials/Web/"/>
    
    
      <category term="angular" scheme="https://codewithstyle.info/tags/angular/"/>
    
      <category term="firebase" scheme="https://codewithstyle.info/tags/firebase/"/>
    
      <category term="serverless" scheme="https://codewithstyle.info/tags/serverless/"/>
    
      <category term="webtask" scheme="https://codewithstyle.info/tags/webtask/"/>
    
  </entry>
  
  <entry>
    <title>ngPoland - Angular Conference 2016</title>
    <link href="https://codewithstyle.info/ngpoland-angular-conference-2016/"/>
    <id>https://codewithstyle.info/ngpoland-angular-conference-2016/</id>
    <published>2016-11-22T18:49:27.000Z</published>
    <updated>2019-12-02T21:26:20.069Z</updated>
    
    <content type="html"><![CDATA[<p>Today I attendend <a href="http://ng-poland.pl" target="_blank" rel="noopener">ngPoland</a> - the first international conference devoted to Angular in Central Europe. I’ve had some really good time there and decided to share some of the amazing things I learned about. First of all, I was surprised to learn how good some of the speakers were at catching people attention and making sure that everyone stays awake. The conference was pretty intense (I counted 15 talks) so it was quite a challange. It was inspiring to see how got can one become at public speaking and working with large audiences. </p><p><img src="/images/2016/11/ngpol-1024x366.jpg" alt="Photo by Phil Nash from Twilio"></p><p>The key takeaway for me is to deffinietly <strong>look into <a href="http://redux.js.org" target="_blank" rel="noopener">Redux</a></strong> (the presentation by <a href="https://twitter.com/nirkaufman" target="_blank" rel="noopener">Nir Kaufman</a>). The framework introduces a great idea from functional programming to the frontend world. Redux allows you to express your application’s logic as a set of reducer functions which are applied on the global, immutable state object in order to produce the “next version” of state. Thanks to that, it’s much easier to control and predict state transitions. Similiarity to the <a href="https://wiki.haskell.org/State_Monad" target="_blank" rel="noopener">State Monad</a> seem obvious. </p><p>Another very interesting point was the presentation by <a href="http://acaisoft.com" target="_blank" rel="noopener">Acaisoft’s</a> founder who showed a live demo of an on-line quiz app with real-time statistics. The application was implemented in Angular 2 with <strong>serverless architecture</strong> (<a href="https://aws.amazon.com/iot/" target="_blank" rel="noopener">AWS Internet of Things</a> on the backend side), <strong>event-sourcing</strong> and <strong>WebSockets</strong>. It was exciting to observe a live chart presenting aggregated answers of 250 conference participants who connected with their mobiles. </p><p>Definietly the most spectacular talk was the one about <strong>using Angular to control hardware connected to a Raspberry Pi device</strong> (by <a href="https://twitter.com/UriShaked" target="_blank" rel="noopener">Uri Shaked</a>)! The guy built a physical <a href="https://en.wikipedia.org/wiki/Simon_(game" target="_blank" rel="noopener">Simon game</a>) that was controlled by an Angular app. Thanks to <a href="https://github.com/urish/angular2-iot" target="_blank" rel="noopener">angular-iot</a> he was able to bind LED lights to his model class. The idea sounds crazy but it’s a really convincing demonstration that Angular can be useful outside of the browser. If you are interested, you can read more <a href="https://medium.com/@urish/building-simon-with-angular2-iot-part-2-ee3a270747b5" target="_blank" rel="noopener">here</a>. </p><p>Last but not the last, I have to mention the workshop about <strong>TypeScript 2</strong> (again by <a href="https://twitter.com/UriShaked" target="_blank" rel="noopener">Uri</a>) which I attended the day before. Although I knew TypeScript before, it was interesting to learn about the new features such as <strong>null strictness</strong> and <strong>async/await</strong>. Coming from a C# background, it’s very easy to spot the Microsoft touch in TypeScript. I believe the language is evolving into the right direction and I’m happy to see more and more ideas from functional programming being incorporated in other areas. </p><p>Wrapping up, I think the conference was very convincing at demonstrating how much stuff is happening around frontend development. I like the general direction towords each its evolving and I hope that I will have many opportunities to work with all the new stuff.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today I attendend &lt;a href=&quot;http://ng-poland.pl&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ngPoland&lt;/a&gt; - the first international conference devoted 
      
    
    </summary>
    
      <category term="Angular" scheme="https://codewithstyle.info/categories/Angular/"/>
    
      <category term="Articles" scheme="https://codewithstyle.info/categories/Angular/Articles/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/Angular/Articles/Web/"/>
    
    
      <category term="angular" scheme="https://codewithstyle.info/tags/angular/"/>
    
      <category term="conferences" scheme="https://codewithstyle.info/tags/conferences/"/>
    
  </entry>
  
  <entry>
    <title>&quot;Scalability Rules: 50 Principles for Scaling Web Sites&quot; review</title>
    <link href="https://codewithstyle.info/book-review-scalability-rules-50-principles-scaling-web-sites/"/>
    <id>https://codewithstyle.info/book-review-scalability-rules-50-principles-scaling-web-sites/</id>
    <published>2016-10-17T10:27:57.000Z</published>
    <updated>2019-12-02T21:26:20.064Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://d188rgcu4zozwl.cloudfront.net/content/B01L2B6XCE/resources/1105301499" alt=""></p><p>Recently I decided to get into the habit of reading IT books regularly. To start with, I wanted read something about building scalable architectures. I did a quick research on Amazon and chose <a href="https://www.amazon.com/Scalability-Rules-Principles-Scaling-Sites/dp/013443160X/ref=sr_1_1?ie=UTF8&amp;qid=1476707155&amp;sr=8-1&amp;keywords=Scalability+Rules" target="_blank" rel="noopener"><em>Scalability Rules: 50 Principles for Scaling Web Sites</em></a> by Martin L. Abbott, Michael T. Fisher. </p><p>Based on comments and reviews, it was supposed to be more on the technical side. I was slightly disappointed in this aspect. However, I think this is still a worthy read. The book is divided into 13 chapters. Each of the chapters contains several rules. What stroke me is that these rules are very diverse. </p><p>We’ve got some very, very general advice that could be applied to any kind of software development (e.g. <em>Don’t overengineer</em>, <em>Learn aggressively</em>, <em>Be competent</em>). We’ve got stuff for CTOs or IT directors in large corporations (e.g. <em>Have at least 3 data centers</em>, <em>Don’t rely on QA to find mistakes</em>). There are also some specific, technical rules - what I was after in the first place. I’m not convinced mixing these very different kinds of knowledge makes sense since they are probably targeted to different audiences (which is even acknowledge by the authors in the first chapter). </p><p>Some of the rules felt like formalized common sense, backed with some war stories from the authors’ experience (e.g. <em>AFK Cube</em>). However, some of the stuff was indeed new to me. It was also interesting to see the bigger picture and the business side of things (potential business impact of failures, emphasis on the costs of different solutions, etc.). </p><p>I think the book is a great choice if you are a CTO of a SaaS startup or a freshly promoted Architect without prior experience of building scalable apps (having the experience would probably teach you much then the book). If you are a Developer who wants to get some very specific, technical advice then the book will serve well as an overview of topics that you should learn more deeply for other sources (such as database replication, caching, load balancing, alternative storage systems). Nevertheless, I think the book is a worthy read that will broaden your perspective.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://d188rgcu4zozwl.cloudfront.net/content/B01L2B6XCE/resources/1105301499&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Recently I decided to get into th
      
    
    </summary>
    
      <category term="Articles" scheme="https://codewithstyle.info/categories/Articles/"/>
    
      <category term="Other topics" scheme="https://codewithstyle.info/categories/Articles/Other-topics/"/>
    
      <category term="Thoughts" scheme="https://codewithstyle.info/categories/Articles/Other-topics/Thoughts/"/>
    
    
      <category term="architecture" scheme="https://codewithstyle.info/tags/architecture/"/>
    
      <category term="book" scheme="https://codewithstyle.info/tags/book/"/>
    
      <category term="scalability" scheme="https://codewithstyle.info/tags/scalability/"/>
    
  </entry>
  
  <entry>
    <title>Slick vs Anorm - choosing a DB framework for your Scala application</title>
    <link href="https://codewithstyle.info/slick-vs-anorm-choosing-db-framework-scala-application/"/>
    <id>https://codewithstyle.info/slick-vs-anorm-choosing-db-framework-scala-application/</id>
    <published>2016-07-09T14:48:16.000Z</published>
    <updated>2019-12-02T21:26:20.071Z</updated>
    
    <content type="html"><![CDATA[<p>Scala doesn’t offer many DB access libraries. <a href="http://slick.lightbend.com" target="_blank" rel="noopener">Slick</a> and <a href="https://www.playframework.com/documentation/2.5.x/ScalaAnorm" target="_blank" rel="noopener">Anorm</a> seem to be the most popular - both being available in the <a href="https://www.playframework.com" target="_blank" rel="noopener">Play framework</a>. Despite both serving the same purpose, they present completely different approaches. In this post I’d like to present some arguments that might help when choosing between these two.</p><h3 id="What-is-Slick"><a href="#What-is-Slick" class="headerlink" title="What is Slick?"></a>What is Slick?</h3><p>Slick is a <strong>Functional Relational Mapper</strong>. You might be familiar with Object Relational Mappers such as Hibernate. Slick embraces Scala’s functional elements and offers an alternative. Slick authors claim that the gap between relational data and functional programming is much smaller than between object-oriented programming. Slick allows you to write type safe, SQL-like queries in Scala which are translated into SQL. You define mappings which translate query results into your domain classes (and the other way for INSERT  and UPDATE ). Writing plain SQL is also allowed.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Example taken from docs</span></span><br><span class="line">( <span class="keyword">for</span>( c &lt;- coffees; <span class="keyword">if</span> c.price &lt; limit ) <span class="keyword">yield</span> c.name ).result</span><br><span class="line"><span class="comment">// Equivalent SQL: select COF_NAME from COFFEES where PRICE &lt; 10.0</span></span><br></pre></td></tr></table></figure><h3 id="What-is-Anorm"><a href="#What-is-Anorm" class="headerlink" title="What is Anorm?"></a>What is Anorm?</h3><p>Anorm is a thin layer providing database access. It is in a way similar to Spring’s JDBC templates. In Anorm you write queries in plain SQL. You can define your own row parsers which translate query result into your domain classes. Anorm provides a set of handy macros for generating parsers. Additionally, it offers protection against SQL injection with prepared statements. Anorm authors claim that SQL is the best DSL for accessing relational database and introducing another one is a mistake.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example taken from docs</span></span><br><span class="line"><span class="type">SQL</span><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">  select * from Country c </span></span><br><span class="line"><span class="string">    join CountryLanguage l on l.CountryCode = c.Code </span></span><br><span class="line"><span class="string">    where l.Language = $lang and c.Population &gt;= $&#123;population - margin&#125;</span></span><br><span class="line"><span class="string">    order by c.Population desc limit 1"</span><span class="string">""</span></span><br><span class="line">  .as(<span class="type">SqlParser</span>.str(<span class="string">"Country.code"</span>).single</span><br></pre></td></tr></table></figure><h3 id="Blocking-non-blocking"><a href="#Blocking-non-blocking" class="headerlink" title="Blocking/non-blocking"></a>Blocking/non-blocking</h3><p>As mentioned, Slick API is non-blocking. Slick queries return instances of DBIO  monad which can be later transformed into Future . There are <a href="http://codewithstyle.info/asynchronous-programming-scala-vs-c/">many benefits</a> of a non-blocking API such as improved resilience under load. However, you will not notice these benefits unless your web applications is handling thousands of concurrent connections. Anorm, as a really thin layer, does not offer a non-blocking API.</p><h3 id="Expressibility"><a href="#Expressibility" class="headerlink" title="Expressibility"></a>Expressibility</h3><p>Slick’s DSL is very expressive but it will always be less than plain SQL. Anorm’s authors seem to have a point that re-inventing SQL is not easy. Some non-trivial queries are difficult to express and at times you will miss SQL. Obviously, you can always use the plain SQL API in Slick but what’s the point of query type safety if not all of your queries are under control? Anorm is as expressive as plain SQL. However, passing more exotic query parameters (such as arrays or UUID s) might require spending some time on reading the docs.</p><h3 id="Query-composability"><a href="#Query-composability" class="headerlink" title="Query composability"></a>Query composability</h3><p>One of huge strengths of Slick is query composability. Suppose you had two very similar queries:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SELECT</span> name, age, occupation, c.country</span><br><span class="line"><span class="type">FROM</span> author <span class="type">AS</span> a</span><br><span class="line"><span class="type">LEFT</span> <span class="type">JOIN</span> cities c <span class="type">ON</span> c.id = a.city_id</span><br><span class="line"><span class="type">WHERE</span> age &gt; <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="type">SELECT</span> name, age, occupation, c.country</span><br><span class="line"><span class="type">FROM</span> author <span class="type">AS</span> a</span><br><span class="line"><span class="type">LEFT</span> <span class="type">JOIN</span> cities c <span class="type">ON</span> c.id = a.city_id</span><br><span class="line"><span class="type">WHERE</span> age &lt; <span class="number">50</span></span><br></pre></td></tr></table></figure><p>In Slick, it’s very easy to abstract the common part into a query. In Anorm, all you can do is textual composition which can get really messy.</p><h3 id="Inserts-and-updates"><a href="#Inserts-and-updates" class="headerlink" title="Inserts and updates"></a>Inserts and updates</h3><p>In Slick you can define two-way mappings between your types and SQL. Therefore, INSERT s are as simply as:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">authors += author</span><br></pre></td></tr></table></figure><p>In Anorm you need to write your INSERT s and UPDATE s by hand which is usually a tedious and error-prone task.</p><h3 id="Code-changes-and-refactoring"><a href="#Code-changes-and-refactoring" class="headerlink" title="Code changes and refactoring"></a>Code changes and refactoring</h3><p>Another important feature of Slick is query type safety. It’s amazing when performing changes to your data model. Compiler will always make sure that you won’t miss any query. In Anorm nothing will help you detect typos or missing fields in your SQL which will usually make you want to write unit tests for your data access layer.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>Slick seems to be a great library packed with very useful features. Additionally, it will most likely save your ass if you need to perform many changes to your data model. However, my point is that it comes at a cost - writing Slick queries is not trivial and the learning curve is quite steep. And you risk that the query you have in mind is not expressible in Slick. An interesting alternative is to use Slick’s plain SQL API - it gives you some of the benefits (e.g. non-blocking API) but without sacrificing expressability. As always, it’s a matter of choosing the right tool for purpose. I hope this article will help you to weigh in all arguments.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Scala doesn’t offer many DB access libraries. &lt;a href=&quot;http://slick.lightbend.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Slick&lt;/a&gt; and &lt;a href=&quot;
      
    
    </summary>
    
      <category term="Other topics" scheme="https://codewithstyle.info/categories/Other-topics/"/>
    
      <category term="Scala" scheme="https://codewithstyle.info/categories/Other-topics/Scala/"/>
    
    
      <category term="scala" scheme="https://codewithstyle.info/tags/scala/"/>
    
      <category term="databases" scheme="https://codewithstyle.info/tags/databases/"/>
    
  </entry>
  
  <entry>
    <title>SBT: how to build and deploy a simple SBT plugin?</title>
    <link href="https://codewithstyle.info/how-to-build-a-simple-sbt-plugin/"/>
    <id>https://codewithstyle.info/how-to-build-a-simple-sbt-plugin/</id>
    <published>2016-07-03T16:46:42.000Z</published>
    <updated>2019-12-02T21:26:20.068Z</updated>
    
    <content type="html"><![CDATA[<p>Few weeks ago when I was working on <a href="http://codewithstyle.info/scala-ts-scala-typescript-code-generator/">my pet project</a>, I wanted to make it an SBT plugin. Since I had to spend some time studying SBT docs, I decided to write a short tutorial explaining how to write and deploy a SBT plugin.</p><h3 id="Make-sure-your-project-can-be-built-with-SBT"><a href="#Make-sure-your-project-can-be-built-with-SBT" class="headerlink" title="Make sure your project can be built with SBT"></a>Make sure your project can be built with SBT</h3><p>First of all, your project needs to be buildable with SBT. This can be achieved simply - any project that follows the <a href="http://www.scala-sbt.org/0.13/docs/Directories.html" target="_blank" rel="noopener">specific structure</a> can be built with SBT. additionally, we are going to need a build.sbt  file with the following contents at the top-level:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lazy</span> <span class="keyword">val</span> root = (project in file(<span class="string">"."</span>)).</span><br><span class="line">  settings(</span><br><span class="line">    name := <span class="string">"my-sbt-plugin"</span>,</span><br><span class="line">    version := <span class="string">"0.2.0"</span>,</span><br><span class="line">    organization := <span class="string">"com.github.miloszpp"</span>,</span><br><span class="line">    scalaVersion := <span class="string">"2.10.6"</span>,</span><br><span class="line">    sbtPlugin := <span class="literal">true</span>,</span><br><span class="line">    sbtVersion := <span class="string">"0.13.11"</span></span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>Note that we are using Scala version 2.10 despite that at the time of writing 2.11 is available. That’s because SBT 0.13 is build against Scala 2.10. You need to make sure that you are using matching versions, otherwise you might get compile errors.</p><h3 id="Implement-the-SBT-plugin"><a href="#Implement-the-SBT-plugin" class="headerlink" title="Implement the SBT plugin"></a>Implement the SBT plugin</h3><p>Our example plugin is going to add a new command to SBT. Firstly, let’s add the following imports:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sbt.<span class="type">Keys</span>._</span><br><span class="line"><span class="keyword">import</span> sbt._</span><br><span class="line"><span class="keyword">import</span> complete.<span class="type">DefaultParsers</span>._</span><br></pre></td></tr></table></figure><p>Next, we need to extend the AutoPlugin  class. Inside that class we need to create a nested object called autoImport. All SBT keys defined inside this object will be automatically imported into the project using this plugin. In our example we are defining a key for an input task - which is a way to define an SBT command that can accept command line arguments.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MySBTPlugin</span> <span class="keyword">extends</span> <span class="title">AutoPlugin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">object</span> <span class="title">autoImport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> hello = inputKey[<span class="type">Unit</span>](<span class="string">"Says hello!"</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Now we need to add an implementation for this task:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">lazy</span> <span class="keyword">val</span> projectSettings = <span class="type">Seq</span>(</span><br><span class="line">    hello := &#123;</span><br><span class="line">      <span class="keyword">val</span> args = spaceDelimited(<span class="string">""</span>).parsed</span><br><span class="line">      <span class="type">System</span>.out.println(<span class="string">s"Hello, <span class="subst">$&#123;args(0)&#125;</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>And that’s it.</p><h3 id="Test-the-SBT-plugin-locally"><a href="#Test-the-SBT-plugin-locally" class="headerlink" title="Test the SBT plugin locally"></a>Test the SBT plugin locally</h3><p>SBT lets us test our plugins locally very easily. Run the following command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbt compile publishLocal</span><br></pre></td></tr></table></figure><p>Now we need an example project that will use our plugin. Let’s create an empty project with the following directory structure:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">project</span><br><span class="line">   plugins.sbt</span><br><span class="line">build.sbt</span><br></pre></td></tr></table></figure><p>Inside plugins.sbt , let’s put the following code:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addSbtPlugin(&quot;com.github.miloszpp&quot; % &quot;scala-ts&quot; % &quot;0.2.0&quot;)</span><br></pre></td></tr></table></figure><p>Note that this information needs to match organization , name  and version  defined in your plugin. Next, add the following lines to build.sbt:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sbt.<span class="type">Keys</span>._</span><br><span class="line"></span><br><span class="line"><span class="keyword">lazy</span> <span class="keyword">val</span> root = (project in file(<span class="string">"."</span>)).</span><br><span class="line">  settings(</span><br><span class="line">    scalaVersion := <span class="string">"2.10.6"</span>,</span><br><span class="line">    sbtVersion := <span class="string">"0.13.11"</span></span><br><span class="line">  ).</span><br><span class="line">  enablePlugins(com.mpc.scalats.sbt.<span class="type">MySBTPlugin</span>)</span><br></pre></td></tr></table></figure><p>Make sure that you use the fully qualified name of the plugin object. You <strong>can </strong>use Scala version older than 2.10 in the consumer project. Now you can test your plugin. Run the following command:</p><p>sbt “hello Milosz”</p><p>Note the use of quotes - you are passing the whole command, along with its parameters to SBT.</p><h3 id="Make-it-available-to-others"><a href="#Make-it-available-to-others" class="headerlink" title="Make it available to others"></a>Make it available to others</h3><p>If you would like to make your plugin available to other users, you can use OSS Repository Hosting. They are hosting a public Maven repository for open source projects. Packages in this repository are automatically available to SBT users, without further configuration. The whole procedure is well described <a href="http://central.sonatype.org/pages/ossrh-guide.html" target="_blank" rel="noopener">here</a>. One of the caveats for me was to change the organization  property to com.github.miloszpp (I host my project on GitHub). You can’t just use any string here because you need to own the domain - otherwise, you can use the GitHub prefix.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Few weeks ago when I was working on &lt;a href=&quot;http://codewithstyle.info/scala-ts-scala-typescript-code-generator/&quot;&gt;my pet project&lt;/a&gt;, I w
      
    
    </summary>
    
      <category term="Other topics" scheme="https://codewithstyle.info/categories/Other-topics/"/>
    
      <category term="Scala" scheme="https://codewithstyle.info/categories/Other-topics/Scala/"/>
    
      <category term="Tutorials" scheme="https://codewithstyle.info/categories/Other-topics/Scala/Tutorials/"/>
    
    
      <category term="scala" scheme="https://codewithstyle.info/tags/scala/"/>
    
      <category term="sbt" scheme="https://codewithstyle.info/tags/sbt/"/>
    
  </entry>
  
  <entry>
    <title>Scala-ts: Scala to TypeScript code generator</title>
    <link href="https://codewithstyle.info/scala-ts-scala-typescript-code-generator/"/>
    <id>https://codewithstyle.info/scala-ts-scala-typescript-code-generator/</id>
    <published>2016-06-23T13:04:15.000Z</published>
    <updated>2019-12-02T21:26:20.070Z</updated>
    
    <content type="html"><![CDATA[<p>I have started using TypeScript a few weeks ago at work. It turns out to be a great language which lets you avoid many problems caused by JavaScript’s dynamic typing, facilitates code readibility and code refactoring and does that at relatively small cost thanks to modern, concise syntax. </p><p>Currently we are using TypeScript for writing the frontend part of a web application which communicates with backend in Scala. The backend part exposes a REST API. </p><p>One of the drawbacks of such desing is the need for writing Data Transfer Objects definitions for both backend and frontend and making sure that they match each other (in terms of JSON serialization). In other words, you need to define the types of objects being transferred between backend and frontend in both Scala and TypeScript. </p><p>Since this is a rather tedious job, I came up with an idea to write a simple code generation tool that can produce TypeScript class definitions based on Scala case classes. </p><p>I’ve put the project on Github. It’s also available via SBT and Maven. Here is the link to the project: <a href="https://github.com/miloszpp/scala-ts" target="_blank" rel="noopener">https://github.com/miloszpp/scala-ts</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have started using TypeScript a few weeks ago at work. It turns out to be a great language which lets you avoid many problems caused by
      
    
    </summary>
    
      <category term="Other topics" scheme="https://codewithstyle.info/categories/Other-topics/"/>
    
      <category term="Projects" scheme="https://codewithstyle.info/categories/Other-topics/Projects/"/>
    
      <category term="Scala" scheme="https://codewithstyle.info/categories/Other-topics/Projects/Scala/"/>
    
    
      <category term="typescript" scheme="https://codewithstyle.info/tags/typescript/"/>
    
      <category term="scala" scheme="https://codewithstyle.info/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title>Issues with asynchronous IO in web applications</title>
    <link href="https://codewithstyle.info/issues-asynchronous-programming/"/>
    <id>https://codewithstyle.info/issues-asynchronous-programming/</id>
    <published>2016-05-01T11:40:40.000Z</published>
    <updated>2019-12-02T21:26:20.068Z</updated>
    
    <content type="html"><![CDATA[<p>Building servers with non-blocking IO has been quite popular these days. <a href="http://www.ducons.com/blog/tests-and-thoughts-on-asynchronous-io-vs-multithreading#conclusions" target="_blank" rel="noopener">Tests have shown</a> that it does actually improve scalability of web applications. However, my experience show that it comes at a cost. In this post I am going to discuss some negative aspects of writing asynchronous code based on Scala’s Futures.</p><h3 id="Stacktraces"><a href="#Stacktraces" class="headerlink" title="Stacktraces"></a>Stacktraces</h3><p>Debugging exceptions in asynchronous programs is a pain. When issuing an asynchronous IO operation you provide a callback that should be executed when the operation returns. In most implementations, this callback might be executed on any thread (not necessarly the same thread that invoked the operation). Since call stack is local to the thread, the stacktrace that you get when handling an exception is not very informative. It will not trace back to the servlet so you may have hard time figuring out where what actually happened.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Exception</span> in thread <span class="string">"main"</span> java.lang.<span class="type">IllegalArgumentException</span></span><br><span class="line">at <span class="type">HelloScala</span>$$anonfun$<span class="number">1.</span>apply(<span class="type">HelloScala</span>.scala:<span class="number">28</span>)</span><br><span class="line">at <span class="type">HelloScala</span>$$anonfun$<span class="number">1.</span>apply(<span class="type">HelloScala</span>.scala:<span class="number">28</span>)</span><br><span class="line">at scala.concurrent.impl.<span class="type">Future</span>$<span class="type">PromiseCompletingRunnable</span>.liftedTree1$<span class="number">1</span>(<span class="type">Future</span>.scala:<span class="number">24</span>)</span><br><span class="line">at scala.concurrent.impl.<span class="type">Future</span>$<span class="type">PromiseCompletingRunnable</span>.run(<span class="type">Future</span>.scala:<span class="number">24</span>)</span><br><span class="line">at scala.concurrent.impl.<span class="type">ExecutionContextImpl</span>$<span class="type">AdaptedForkJoinTask</span>.exec(<span class="type">ExecutionContextImpl</span>.scala:<span class="number">121</span>)</span><br><span class="line">at scala.concurrent.forkjoin.<span class="type">ForkJoinTask</span>.doExec(<span class="type">ForkJoinTask</span>.java:<span class="number">260</span>)</span><br><span class="line">at scala.concurrent.forkjoin.<span class="type">ForkJoinPool</span>$<span class="type">WorkQueue</span>.runTask(<span class="type">ForkJoinPool</span>.java:<span class="number">1339</span>)</span><br><span class="line">at scala.concurrent.forkjoin.<span class="type">ForkJoinPool</span>.runWorker(<span class="type">ForkJoinPool</span>.java:<span class="number">1979</span>)</span><br><span class="line">at scala.concurrent.forkjoin.<span class="type">ForkJoinWorkerThread</span>.run(<span class="type">ForkJoinWorkerThread</span>.java:<span class="number">107</span>)</span><br></pre></td></tr></table></figure><h3 id="Thread-local-variables"><a href="#Thread-local-variables" class="headerlink" title="Thread-local variables"></a>Thread-local variables</h3><p>Some libraries use a mechanism called ThreadLocal  variables (available in Java and C#, in Scala known as DynamicVariable ). By definition, these libraries do not work well with asynchronous code, for the same reason that we get poor stacktraces. I have already discussed <a href="http://codewithstyle.info/accessing-request-parameters-from-inside-a-future-in-scalatra/">one of such situations</a> on my blog. Another one is <a href="https://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/MDC.html" target="_blank" rel="noopener">Mapped Diagnostic Context</a> from the <a href="http://logback.qos.ch" target="_blank" rel="noopener">Logback</a> framework. MDC is a nice mechanism that allows you to attach additional information to your logs. Since the information is contextual, it will be available even to logs written from within external libraries. However, as one might expect, MDC is implemented with thread-local variables. Therefore, it doesn’t work well with Scala’s futures. There is a way to <a href="http://stackoverflow.com/questions/28306429/track-context-specific-data-across-threads" target="_blank" rel="noopener">get MDC with Futures</a> working by writing a custom ExecutionContext  (Scala’s threadpool) that is aware of contextual data and propagates across threads.</p><h3 id="Missed-exceptions"><a href="#Missed-exceptions" class="headerlink" title="Missed exceptions"></a>Missed exceptions</h3><p>Unless you are very careful, it is quite easy to not wait for a Future to complete but instead to fork execution into two branches. When an exception is thrown in a Future that nobody is waiting for, it will most likely just go unnoticed.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postData</span></span>(url: <span class="type">String</span>, data: <span class="type">String</span>): <span class="type">Future</span>[<span class="type">Unit</span>] = <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveToDb</span></span>(data: <span class="type">String</span>): <span class="type">Future</span>[<span class="type">Unit</span>] = <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">postData(<span class="string">"http://example.com"</span>, <span class="string">"message"</span>)</span><br><span class="line">saveToDb(<span class="string">"another message"</span>)</span><br></pre></td></tr></table></figure><p>Above code will compile. However, saveToDb  will most likely be called before postData  returns since execution has been forked. Any exception thrown inside postData  will most likely be missed. The correct way to write the above code would be:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">postData(<span class="string">"http://example.com"</span>, <span class="string">"message"</span>) flatMap &#123; _ =&gt;</span><br><span class="line">  saveToDb(<span class="string">"another message"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Caching"><a href="#Caching" class="headerlink" title="Caching"></a>Caching</h3><p>Caching gets more complicated in an asynchronous web application, unless the library you use for caching is designed to work with async code. One of the most common patterns in caching libraries is to let you provide a function that should be executed when a value in cache is missing. See the below example of <a href="https://github.com/google/guava/wiki/CachesExplained" target="_blank" rel="noopener">Guava Cache</a>:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cache.get(key, <span class="keyword">new</span> <span class="type">Callable</span>&lt;<span class="type">Value</span>&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="type">Value</span> call() <span class="keyword">throws</span> <span class="type">AnyException</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> doThingsTheHardWay(key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>If doThingsTheHardWay returned a Future (was asynchronous) then you would have to block the thread and wait for the result. Mixing blocking and non-blocking code is generally discouraged and may lead to undesirable situations such as deadlocks.</p><h3 id="Code-readbility"><a href="#Code-readbility" class="headerlink" title="Code readbility"></a>Code readbility</h3><p>Asynchronous code adds complexity. In Scala, you need to use all sorts of Future combinators such as flatMap , map  or Future.sequence  in order to get your code to compile. The issue is partially addressed by async/await  language extensions/macros (available for example in <a href="https://github.com/scala/async" target="_blank" rel="noopener">Scala</a> and <a href="https://msdn.microsoft.com/pl-pl/library/hh191443.aspx" target="_blank" rel="noopener">C#</a>) but it can still make your code less readable and harder to reason about.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Building servers with non-blocking IO has been quite popular these days. &lt;a href=&quot;http://www.ducons.com/blog/tests-and-thoughts-on-asynch
      
    
    </summary>
    
      <category term="Articles" scheme="https://codewithstyle.info/categories/Articles/"/>
    
      <category term="Other topics" scheme="https://codewithstyle.info/categories/Articles/Other-topics/"/>
    
      <category term="Scala" scheme="https://codewithstyle.info/categories/Articles/Other-topics/Scala/"/>
    
    
      <category term="scala" scheme="https://codewithstyle.info/tags/scala/"/>
    
      <category term="asynchronous programming" scheme="https://codewithstyle.info/tags/asynchronous-programming/"/>
    
  </entry>
  
  <entry>
    <title>Using Automapper to improve performance of Entity Framework</title>
    <link href="https://codewithstyle.info/solving-entity-framework-performance-issues-automapper/"/>
    <id>https://codewithstyle.info/solving-entity-framework-performance-issues-automapper/</id>
    <published>2016-04-02T09:30:03.000Z</published>
    <updated>2019-12-02T21:26:20.071Z</updated>
    
    <content type="html"><![CDATA[<p>Entity Framework is an ORM technology widely used in the .NET world. It’s very convenient to use and lets you forget about SQL… well, at least until you hit performance issues. Looking at the web applications I worked on, database access usually turned out to be the first thing to improve when  optimizing application performance.</p><h3 id="Navigation-properties"><a href="#Navigation-properties" class="headerlink" title="Navigation properties"></a>Navigation properties</h3><p>The main goal of Entity Framework is to map an object graph to a relational database. Tables are mapped to classes. Relationships between tables are represented with <strong>navigation properties</strong>. <img src="/images/2016/04/ef-300x191.png" alt="ef"> The above example will be mapped to the following classes:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Article</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Title &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Content &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> System.DateTime CreatedDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> AuthorId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> Author Author &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Author</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> LastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> ICollection&lt;Article&gt; Articles &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The highlighted lines declare navigation properties. Thanks to navigation properties, it’s very convenient to access details of Article’s Author. However, it comes at a cost. Imagine the following code in the view:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    @foreach (var article in (List<span class="tag">&lt;<span class="name">Article</span>&gt;</span>) ViewBag.Articles)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>@article.Author.LastName<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>@article.Title<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Assuming that ViewBag.Articles  is loaded with the below method, this code might turn out to be very slow.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Article&gt; <span class="title">GetArticlesOlderThan</span>(<span class="params">DateTime dateTime</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> context</span><br><span class="line">        .Articles</span><br><span class="line">        .Where(article =&gt; article.CreatedDate &lt; dateTime)</span><br><span class="line">        .OrderBy(article =&gt; article.CreatedDate)</span><br><span class="line">        .ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Unfortuantely, it will fire a separate SQL query to the database server <strong>for each</strong> element in the Articles collection. This is highly suboptimal and might result in long loading times.</p><h3 id="Lazy-and-eager-loading"><a href="#Lazy-and-eager-loading" class="headerlink" title="Lazy and eager loading"></a>Lazy and eager loading</h3><p>The reason behind this behaviour is the default setting of Entity Framework which tells it to load navigation properties <strong>on demand</strong>. This is called <strong>lazy loading</strong>. One can easily overcome this problem by enabling <strong>eager loading</strong>:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> context</span><br><span class="line">    .Articles</span><br><span class="line">    .Include(<span class="string">"Author"</span>)</span><br><span class="line">    .Where(article =&gt; article.CreatedDate &lt; dateTime)</span><br><span class="line">    .OrderBy(article =&gt; article.CreatedDate)</span><br><span class="line">    .ToList();</span><br></pre></td></tr></table></figure><p>Eager loading will cause EF to pre-load all Authors for all selected Articles (effectively, performing a join). This might work for simple use cases. But imagine that Author has 50 columns and you are only interested in one of them. Or, Author is a superclass of a huge class hierarchy modelled as table-per-type. Then, the query built by EF would become unncessarly huge and it would result in transfering loads of unnecessary data.</p><h3 id="Introducing-DTO"><a href="#Introducing-DTO" class="headerlink" title="Introducing DTO"></a>Introducing DTO</h3><p>One way to handle this situation is to introduce a new type which has all Article’s properties but additionally has some of the related Author’s properites:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ArticleDto</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Title &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Content &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DateTime CreatedDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> AuthorFirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> AuthorLastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we can perform projection in the query. We will get a much smaller query and much less data transfered over the wire:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;ArticleDto&gt; <span class="title">FastGetArticlesOlderThan</span>(<span class="params">DateTime dateTime</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> context</span><br><span class="line">        .Articles</span><br><span class="line">        .Select(article =&gt; <span class="keyword">new</span> ArticleDto</span><br><span class="line">        &#123;</span><br><span class="line">            AuthorFirstName = article.Author.FirstName,</span><br><span class="line">            AuthorLastName = article.Author.LastName,</span><br><span class="line">            Content = article.Content,</span><br><span class="line">            CreatedDate = article.CreatedDate,</span><br><span class="line">            Title = article.Title</span><br><span class="line">        &#125;)</span><br><span class="line">        .Where(article =&gt; article.CreatedDate &lt; dateTime)</span><br><span class="line">        .OrderBy(article =&gt; article.CreatedDate)</span><br><span class="line">        .ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Automapper"><a href="#Automapper" class="headerlink" title="Automapper"></a>Automapper</h3><p>We improved performance, but now the code looks much worse - it involves manual mapping of properties which is in fact trivial to figure out. What’s more, we would need to change this code every time we add or remove a field in the Article class. A library called <strong>Automapper</strong> comes to rescue. Automapper is a <strong>convention-based</strong> class mapping tool. Convention-based means that it relies on naming conventions of parameters. For example, Author.FirstName  is automatically mapped to AuthorFirstName . Isn’t that cool? You can find it on <strong>NuGet</strong>. Once you add it to your solution, you need to create Automapper configuration:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> MapperConfiguration config = <span class="keyword">new</span> MapperConfiguration(cfg =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    cfg.CreateMap&lt;Article, ArticleDto&gt;();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Here we declare that Article should be mapped to ArticleDto, meaning that every property of Article should be copied to the property of ArticleDto with the same name. Now, we need to replace the huge manual projection with Automapper’s ProjectTo  call.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;ArticleDto&gt; <span class="title">AutomappeGetArticlesOlderThan</span>(<span class="params">DateTime dateTime</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> context</span><br><span class="line">        .Articles</span><br><span class="line">        .ProjectTo&lt;ArticleDto&gt;(config)</span><br><span class="line">        .Where(article =&gt; article.CreatedDate &lt; dateTime)</span><br><span class="line">        .OrderBy(article =&gt; article.CreatedDate)</span><br><span class="line">        .ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You need to add one more line:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> AutoMapper.QueryableExtensions;</span><br></pre></td></tr></table></figure><p>And that’s it. You’ve just improved readability of your code and made it less fragile to changes.</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>Automapper is a very flexible tool. You don’t need to rely on naming convensions, you can easily declare your own mappings. Additionally, we have just used just a specific part of Automapper - <strong>Queryble Extensions</strong> which work with ORMs. You can also use Automapper on regular collections or just on plain objects. </p><p>I believe the problem I highlighted here is just a symptom of a much broader issue of <strong>incompatibility of relational and object oriented worlds</strong>. Although Entity Framework tries to address the issue by allowing to choose between eager and lazy loading, I don’t think it is a good solution. Classes managed by EF being elements of a public API are a big problem. As a user of such interface you never know if a navigation property is loaded and whether accessing it will result in a DB query. </p><p>Therefore, I advocate the use of mapped DTOs. This approach reminds me slightly of an idea called <strong>Functional Relational Mapping</strong> adopted for example by the Slick framework for Scala. I believe it to be a great alternative to classic ORMs. Some references:</p><ul><li><a href="https://msdn.microsoft.com/en-us/data/jj574232.aspx" target="_blank" rel="noopener">Lazy and eager loading in EF</a></li><li><a href="https://github.com/AutoMapper/AutoMapper/wiki/Configuration" target="_blank" rel="noopener">Automapper configuration</a></li><li><a href="http://slick.typesafe.com/doc/3.1.1/introduction.html" target="_blank" rel="noopener">Slick: Functional Relational Mapping library for Scala</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Entity Framework is an ORM technology widely used in the .NET world. It’s very convenient to use and lets you forget about SQL… well, at 
      
    
    </summary>
    
      <category term=".NET" scheme="https://codewithstyle.info/categories/NET/"/>
    
      <category term="Best Of" scheme="https://codewithstyle.info/categories/NET/Best-Of/"/>
    
      <category term="Other topics" scheme="https://codewithstyle.info/categories/NET/Best-Of/Other-topics/"/>
    
      <category term="Tutorials" scheme="https://codewithstyle.info/categories/NET/Best-Of/Other-topics/Tutorials/"/>
    
    
      <category term="csharp" scheme="https://codewithstyle.info/tags/csharp/"/>
    
      <category term="entity framework" scheme="https://codewithstyle.info/tags/entity-framework/"/>
    
      <category term="automapper" scheme="https://codewithstyle.info/tags/automapper/"/>
    
  </entry>
  
  <entry>
    <title>Asynchronous programming in Scala vs C#</title>
    <link href="https://codewithstyle.info/asynchronous-programming-scala-vs-c/"/>
    <id>https://codewithstyle.info/asynchronous-programming-scala-vs-c/</id>
    <published>2016-03-17T21:33:36.000Z</published>
    <updated>2019-12-02T21:26:20.063Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://codewithstyle.info/scalas-option-monad-versus-null-conditional-operator-in-c/">In one of my recent post</a> I compared two different approaches that authors of Scala and C# chose to solve the same problem. This post is based on the same idea but the problem being solved is asynchronous programming.</p><h3 id="What’s-asynchronous-programming"><a href="#What’s-asynchronous-programming" class="headerlink" title="What’s asynchronous programming?"></a>What’s asynchronous programming?</h3><p>Let me explain by giving you an example. If you have ever used a web framework you might have been wondering how it handles multiple concurrent requests from different users. The traditional approach is to spawn a new thread (or get one from a thread pool) for every request that comes in and release it once the request is served. The problem with this solution is that whenever those threads perform IO operations (such as talking to a database) they simply block and wait for the operation to finish. Therefore, we end up wasting precious CPU time by allowing our threads to be blocked on IO. </p><p>Instead of blocking threads on IO operation we could use an asynchronous database API. Such API is non-blocking. However, running a database query using such an API requires you to provide a <strong>callback</strong>. Callback in this case would be a function that would be invoked once the result is available. So, in the asynchronus model your thread serves the request, runs some computations and when it needs to call the database, it initiates the call and than switches to do some other, useful work. Some other thread will continue execution of your request when the database returns. </p><p><img src="/images/2016/03/drawit-diagram-1.png" alt="Asynchronous model example" title="drawit diagram"></p><h3 id="Asynchronous-programming-in-C"><a href="#Asynchronous-programming-in-C" class="headerlink" title="Asynchronous programming in C"></a>Asynchronous programming in C</h3><p>The biggest pain of writing programs in the asynchronous model is the necessity of callbacks. Fortunately, in C# we have lambda functions which allow us to write callbacks with ease. However, even with lambdas we can end up with lot of nesting. The key to asynchronous programming in C# is the <strong>Task</strong> class. Task represents a piece of work that can be either blocking or heavy on processor so it makes sense to run it asynchronously.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Task&lt;HttpResponseMessage&gt; getGoogleTask = client.GetAsync(<span class="string">"http://google.com"</span>);</span><br><span class="line">getGoogleTask.ContinueWith(task =&gt; Debug.WriteLine(task.Result));</span><br></pre></td></tr></table></figure><p>In the first line we create a task that fetches the Google main page. The task starts immedietely on a thread from a default, global thread pool. Therefore, the call itself is not blocking. On the second line we attach a callback which defines what should happen once the result is fetched. As I said, it is easy to introduce nesting with callbacks. What if we wanted to visit Facebook but only if we succeeded fetching the Google page?</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">client.GetAsync(<span class="string">"http://google.com"</span>).ContinueWith(googleTask =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (googleTask.Result.IsSuccessStatusCode)</span><br><span class="line">    &#123;</span><br><span class="line">        client.GetAsync(<span class="string">"http://facebook.com"</span>).ContinueWith(facebookTask =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (facebookTask.Result.IsSuccessStatusCode)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.WriteLine(<span class="string">"Google and Facebook available!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>This code isn’t very readable. Also, if we wanted to visit more websites, we could end up with even more levels of nesting. C# 5.0 introduced an excellent language feature that lets you write asynchronous code just as if it was synchronous: the <strong>async</strong> and <strong>await</strong> keywords. The above example can be rewritten as follows:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> googleResponse = <span class="keyword">await</span> client.GetAsync(<span class="string">"http://google.com"</span>);</span><br><span class="line"><span class="keyword">if</span> (googleResponse.IsSuccessStatusCode)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> facebookResponse = <span class="keyword">await</span> client.GetAsync(<span class="string">"http://facebook.com"</span>);</span><br><span class="line">    <span class="keyword">if</span> (facebookResponse.IsSuccessStatusCode)</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.WriteLine(<span class="string">"Google and Facebook available!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>One caveat about async/await is that the method containing any <strong>await</strong> calls must itself be declared as <strong>async</strong>. Also, the return type of such a method must be a Task. Therefore, the asynchronous-ness always propagates upstream. This actually makes sense - otherwise you would need to synchronously wait for a task to finish at some point. Modern web frameworks such as ASP.NET MVC let you declare the methods that handle the incoming requests as asynchronous.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ActionResult&gt; <span class="title">FetchWebsites</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HttpClient client = <span class="keyword">new</span> HttpClient();</span><br><span class="line">    <span class="keyword">var</span> googleResponse = <span class="keyword">await</span> client.GetAsync(<span class="string">"http://google.com"</span>);</span><br><span class="line">    <span class="keyword">if</span> (googleResponse.IsSuccessStatusCode)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> facebookResponse = <span class="keyword">await</span> client.GetAsync(<span class="string">"http://facebook.com"</span>);</span><br><span class="line">        <span class="keyword">if</span> (facebookResponse.IsSuccessStatusCode)</span><br><span class="line">        &#123;</span><br><span class="line">            ViewBag.Message = <span class="string">"Google and Facebook available!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> View();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>One more thing about C# tasks - with them executing stuff in parallel is incredibly easy.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span>[] websites = <span class="keyword">new</span> <span class="keyword">string</span>[] &#123; <span class="string">"http://google.com"</span>, <span class="string">"http://facebook.com"</span> &#125;;</span><br><span class="line">Task&lt;HttpResponseMessage&gt;[] tasks = websites.Select(website =&gt; client.GetAsync(website)).ToArray();</span><br><span class="line">HttpResponseMessage[] responses = <span class="keyword">await</span> Task.WhenAll(tasks);</span><br></pre></td></tr></table></figure><p><strong>Task.WhenAll</strong> creates a task that will be finished when all tasks from the provided array are finished.</p><h3 id="Asynchronous-programming-in-Scala"><a href="#Asynchronous-programming-in-Scala" class="headerlink" title="Asynchronous programming in Scala"></a>Asynchronous programming in Scala</h3><p>Let’s have a look at how Scala approaches the problem. One of the approaches to asynchronous programming is to use <a href="http://docs.scala-lang.org/overviews/core/futures.html" target="_blank" rel="noopener">Futures</a>. Future is a class that has very similiar semantics to C#’s Task. Unfortunately, there is no built-in asynchronous HTTP client in Scala, but let’s assume we’ve got one and it’s interface looks like this:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">HttpClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span></span>(url: <span class="type">String</span>): <span class="type">Future</span>[<span class="type">Response</span>]</span><br><span class="line">    <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Response</span>(<span class="params">content: <span class="type">String</span>, ok: <span class="type">Boolean</span></span>)</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure><p>We can write code that looks very similiar to the C# example with <strong>flatMap</strong>:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">client.get(<span class="string">"http://google.com"</span>).flatMap(googleResp =&gt;</span><br><span class="line">  <span class="keyword">if</span> (googleResp.ok) &#123;</span><br><span class="line">    client.get(<span class="string">"http://facebook.com"</span>).map(facebookResp =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (facebookResp.ok) &#123;</span><br><span class="line">        <span class="type">Console</span>.printf(<span class="string">"Google and Facebook are on-line!"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="type">Future</span>.successful()</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Flatmap invoked on a future takes a callback that will be execute once the result of that future is available. Since that callback must return a Future itself, we must return an empty future (Future.successful) in the else branch of our if. When fetching the Facebook page, we use map instead of flatMap because we don’t want to start another future inside the callback. Again, the main issue with this code is that it is nested. Very similarly to <a href="http://codewithstyle.info/scalas-option-monad-versus-null-conditional-operator-in-c/">how Scala handles nested null checks with Option monad</a>, here we can again use the for-comprehension syntax to get rid of nesting!</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">  googleResp &lt;- client.get(<span class="string">"http://google.com"</span>) <span class="keyword">if</span> googleResp.ok</span><br><span class="line">  facebookResp &lt;- client.get(<span class="string">"http://facebook.com"</span>) <span class="keyword">if</span> facebookResp.ok</span><br><span class="line">&#125; <span class="keyword">yield</span> <span class="type">Console</span>.printf(<span class="string">"Google and Facebook are on-line!"</span>)</span><br></pre></td></tr></table></figure><p>As you might have expected, parallel processing is also supported with Futures:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> websites = <span class="type">List</span>(<span class="string">"http://google.com"</span>, <span class="string">"http://facebook.com"</span>)</span><br><span class="line"><span class="keyword">val</span> responses = <span class="type">Future</span>.sequence(websites.map(client.get))</span><br></pre></td></tr></table></figure><p>An example of a web framework that supports asynchronous request handlers is <a href="http://www.scalatra.org" target="_blank" rel="noopener">Scalatra</a>.</p><h3 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h3><p>As you can see, C# and Scala approach asynchronous programming similliarly. What I find interesting here is how Scala handles callback nesting with the generic mechanism of for comprehension and C# introduces a separate language feature for that. This is exactly the same pattern as in <a href="http://codewithstyle.info/scalas-option-monad-versus-null-conditional-operator-in-c/">Option monad vs null-conditional operator</a>. To be honest, I find the async/await overall a bit more awesome - it really makes you feel as if you were writing synchronous code. </p><p><strong>Update:</strong> as pointed out by Darren and Yann in comments, you can also do async/await in Scala thanks to <a href="https://github.com/scala/async" target="_blank" rel="noopener">this library</a>. There is also a <a href="http://docs.scala-lang.org/sips/pending/async.html" target="_blank" rel="noopener">pending proposal</a> to add it to the language that admits that it’s inspired by C#’s asyns/await syntax.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://codewithstyle.info/scalas-option-monad-versus-null-conditional-operator-in-c/&quot;&gt;In one of my recent post&lt;/a&gt; I compared tw
      
    
    </summary>
    
      <category term=".NET" scheme="https://codewithstyle.info/categories/NET/"/>
    
      <category term="Articles" scheme="https://codewithstyle.info/categories/NET/Articles/"/>
    
      <category term="Best Of" scheme="https://codewithstyle.info/categories/NET/Articles/Best-Of/"/>
    
      <category term="Other topics" scheme="https://codewithstyle.info/categories/NET/Articles/Best-Of/Other-topics/"/>
    
    
      <category term="scala" scheme="https://codewithstyle.info/tags/scala/"/>
    
      <category term="csharp" scheme="https://codewithstyle.info/tags/csharp/"/>
    
      <category term="asynchronous programming" scheme="https://codewithstyle.info/tags/asynchronous-programming/"/>
    
  </entry>
  
  <entry>
    <title>Conclusions after first four months of blogging</title>
    <link href="https://codewithstyle.info/conclusions-after-first-four-months-of-blogging/"/>
    <id>https://codewithstyle.info/conclusions-after-first-four-months-of-blogging/</id>
    <published>2016-03-05T09:48:00.000Z</published>
    <updated>2019-12-02T21:26:20.064Z</updated>
    
    <content type="html"><![CDATA[<p>In this short post I name some random conclusions I had after the first four months of blogging. I hope this will be helpful for people who are considering starting their own programming blog (which I fully recommend to do!).</p><h3 id="Total-number-of-views-16-000"><a href="#Total-number-of-views-16-000" class="headerlink" title="Total number of views: 16 000"></a><strong>Total number of views: 16 000</strong></h3><p>The number looks good to me although it gets interesting if we look at the distribution of views over different posts:</p><p><a href="http://4.bp.blogspot.com/-FpwUJUPmba8/Vtq5HLrL_vI/AAAAAAAAE1g/_cufeOwf4NY/s1600/Zrzut%2Bekranu%2B2016-03-05%2Bo%2B11.39.02.png" target="_blank" rel="noopener"><img src="https://4.bp.blogspot.com/-FpwUJUPmba8/Vtq5HLrL_vI/AAAAAAAAE1g/_cufeOwf4NY/s400/Zrzut%2Bekranu%2B2016-03-05%2Bo%2B11.39.02.png" alt=""></a></p><p>So, most of the views are due to my latest post, <a href="http://wordpress1653421.home.pl/home/platne/serwer16812/public_html/codewithstyle/?p=6" target="_blank" rel="noopener">Scala’s Option monad versus null-conditional operator in C#</a>. I submit most of my posts to <a href="https://news.ycombinator.com/" target="_blank" rel="noopener">Hacker News</a> and this is also the main source of hits.</p><p>The conclusion here is that the title of the blog post really matters. I am yet to discover why this particular one caught attention but my suspicion is that with <strong>functional programming</strong> being a hot topic nowadays might be the reason.</p><h3 id="Total-number-of-posts-10"><a href="#Total-number-of-posts-10" class="headerlink" title="Total number of posts: 10"></a><strong>Total number of posts: 10</strong></h3><p>This is much worse than what I aimed for (which is at least one post per week). The primary reason is lack of time since writing a longer piece is at least 2 hours for me. What I plan to do about it is to do more short posts explaining solutions to some interesting problems I encounter at work or while working on side projects (such as <a href="http://wordpress1653421.home.pl/home/platne/serwer16812/public_html/codewithstyle/?p=7" target="_blank" rel="noopener">Accessing request parameters from inside a Future in Scalatra</a>).</p><h3 id="My-opinion-on-Blogger"><a href="#My-opinion-on-Blogger" class="headerlink" title="My opinion on Blogger"></a>My opinion on Blogger</h3><p>I chose Blogger following the advice on one of other programming blogs. So far, I’m not totally happy with it and I kind of regret that I did not choose Wordpress. I once had a blog on Wordpress for a while and what I liked there is that some of the traffic came from other Wordpress users thanks to its Discover and Recommendations features. I thought a similiar thing will happen here with Google+ but it’s not happening at all. Additionally, the choice of free templates is much poorer, the built-in editor is not very convenient and the statistics module is less fancy. <strong>Update</strong>: I decided to move the blog to Wordpress because of the reasons mentioned above.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this short post I name some random conclusions I had after the first four months of blogging. I hope this will be helpful for people w
      
    
    </summary>
    
      <category term="Meta" scheme="https://codewithstyle.info/categories/Meta/"/>
    
      <category term="Other topics" scheme="https://codewithstyle.info/categories/Meta/Other-topics/"/>
    
      <category term="Thoughts" scheme="https://codewithstyle.info/categories/Meta/Other-topics/Thoughts/"/>
    
    
      <category term="blogging" scheme="https://codewithstyle.info/tags/blogging/"/>
    
      <category term="thoughts" scheme="https://codewithstyle.info/tags/thoughts/"/>
    
  </entry>
  
  <entry>
    <title>Scala&#39;s Option monad versus null-conditional operator in C#</title>
    <link href="https://codewithstyle.info/scalas-option-monad-versus-null-conditional-operator-in-c/"/>
    <id>https://codewithstyle.info/scalas-option-monad-versus-null-conditional-operator-in-c/</id>
    <published>2016-02-11T20:21:00.000Z</published>
    <updated>2019-12-02T21:26:20.070Z</updated>
    
    <content type="html"><![CDATA[<p>Today I will talk about an awesome feature of C# 6.0. We will see how it can help us understand monads in Scala!</p><h1 id="Null-conditional-operator"><a href="#Null-conditional-operator" class="headerlink" title="Null-conditional operator"></a>Null-conditional operator</h1><p>Imagine we have a nested data model and want to call some method on a property nested deeply inside an object graph. Let’s assume that Article does not have to have an Author, the Author does not have to have an Address and the address does not have to have a City (for example this data can be missing from our database).</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Address</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">string</span> Street &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">string</span> City &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; <span class="comment">// can be null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Author</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">string</span> Email &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> <span class="keyword">public</span> Address Address &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; <span class="comment">// can be null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Article</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">string</span> Title &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">string</span> Content &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> <span class="keyword">public</span> Author Author &#123; <span class="keyword">get</span>; <span class="keyword">set</span>;&#125; <span class="comment">// can be null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(article.Author.Address.City.ToUpper());</span><br></pre></td></tr></table></figure><p>This is very unsafe code since we are at risk of <code>NullReferenceException</code>. We have to introduce some null checks in order to avoid the exception.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (article != <span class="literal">null</span>) &#123;</span><br><span class="line"> <span class="keyword">if</span> (article.Author != <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (article.Author.Address != <span class="literal">null</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> (article.Author.Address.City != <span class="literal">null</span>) &#123;</span><br><span class="line">    Console.WriteLine(article.Author.Address.City.ToUpper());</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Yuck! So much boilerplater code to do a very simple thing. It’s really unreadable and confusing. Fortunately, C# 6.0 introduces the <a href="https://msdn.microsoft.com/en-us/library/dn986595.aspx" target="_blank" rel="noopener">null-conditional operator</a>. The new operator denotes <code>?.</code> and can be used instead of the regular <code>.</code> whenever it is possible that the value on the left can be <code>null</code>. For example, the below piece can be read as “call <code>ToUpper</code> only if <code>bob</code> is not <code>null</code>; otherwise, just set <code>bobUpper</code> to <code>null</code>“.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bob = <span class="string">"Bob"</span>;</span><br><span class="line"><span class="keyword">var</span> bobUpper = bob?.ToUpper();</span><br></pre></td></tr></table></figure><p>Returning to our previous example, we can now safely write:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(article?.Author?.Address?.City?.ToUpper());</span><br></pre></td></tr></table></figure><h1 id="The-Option-type"><a href="#The-Option-type" class="headerlink" title="The Option type"></a>The <code>Option</code> type</h1><p>As I explained in one of my previous posts, in Scala we avoid having <code>null</code> variables at all cost. However, we would still like to be able to somehow reflect the fact that a piece of data is optional. The <code>Option[T]</code> type can be used to explicitly mark a value as optional. For example, vale <code>bob</code> with type <code>Option[String]</code> means that <code>bob</code> can either hold a <code>String</code> value or nothing:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> someBob: <span class="type">Option</span>[<span class="type">String</span>] = <span class="type">Some</span>(<span class="string">"Bob"</span>)</span><br><span class="line"><span class="keyword">val</span> noBob: <span class="type">Option</span>[<span class="type">String</span>] = <span class="type">None</span></span><br></pre></td></tr></table></figure><p>Therefore, we can easily model the situation from the previous example as follows:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span>(<span class="params">street: <span class="type">String</span>, city: <span class="type">Option</span>[<span class="type">String</span>]</span>)</span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Author</span>(<span class="params">name: <span class="type">String</span>, email: <span class="type">String</span>, address: <span class="type">Option</span>[<span class="type">Address</span>]</span>)</span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Article</span>(<span class="params">title: <span class="type">String</span>, content: <span class="type">String</span>, author: <span class="type">Option</span>[<span class="type">Author</span>]</span>)</span></span><br></pre></td></tr></table></figure><p>Notice how, compared to C#, Scala forces us to explicitly declare which field is and which field is not optional. Now, let’s look at how we could implement printing article’s author’s city in lower case:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (article.author.isDefined) &#123;</span><br><span class="line">  <span class="keyword">if</span> (article.author.get.address.isDefined) &#123;</span><br><span class="line">    <span class="keyword">if</span> (article.author.get.address.get.city.isDefined) &#123;</span><br><span class="line">      println(article.author.get.address.get.city.get)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This naive approach is not a big improvement when compared to the C# version. However, Scala lets us do this much better:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">  author &lt;- article.author</span><br><span class="line">  address &lt;- author.address</span><br><span class="line">  city &lt;- address.city</span><br><span class="line">&#125; <span class="keyword">yield</span> println(city.toLowerCase())</span><br></pre></td></tr></table></figure><p>Although this version is not as short as the one with C#’s null-conditional operator, it’s important that we got rid of the boilerplate nested <code>if</code> statements. What remained is a much more readable piece of code. This is an example of the for-comprehension syntax together with the monadic aspect of the <code>Option</code> type.</p><h1 id="The-Option-monad"><a href="#The-Option-monad" class="headerlink" title="The Option monad"></a>The <code>Option</code> monad</h1><p>Before I exaplain what exactly is going on in the above piece of code, let me talk more about methods of the <code>Option</code> type. Do you remember the <code>map</code> method of the <code>List</code> type? It took a function and applied it to every element of the list. Interestingly, <code>Option</code> does also have the <code>map</code> method. Think of <code>Option</code> as of a <code>List</code> that can have one (<code>Some</code>) or zero (<code>None</code>) elements. So, <code>Option.map</code> takes a function and if there is a value inside the <code>Option</code>, it applies the function to the value. If there is no value inside the <code>Option</code>, <code>map</code> will simply return <code>None</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val address = Address(&quot;street&quot;, Some(&quot;New York&quot;))</span><br><span class="line">address: HelloScala.Address = Address(street,Some(New York))</span><br><span class="line"></span><br><span class="line">scala&gt; address.city.map(city =&gt; city.toLowerCase())</span><br><span class="line">res1: Option[String] = Some(new york)</span><br><span class="line"></span><br><span class="line">scala&gt; val address = Address(&quot;street&quot;, None)</span><br><span class="line">address: HelloScala.Address = Address(street,None)</span><br><span class="line"></span><br><span class="line">scala&gt; address.city.map(city =&gt; city.toLowerCase())</span><br><span class="line">res2: Option[String] = None</span><br></pre></td></tr></table></figure><p>Now, can we somehow use it with our initial problem? Let’s see:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> cityLowerCase = article.author.map &#123; author =&gt;</span><br><span class="line">  author.address.map &#123; address =&gt;</span><br><span class="line">    address.city.map(city =&gt; city.toLowerCase)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I think it looks slightly better than the nested if approach. The problem with this is that the type of <code>cityLowerCase</code> is <code>Option[Option[Option[String]]]</code>. The actual result is deeply nested. What we would prefer to have is an <code>Option[String]</code>. There is a method similiar to <code>map</code> which would give us exactly what we want - it’s called <code>flatMap</code>.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> cityLowerCase: <span class="type">Option</span>[<span class="type">String</span>] = article.author.flatMap &#123; author =&gt;</span><br><span class="line">  author.address.flatMap &#123; address =&gt;</span><br><span class="line">    address.city.map(city =&gt; city.toLowerCase)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Option.flatMap</code> takes a function that transforms an element inside the option to another option and returns the result of the transformation (which is a non-nested option). The equivalent for <code>List</code> is <code>List.flatMap</code> which takes a function that maps each element of the list to another list. At the end, it concatenates all of the returned lists.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; List(1, 2, 3, 4).flatMap(el =&gt; List(el, el + 1))</span><br><span class="line">res3: List[Int] = List(1, 2, 2, 3, 3, 4, 4, 5)</span><br></pre></td></tr></table></figure><p>The fact that <code>Option[T]</code> and <code>List[T]</code> have the <code>flatMap</code> means that they can be easily composed. In Scala, every type with the <code>flatMap</code> method is a monad! In other words, a monad is any generic type with a type parameter which can be composed with other instances of this type (using the <code>flatMap</code> method). Now, back to for-comprehension. The nice syntax which allows us to avoid nesting in code is actually nothing more than a syntactic sugar for <code>flatMap</code> and <code>map</code>. This:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> city = <span class="keyword">for</span> &#123;</span><br><span class="line">  author &lt;- article.author</span><br><span class="line">  address &lt;- author.address</span><br><span class="line">  city &lt;- address.city</span><br><span class="line">&#125; <span class="keyword">yield</span> println(city.toLowerCase())</span><br></pre></td></tr></table></figure><p>…translates into this:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> cityLowerCase: <span class="type">Option</span>[<span class="type">String</span>] = article.author.flatMap &#123; author =&gt;</span><br><span class="line">  author.address.flatMap &#123; address =&gt;</span><br><span class="line">    address.city.map(city =&gt; city.toLowerCase)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For comprehension works with any monad! Let’s look at an example with lists:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">for</span> &#123;</span><br><span class="line">  el &lt;- <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">  list &lt;- <span class="number">1</span> to el</span><br><span class="line">&#125; <span class="keyword">yield</span> list</span><br><span class="line">res4: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>For each element in the first list we produce a list ranging from 1 to this element. At the end, we concatenate all of the resulting lists.</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>My main point here is to show that both C# and Scala introduce some language elements to deal with deep nesting. C# has null-conditional operators which deal with nesting null checks inside if statements. Scala has a much more generic mechanism which allows to avoid nesting with for-comprehension and <code>flatMap</code>. In the next post I will compare C#’s <code>async</code> keyword with Scala’s <code>Future</code> monad to show the similarities in how both languages approach the problem of nested code.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today I will talk about an awesome feature of C# 6.0. We will see how it can help us understand monads in Scala!&lt;/p&gt;
&lt;h1 id=&quot;Null-conditi
      
    
    </summary>
    
      <category term=".NET" scheme="https://codewithstyle.info/categories/NET/"/>
    
      <category term="Articles" scheme="https://codewithstyle.info/categories/NET/Articles/"/>
    
      <category term="Best Of" scheme="https://codewithstyle.info/categories/NET/Articles/Best-Of/"/>
    
      <category term="Other topics" scheme="https://codewithstyle.info/categories/NET/Articles/Best-Of/Other-topics/"/>
    
    
      <category term="functional programming" scheme="https://codewithstyle.info/tags/functional-programming/"/>
    
      <category term="scala" scheme="https://codewithstyle.info/tags/scala/"/>
    
      <category term="monads" scheme="https://codewithstyle.info/tags/monads/"/>
    
  </entry>
  
  <entry>
    <title>Accessing request parameters from inside a Future in Scalatra</title>
    <link href="https://codewithstyle.info/accessing-request-parameters-from-inside-a-future-in-scalatra/"/>
    <id>https://codewithstyle.info/accessing-request-parameters-from-inside-a-future-in-scalatra/</id>
    <published>2016-01-21T20:47:00.000Z</published>
    <updated>2019-12-02T21:26:20.062Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.scalatra.org/" target="_blank" rel="noopener">Scalatra</a> is an awesome, lightweight web framework for Scala. It’s perfect for building REST APIs. One of its less known features is support for asynchronous programming using Scala’s Futures. By mixing in the <a href="http://www.scalatra.org/2.3/api/index.html#org.scalatra.FutureSupport" target="_blank" rel="noopener">FutureSupport</a> trait one can easily make their servlet asynchronous. Once this trait is mixed-in into your servlet class, you can return Futures in your <code>post</code> and <code>get</code> handlers and Scalatra will automagically take care of them. Recently I encountered a minor issue with Scalatra’s support for Futures - it is not possible to access <code>params</code> or <code>request</code> values from code inside a Future. The below code throws a <code>NullPointerException</code>.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">get(<span class="string">"/someResource/:id"</span>) &#123;</span><br><span class="line">  facebookService.signInAsync(<span class="string">"someLogin"</span>, <span class="string">"somePassword"</span>) flatMap &#123; facebookUser -&gt;</span><br><span class="line">    <span class="keyword">val</span> id = params(<span class="string">"id"</span>)</span><br><span class="line">    database.getResourceAsync(facebookUser, id)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Scalatra exposes access to contextual data such as the current user or request parameters via members such as <code>params</code> or <code>request</code>. These values are implemeted as <code>DynamicVariables</code>. Dynamic variables is Scala’s feature which allows a <code>val</code> to have different values in different scopes. The point is that <code>DynamicVariable</code> implementation is based on Java’s <code>ThreadLocal</code>. Therefore, when executing code in a Future you may not rely on these values since you might be on another thread! An obvious solution to this problem is to retrieve request parameters before entering the Future:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">get(<span class="string">"/someResource/:id"</span>) &#123;</span><br><span class="line">  <span class="keyword">val</span> id = params(<span class="string">"id"</span>)</span><br><span class="line">  facebookService.signInAsync(<span class="string">"someLogin"</span>, <span class="string">"somePassword"</span>) flatMap &#123; facebookUser -&gt;</span><br><span class="line">    database.getResourceAsync(facebookUser, id)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>However, this is not always a very convenient solution. I came up with the following workaround:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">get(<span class="string">"/someResource/:id"</span>) &#123;</span><br><span class="line">  <span class="keyword">val</span> currentRequest = request</span><br><span class="line">  facebookService.signInAsync(<span class="string">"someLogin"</span>, <span class="string">"somePassword"</span>) flatMap &#123; facebookUser -&gt;</span><br><span class="line">    withRequest(currentRequest) &#123;</span><br><span class="line">      <span class="keyword">val</span> id = params(<span class="string">"id"</span>) </span><br><span class="line">      database.getResourceAsync(facebookUser, id)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Firstly, we take a copy of the current request. Later, inside the Future we tell Scalatra to substitute the <code>request</code> dynamic variable’s value with our copy. Therefore, the call to <code>params</code> will use the correct <code>request</code> and there will be no error.</p><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><p>As I recently learned, there is a much better way to solve this issue that is actually built into Scalatra. The way to go is using the AsyncResult  class. Our example would look like this:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">get(<span class="string">"/someResource/:id"</span>) &#123;</span><br><span class="line">  <span class="keyword">new</span> <span class="type">AsyncResult</span> &#123; <span class="keyword">val</span> is =</span><br><span class="line">    facebookService.signInAsync(<span class="string">"someLogin"</span>, <span class="string">"somePassword"</span>) flatMap &#123; facebookUser -&gt;</span><br><span class="line">      <span class="keyword">val</span> id = params(<span class="string">"id"</span>) </span><br><span class="line">      database.getResourceAsync(facebookUser, id)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AsyncResult  is an abstract class. We create an instance of anonymous type that extends it and overrides is  value. AsyncResult  takes copies of current request  and response  values when created and makes them available to code inside is . You can find more information <a href="http://www.scalatra.org/2.4/guides/async/akka.html" target="_blank" rel="noopener">here</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://www.scalatra.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Scalatra&lt;/a&gt; is an awesome, lightweight web framework for Scala. It’s p
      
    
    </summary>
    
      <category term="Other topics" scheme="https://codewithstyle.info/categories/Other-topics/"/>
    
      <category term="Quick solutions" scheme="https://codewithstyle.info/categories/Other-topics/Quick-solutions/"/>
    
      <category term="Scala" scheme="https://codewithstyle.info/categories/Other-topics/Quick-solutions/Scala/"/>
    
    
      <category term="scala" scheme="https://codewithstyle.info/tags/scala/"/>
    
      <category term="scalatra" scheme="https://codewithstyle.info/tags/scalatra/"/>
    
  </entry>
  
  <entry>
    <title>Combining two objects in JavaScript</title>
    <link href="https://codewithstyle.info/combining-two-objects-in-lodash/"/>
    <id>https://codewithstyle.info/combining-two-objects-in-lodash/</id>
    <published>2016-01-11T20:38:00.000Z</published>
    <updated>2019-12-02T21:26:20.064Z</updated>
    
    <content type="html"><![CDATA[<p>One thing that I have to do rather often when writing JavaScript code is to combine properties from two objects into a single object. </p><p><strong>UPDATE: This article was originally called <em>Combining two objects in lodash</em>. I’ve updated it to cover more ways of combining objects in JavaScript</strong> </p><p>For example, given these two objects:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  name: <span class="string">"John"</span>,</span><br><span class="line">  age: <span class="number">23</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line">  job: <span class="string">"Analyst"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>…what can be done to avoid copying properties manually?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> c = &#123;</span><br><span class="line">  name: a.name,</span><br><span class="line">  age: a.age,</span><br><span class="line">  job: b.job</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Solution-1-Object-assign"><a href="#Solution-1-Object-assign" class="headerlink" title="Solution 1: Object.assign"></a>Solution 1: <code>Object.assign</code></h2><p><code>Object.assign</code> is a built-in method introduced to JavaScript as part of the ES6 standard. It allows you to copy properties from a target object to the source object. A possible solution to the above problem could be:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(b, a);</span><br></pre></td></tr></table></figure><p>This way <code>b</code> would have both its own properties and <code>a</code>‘s properties. However, we might want to avoid modifying <code>b</code>. In such case, we can introduce a new, empty object and copy properties from <code>a</code> and <code>b</code> to it.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> c = <span class="built_in">Object</span>.assign(&#123;&#125;, a, b);</span><br></pre></td></tr></table></figure><h2 id="Solution-2-lodash"><a href="#Solution-2-lodash" class="headerlink" title="Solution 2: lodash"></a>Solution 2: lodash</h2><p>If for some reason you cannot use ES6 language features in your application, you can resort to using the <em>lodash</em> library.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> c = _.assign(&#123;&#125;, a, b);</span><br></pre></td></tr></table></figure><p><em>If you’d like to learn more about lodash, check out my <a href="https://codewithstyle.info/functional-programming-javascript-plain-words/">free e-book about Functional Programming in JavaScript</a>.</em></p><h2 id="Solution-3-object-spread-operator"><a href="#Solution-3-object-spread-operator" class="headerlink" title="Solution 3: object spread operator"></a>Solution 3: object spread operator</h2><p>Another ES6-based solution and my personal favourite is to use the object spread operator.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> c = &#123; ...a, ...b &#125;;</span><br></pre></td></tr></table></figure><p>The triple-dot operator <em>unwraps</em> an object and lets you put its properties into a new object. By <em>unwrapping</em> both <code>a</code> and <code>b</code> and putting it into a new object (<code>{}</code>) we end up with an object having both <code>a</code>‘s and <code>b</code>‘s properties. So, which way is the best way? It depends on your preference and requirements. Just pick one and be consistent in your choice!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;One thing that I have to do rather often when writing JavaScript code is to combine properties from two objects into a single object. &lt;/p
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://codewithstyle.info/categories/JavaScript/"/>
    
      <category term="Quick solutions" scheme="https://codewithstyle.info/categories/JavaScript/Quick-solutions/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/JavaScript/Quick-solutions/Web/"/>
    
    
      <category term="javascript" scheme="https://codewithstyle.info/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Scala for C# developers - part III</title>
    <link href="https://codewithstyle.info/scala-for-c-developers-part-iii/"/>
    <id>https://codewithstyle.info/scala-for-c-developers-part-iii/</id>
    <published>2016-01-03T21:20:00.000Z</published>
    <updated>2019-12-02T21:26:20.070Z</updated>
    
    <content type="html"><![CDATA[<p>I’m back from a rather lenghty break and would like to continue the <strong>Scala for C# developers</strong> series. So far I have covered the syntax, the basics of OO in Scala and functions. In this post I will look at the <code>Option</code> type and pattern matching.</p><h2 id="Issues-with-null-references"><a href="#Issues-with-null-references" class="headerlink" title="Issues with null references"></a>Issues with <code>null</code> references</h2><p>If you have programmed in C# (or Java, or any other language that supports <code>null</code> references) you must already know the pain of <code>NullReferenceException</code>. This exception is thrown whenever you are expecting that a variable points to an actual object but in reality it does not point to anything. Therefore, calling a method on such reference would result in the exception. There is a famous quote from Tony Hoare who introduced the concept of <code>null</code> references claiming that it was his billion-dollar mistake: </p><blockquote><p>I call it my billion-dollar mistake. It was the invention of the null reference in 1965. At that time, I was designing the first comprehensive type system for references in an object oriented language (ALGOL W). My goal was to ensure that all use of references should be absolutely safe, with checking performed automatically by the compiler. But I couldn’t resist the temptation to put in a null reference, simply because it was so easy to implement. This has led to innumerable errors, vulnerabilities, and system crashes, which have probably caused a billion dollars of pain and damage in the last forty years.</p></blockquote><h2 id="The-Option-type"><a href="#The-Option-type" class="headerlink" title="The Option type"></a>The <code>Option</code> type</h2><p>What does it mean when a <code>NullReferenceException</code> is thrown? As I said, it means that the CLR was expecting a reference to an object but found an empty refence and does not know what to do with it. In the majority of cases, it means that you as the programmer should have thought about it and check for the <code>null</code> reference before doing anything with it. Unfortunately, it would require some great discipline to keep track of all references that could become <code>null</code> and to take care of each and every one of them. The <code>Option</code> type comes to rescue. The idea is to force the compiler to do the hard work for you. <code>Option[T]</code> is an abstract type which has two subclasses: <code>Some[T]</code> and <code>None</code>. For example, a value of type <code>Option[Int]</code> represents an object that can, but does not have to hold some integer. If this <code>Option</code> is an instance of <code>Some</code> than the object has some value. If it’s <code>None</code> than it does not have any value. So, <code>None</code> is like <code>null</code> except we explicitly declare that an object can be <code>None</code> by making it an <code>Option</code>. If we decide to use <code>Option</code> types in our project we must forget about <code>null</code> references completly. Therefore, whenever we expect a value of type <code>T</code> to be optional, we must declare it as <code>Option[T]</code>. Thanks to that, the compiler will forbid us from writing such code:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeUpper</span></span>(text: <span class="type">Option</span>[<span class="type">String</span>]) = text.toUpperCase()</span><br><span class="line"></span><br><span class="line"><span class="type">For</span> <span class="keyword">this</span> to compile, we must explicitly handle the <span class="keyword">case</span> when the provided argument is undefined.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeUpper</span></span>(textOpt: <span class="type">Option</span>[<span class="type">String</span>]) =</span><br><span class="line">    textOpt <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Some</span>(text) =&gt; text.toUpperCase</span><br><span class="line">        <span class="keyword">case</span> <span class="type">None</span> =&gt; <span class="string">""</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Such code, although lengthier, is much, much safer than traditional code which allows use of <code>null</code> references. Of course, the key thing is to make sure that there is never a <code>null</code> inside <code>Some</code> value. However, this is easy to ensure as long as we decide not to use <code>null</code> references in the whole project.</p><h2 id="Pattern-matching"><a href="#Pattern-matching" class="headerlink" title="Pattern matching"></a>Pattern matching</h2><p>The above code snippet introduces some new syntax. The <code>match</code> construct is the Scala syntax for <strong>pattern matching</strong>. It is a very powerful tool common in functional programming. You can think of it as a much more advanced <code>switch</code> statement which always returns a value as a whole. In the above example, the value of <code>textOpt</code> is examined. It is an instance of <code>Option</code> type and we know that it has two subclasses. Therefore, there are two <code>case</code> branches. The first branch demonstrates how the value contained inside <code>Some[T]</code> can be extracted. Pattern matching can be used with simple types:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x <span class="keyword">match</span> &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">1</span> =&gt; println(<span class="string">"1"</span>)</span><br><span class="line">          <span class="keyword">case</span> <span class="number">2</span> =&gt; println(<span class="string">"2"</span>)</span><br><span class="line">          <span class="keyword">case</span> _ =&gt; println(<span class="string">"other value"</span>)</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>Additionally, pattern matching works very well with case classes which we discussed in the previous post.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Dog</span>(<span class="params">name: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Fish</span>(<span class="params">kind: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">animal</span> <span class="title">match</span> </span>&#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="type">Dog</span>(name) =&gt; println(<span class="string">"This is a dog named "</span> + name)</span><br><span class="line">   <span class="keyword">case</span> <span class="type">Fish</span>(kind) =&gt; println(<span class="string">"This is a fish of kind "</span> + kind)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I’m back from a rather lenghty break and would like to continue the &lt;strong&gt;Scala for C# developers&lt;/strong&gt; series. So far I have covere
      
    
    </summary>
    
      <category term="Other topics" scheme="https://codewithstyle.info/categories/Other-topics/"/>
    
      <category term="Scala" scheme="https://codewithstyle.info/categories/Other-topics/Scala/"/>
    
      <category term="Tutorials" scheme="https://codewithstyle.info/categories/Other-topics/Scala/Tutorials/"/>
    
    
      <category term="scala" scheme="https://codewithstyle.info/tags/scala/"/>
    
      <category term="csharp" scheme="https://codewithstyle.info/tags/csharp/"/>
    
  </entry>
  
  <entry>
    <title>Why I like C#: feature-wise comparison with Java</title>
    <link href="https://codewithstyle.info/why-i-like-c-feature-wise-comparison-with-java/"/>
    <id>https://codewithstyle.info/why-i-like-c-feature-wise-comparison-with-java/</id>
    <published>2015-11-22T14:30:00.000Z</published>
    <updated>2019-12-02T21:26:20.072Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I was browsing Quora and was quite surprised to stumble upon this question: <a href="https://www.quora.com/Java-vs-C-Is-Microsoft-finally-closing-the-gap" target="_blank" rel="noopener">Java vs C#. Is Microsoft finally closing the gap?</a> I decided to have a closer look and found more of similiar questions there. Furthermore, at the place where I am currently working at, I am the only person with .NET background amongst mostly JVM people. We are all working on Scala projects and my colleagues are often surprised when I tell them that this or that Scala feature is also available in C#. This makes me want to write a blog post about how cool a language C# is, especially when compared with Java. I want to underline that I’m speaking only about the language features and <strong>not</strong> about things like popularity, cross-platformness, ability to deploy easily, etc.</p><h2 id="Generics"><a href="#Generics" class="headerlink" title="Generics"></a>Generics</h2><p>C# creators were in a great situation since they could learn from Java’s mistakes. They didn’t waste the opportunity and did the right thing. The main problem with Java’s generics is <strong>type erasure</strong>. The term means that the information about the type parameter of a generic type is not available at runtime. In simple words, this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;string&gt; list = <span class="keyword">new</span> LinkedList&lt;string&gt;();</span><br></pre></td></tr></table></figure><p>…becomes this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List list = <span class="keyword">new</span> LinkedList();</span><br></pre></td></tr></table></figure><p>Type erasure makes writing generic types more difficult and less clean. For example, sometimes generic methods have to explicitly take a <code>Class</code> object representing the type parameter (like <a href="http://stackoverflow.com/questions/3437897/how-to-get-a-class-instance-of-generics-type-t" target="_blank" rel="noopener">here</a>). In C# this is not the case. You can easily access the type of the type parameter:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class List&lt;T&gt; </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        Console.WriteLine(<span class="keyword">typeof</span>(T));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Lambdas-higher-order-functions-and-LINQ"><a href="#Lambdas-higher-order-functions-and-LINQ" class="headerlink" title="Lambdas, higher-order functions and LINQ"></a>Lambdas, higher-order functions and LINQ</h2><p>Not long ago I found <a href="https://github.com/winterbe/java8-tutorial" target="_blank" rel="noopener">this article</a> on <a href="https://news.ycombinator.com/" target="_blank" rel="noopener">Hacker News</a>. It discusses some of the new features of Java 8 such as lambdas, streams and functional interfaces. These things are called <em>modern</em> Java whereas in C# they have been available for quite a long time (not to mention that they have been available in Haskell or Ocaml for even longer). While not everyone has to agree about superiority of functional over imperative programming, it’s hard to disagree that processing collections with higher-order functions (such as <a href="https://github.com/winterbe/java8-tutorial#map" target="_blank" rel="noopener">map</a>/<a href="https://msdn.microsoft.com/pl-pl/library/bb548891(v=vs.110" target="_blank" rel="noopener">select</a>.aspx) or <a href="https://github.com/winterbe/java8-tutorial#filter" target="_blank" rel="noopener">filter</a>/<a href="https://msdn.microsoft.com/library/bb534803(v=vs.100" target="_blank" rel="noopener">where</a>.aspx)) is cleaner, less error-prone and much more readable than doing it with loops. Even though Java has already adopted lambdas and higher-order functions, it seems that C# has better support for them. Examples?</p><ul><li>In Java 8, you need to convert collections to <code>Stream</code> before calling <code>map</code> or <code>filter</code></li><li>C# has built-in syntactic sugar for such opearations which makes such code even more readable and cleaner</li></ul><h2 id="Type-inference"><a href="#Type-inference" class="headerlink" title="Type inference"></a>Type inference</h2><p>Type inference is a nice feature that allows you not to declare the type of a variable if it’s being initialized on the same line. While it’s not as great as in Scala or Haskell, it certainly lets you cut some boilerplate code. <a href="https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html" target="_blank" rel="noopener">Java does also have some type inference</a> but it is limited to generic methods. With type inference, the below declaration:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dictionary&lt;<span class="keyword">int</span>, List&lt;Tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; graph = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">int</span>, List&lt;Tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt;();</span><br></pre></td></tr></table></figure><p>…can be written as:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> graph = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">int</span>, List&lt;Tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt;();</span><br></pre></td></tr></table></figure><h2 id="Asynchronous-code"><a href="#Asynchronous-code" class="headerlink" title="Asynchronous code"></a>Asynchronous code</h2><p>C# 5.0 introduced excellent support for asynchronous programming. The <code>async</code> and <code>await</code> keywords let you replace callback-style programming with code that looks exactly as if it were synchronous. It makes the code much cleaner and far easier to read. The comparison with Java is especially striking if you look at pre-Java 8 code where in order to execute a piece of code asynchronously, you had to create an anounymous type with one method! Have a look at usage of the <a href="https://github.com/AsyncHttpClient/async-http-client" target="_blank" rel="noopener">AsyncHttpClient</a> library:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">AsyncHttpClient asyncHttpClient = <span class="keyword">new</span> AsyncHttpClient();</span><br><span class="line">Future&lt;integer&gt; f = asyncHttpClient.prepareGet(<span class="string">"http://www.ning.com/"</span>).execute(</span><br><span class="line">   <span class="keyword">new</span> AsyncCompletionHandler&lt;integer&gt;()&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">onCompleted</span><span class="params">(Response response)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// Do something with the Response</span></span><br><span class="line">        <span class="keyword">return</span> response.getStatusCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onThrowable</span><span class="params">(Throwable t)</span></span>&#123;</span><br><span class="line">        <span class="comment">// Something wrong happened.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>…and compare it with this C# code:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">async</span> Task&lt;<span class="keyword">int</span>&gt; <span class="title">AccessTheWebAsync</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    HttpClient client = <span class="keyword">new</span> HttpClient();</span><br><span class="line">    Task&lt;<span class="keyword">string</span>&gt; getStringTask = client.GetStringAsync(<span class="string">"http://msdn.microsoft.com"</span>);</span><br><span class="line">    DoIndependentWork();</span><br><span class="line">    <span class="keyword">string</span> urlContents = <span class="keyword">await</span> getStringTask;</span><br><span class="line">    <span class="keyword">return</span> urlContents.Length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Value-types"><a href="#Value-types" class="headerlink" title="Value types"></a>Value types</h2><p>Value types is part of the reason why there is a _C_ in _C#_. There are two kinds of types in C# - value types and reference types. Value types differ from reference types mainly in the assignment sementics. When you assign a reference to a new variable, this variable points to the same object. When you assign a value type to a new variable, the whole piece of memory holding the data in the type is copied. This is great for lightweight objects representing data. In some situations it might save you from writing the <code>equals</code> and <code>hashCode</code> operators. What’s more, value types cannot be null which makes them safer than reference types. Finally, value types make primitive types such as <code>int</code> or <code>double</code> more natural. In Java, every type is a reference type.</p><h2 id="Extension-methods"><a href="#Extension-methods" class="headerlink" title="Extension methods"></a>Extension methods</h2><p>Extension methods allow you to add functionality to an object (even if it had already been compiled). One of the cool uses of extension methods is providing a concrete method for an interface. Also, they allow better code reuse and makes it easier to write fluent APIs. Example of an extension method:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> Legs &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">AnimalExtensions</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintDescription</span>(<span class="params"><span class="keyword">this</span> Animal animal</span>) </span>&#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"I have &#123;0&#125; legs"</span>, animal.Legs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">animal.PrintDescription();</span><br></pre></td></tr></table></figure><h2 id="C-6-0-features"><a href="#C-6-0-features" class="headerlink" title="C# 6.0 features"></a>C# 6.0 features</h2><p>Finally, there are many great features introduced in C# 6.0. The language seems to be gravitating towards functional programming, which I think is a good idea, but most of them do not require the programmer to learn a new paradigm. To name some of the most exciting features of C# 6.0:</p><ul><li>Expression bodied methods - syntax improvment which makes you write shorter code</li><li>Conditional null operator - which allows writing safer code (which feels like simplified <code>Maybe</code> monad)</li><li>Expression filters - convenient syntax for exception handling</li><li>Using static members - again, an improvment to make your code even shorter</li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>I have named just a few of the language features of C# which I believe make it a superior language to Java. Obviously, there are many more things to look at when choosing a language than its features. However, I think it’s worth mentioning that thanks to Mono, Xamarin and Microsoft’s BizSpark program for startups, .NET became much more accessible to small companies and startups than it was a decade ago.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently I was browsing Quora and was quite surprised to stumble upon this question: &lt;a href=&quot;https://www.quora.com/Java-vs-C-Is-Microsof
      
    
    </summary>
    
      <category term=".NET" scheme="https://codewithstyle.info/categories/NET/"/>
    
      <category term="Articles" scheme="https://codewithstyle.info/categories/NET/Articles/"/>
    
      <category term="Other topics" scheme="https://codewithstyle.info/categories/NET/Articles/Other-topics/"/>
    
      <category term="Thoughts" scheme="https://codewithstyle.info/categories/NET/Articles/Other-topics/Thoughts/"/>
    
    
      <category term="csharp" scheme="https://codewithstyle.info/tags/csharp/"/>
    
      <category term="thoughts" scheme="https://codewithstyle.info/tags/thoughts/"/>
    
      <category term="java" scheme="https://codewithstyle.info/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Scala for C# developers - part II</title>
    <link href="https://codewithstyle.info/scala-for-c-developers-part-ii/"/>
    <id>https://codewithstyle.info/scala-for-c-developers-part-ii/</id>
    <published>2015-11-12T23:08:00.000Z</published>
    <updated>2019-12-02T21:26:20.070Z</updated>
    
    <content type="html"><![CDATA[<p>This is the second post in the series. Click <a href="http://wordpress1653421.home.pl/home/platne/serwer16812/public_html/codewithstyle/?p=12" target="_blank" rel="noopener">here</a> to see the previous part. In the previous post I covered the basics of Scala syntax as well as some comparison of OOP in Scala and C#. Today, I will focus on lambdas and higher-order functions.</p><h2 id="Functions-as-function-parameters"><a href="#Functions-as-function-parameters" class="headerlink" title="Functions as function parameters"></a>Functions as function parameters</h2><p>You are most likely familiar with lambda expessions in C#. Lambda expression is simply an anonymous function. Lambdas are useful when you want to pass a piece of code as a parameter to some other function. This concept is actually one of the cornerstones of functional programming. One great example of how useful lambdas are operations on collections. The following piece of code takes a list of integeres, filters out odd numbers and multiplies the remaining numbers by 5.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> <span class="type">List</span>&lt;int&gt; &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> multiplied = list.<span class="type">Where</span>(x =&gt; x % <span class="number">2</span> == <span class="number">0</span>).<span class="type">Select</span>(x =&gt; x * <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>In Scala, it would look surprisingly similiar:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">val</span> multiplied = list.filter(x =&gt; x % <span class="number">2</span> == <span class="number">0</span>).map(x =&gt; x * <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>Scala uses more traditional FP names for <code>map</code> and <code>filter</code> but apart from this, the code looks very similiar. In Scala, we can make it a bit tighter (and less readable):</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">val</span> multiplied = list.filter(_ % <span class="number">2</span> == <span class="number">0</span>).map(_ * <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>As you can see, Scala allows you to use anonymous parameters inside anonymous functions. However, be careful when using the underscore notation. The <code>(_ * 5) + _</code> expression <strong>does not</strong> translate into <code>x =&gt; (x * 5) + x</code>. Instead, the second underscore is assumed to be the second anonymous parameter of the lambda, therefore meaning this: <code>(x, y) =&gt; (x * 5) + y</code>.</p><h2 id="Returning-functions"><a href="#Returning-functions" class="headerlink" title="Returning functions"></a>Returning functions</h2><p>C# not only allows to have functions which take functions as parameters but also functions that return other functions. In the following piece, the <code>GetMultiplier</code> function takes a single integer and returns a function that can multiply it by any other integer.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; <span class="title">GetMultiplier</span>(<span class="params"><span class="keyword">int</span> a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x =&gt; a * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> multiplier = GetMultiplier(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> multiplied = list.Select(multiplier);</span><br></pre></td></tr></table></figure><p>Let’s see how would it look in Scala:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getMultiplier</span></span>(x: <span class="type">Int</span>): <span class="type">Function1</span>[<span class="type">Int</span>, <span class="type">Int</span>] = &#123;</span><br><span class="line">    y: <span class="type">Int</span> =&gt; x * y</span><br><span class="line">&#125;      </span><br><span class="line"><span class="keyword">val</span> multiplier = getMultiplier(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">val</span> multiplied2 = list.map(multiplier)</span><br></pre></td></tr></table></figure><p>Again, it looks fairly similiar. The <code>Function1[Int, Int]</code> has the same semantics as Func%lt;int, int&gt; - it represents a one-argument function that takes an integer and returns an integer. Interestingly, in Scala <code>Function1[Int, Int]</code> can be denoted as <code>Int =&gt; Int</code>.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getMultiplier</span></span>(x: <span class="type">Int</span>): <span class="type">Int</span> =&gt; <span class="type">Int</span> = &#123;</span><br><span class="line">    y: <span class="type">Int</span> =&gt; x * y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can go one step further and rewrite the above function as:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getMultiplier</span></span>(x: <span class="type">Int</span>)(y: <span class="type">Int</span>) = x * y</span><br></pre></td></tr></table></figure><p>This certainly looks odd - our function now has two parameter lists! It is Scala’s special syntax for functions returning functions. You can pass one integer to <code>getMultiplier</code> and what you get is a <strong>partially applied</strong> function. What is the type of <code>getMultiplier</code> now? It’s <code>Int =&gt; (Int =&gt; Int)</code> which can also be written simply as <code>Int =&gt; Int =&gt; Int</code>. This technique is called <strong>currying</strong>. The idea of currying is that a function with multiple parameters can be treated as a function that takes the first parameter and returns a function that takes a second parameters which returns a function… and so on.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is the second post in the series. Click &lt;a href=&quot;http://wordpress1653421.home.pl/home/platne/serwer16812/public_html/codewithstyle/?
      
    
    </summary>
    
      <category term="Other topics" scheme="https://codewithstyle.info/categories/Other-topics/"/>
    
      <category term="Scala" scheme="https://codewithstyle.info/categories/Other-topics/Scala/"/>
    
      <category term="Tutorials" scheme="https://codewithstyle.info/categories/Other-topics/Scala/Tutorials/"/>
    
    
      <category term="scala" scheme="https://codewithstyle.info/tags/scala/"/>
    
      <category term="csharp" scheme="https://codewithstyle.info/tags/csharp/"/>
    
  </entry>
  
  <entry>
    <title>Scala for C# developers - part I</title>
    <link href="https://codewithstyle.info/scala-for-c-developers-part-i/"/>
    <id>https://codewithstyle.info/scala-for-c-developers-part-i/</id>
    <published>2015-10-24T08:59:00.000Z</published>
    <updated>2019-12-02T21:26:20.070Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, after three years of focusing mainly on the .NET platform, I’ve changed jobs. My current company uses Scala for server-side programming in their projects. I was very happy for this transition. Both Scala and C# can be considered hybrid functional and object-oriented programming languages. However, Scala seemed to feel more functional than C# - more built-in functional constructs, tighter syntax, default immutability, etc. While this is true, I was surprised how many similarities these languages. I concluded that as long as you have already seen the more functional side of C#, it is really easy to transition to Scala. This post series will discuss some of the similarities and differences between Scala and C#.</p><h2 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h2><p>The syntax in Scala is indeed quite different from C# syntax. Let’s have a look at this <code>HelloWorld</code> program in Scala.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      println(<span class="string">"Hello, world!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>First of all, the <code>object</code> keyword seems unfamiliar. In Scala, singleton objects are part of the language. It is like declaring a class and saying that there can be only one instance of this class - and this instance is like a global variable, accessible by name of the class. The concept is not very similiar to <strong>static classes</strong> in C#. Another difference is method declaration. As you can see, in Scala the type (of method or variable) comes <strong>after</strong> the name, not before. The <code>def</code> keyword marks a method declaration. The <code>Unit</code> type is a bit like <code>void</code> in C# - it is the return type of a method which does not return any sensible value. One more thing - the <code>println</code> call is not preceeded with any class/object name. In Scala, <code>objects</code> can behave like <code>namespaces</code> in C#. It is possible to import all methods from an object. The <a href="https://roslyn.codeplex.com/wikipage?title=Language%20Feature%20Status&amp;referringTitle=Documentation" target="_blank" rel="noopener">using static members</a> feature in C# 6.0 gives you the same behaviour. It is possible to write the above piece in a more compact way:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) = println(<span class="string">"Hello, world!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you can see, the braces can be omited for single-line methods. Also, the <code>Unit</code> type disappeared - now it is inferred by the compiler (similarly to how the <code>var</code> keyword works in C#). Again, C# 6.0 brings us something similiar - the <strong>expression-bodied members</strong>.</p><h2 id="Classes-and-objects"><a href="#Classes-and-objects" class="headerlink" title="Classes and objects"></a>Classes and objects</h2><p>I have already introduced the <code>object</code> keyword. Let’s now have a look at regular classes.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Ship(name: String, x: Double, y: Double) &#123;</span><br><span class="line">    val positionX = x</span><br><span class="line">    val positionY = y</span><br><span class="line">    <span class="function">def <span class="title">distanceFrom</span>(<span class="params">ship: Ship</span>): Double </span>= Math.sqrt(</span><br><span class="line">            Math.pow(ship.positionX - positionX, <span class="number">2</span>) + </span><br><span class="line">            Math.pow(ship.positionY - positionY, <span class="number">2</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      println(<span class="string">"Hello, world!"</span>)</span><br><span class="line">      println(<span class="keyword">new</span> <span class="type">Ship</span>(<span class="string">"Endevour"</span>, <span class="number">3</span>, <span class="number">4</span>).distanceFrom(<span class="keyword">new</span> <span class="type">Ship</span> (<span class="string">"Falcon Millenium"</span>, <span class="number">0</span>, <span class="number">0</span>)))</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Again, let’s look at the differences, case by case. There is no such thing as class constructor here, as we know it from C#. The constructor arguments are writen next to the class name. The initialization code lies directly in the class body. You could conclued that the class can only have one construcor in Scala. This is not true - additional constructors can be provided as <strong>secondary constructors</strong>. In the following lines there are two field declarations. Fields are public by default. The keyword used here is <code>val</code> which means that <code>x</code> and <code>y</code> are <strong>immutable</strong>. Immutability is at the heart of functional programming. Immutable values are values that cannot be modified. It may seem counterintuitive at first but in fact immutable values can help you eliminate whole classes of errors form your programs. I will discuss immutability in more detail in one of the future posts. For now, I recommend <a href="http://fsharpforfunandprofit.com/posts/correctness-immutability/" target="_blank" rel="noopener">this article</a>. Member fields do not have to have type declarations - the compilers infers the correct types. The <code>distanceFrom</code> method declaration is pretty straightforward. You may notice that there is not <code>return</code> statement here. This is because in Scala the method always, by default, returns the last expression in its body. In our case, there is only one expression. Class instantiation is very C#-like - we use the <code>new</code> keyword and provide constructor arguments.</p><h3 id="Case-classes"><a href="#Case-classes" class="headerlink" title="Case classes"></a>Case classes</h3><p>Scala introduces a very useful concept called <strong>case class</strong>. Let’s see how we could rewrite the above code in a more succinct way.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Ship</span>(<span class="params">name: <span class="type">String</span>, positionX: <span class="type">Double</span>, positionY: <span class="type">Double</span></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">distanceFrom</span></span>(ship: <span class="type">Ship</span>): <span class="type">Double</span> = <span class="type">Math</span>.sqrt(</span><br><span class="line">            <span class="type">Math</span>.pow(ship.positionX - positionX, <span class="number">2</span>) + </span><br><span class="line">            <span class="type">Math</span>.pow(ship.positionY - positionY, <span class="number">2</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      println(<span class="type">Ship</span>(<span class="string">"Endevour"</span>, <span class="number">3</span>, <span class="number">4</span>).distanceFrom(<span class="type">Ship</span>(<span class="string">"Falcon Millenium"</span>, <span class="number">0</span>, <span class="number">0</span>)))</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>With case classes, all constructor parameters automatically become members, hence no need for member initialization. Also, the <code>new</code> keyword is no longer needed for creating new instances. Although very helpful, this is only one aspect of case classes. More importantly, case classes automatically provide value-base <code>equals</code>, <code>hashCode</code> and <code>toString</code> implementations. Additionally, they are sealed. In other words, case classes are perfect for creating immutable data types. Let’s now compare the C# and Scala implementations of a class representing a two dimensional point so that you can see for yourself how nicer it is to write in Scala.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Point2d</span>(<span class="params">x: <span class="type">Double</span>, y: <span class="type">Double</span></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span></span>(dx: <span class="type">Double</span>, dy: <span class="type">Double</span>) = <span class="type">Point2d</span>(x + dx, y + dy)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Points</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> a = <span class="type">Point2d</span>(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">      <span class="keyword">val</span> b = <span class="type">Point2d</span>(<span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line">      println(a.move(<span class="number">2</span>, <span class="number">1</span>) == b)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And now C#:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Point2d</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> y;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point2d</span>(<span class="params"><span class="keyword">double</span> x, <span class="keyword">double</span> y</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Point2d <span class="title">move</span>(<span class="params"><span class="keyword">double</span> dx, <span class="keyword">double</span> dy</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Point2d(x + dx, y + dy);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">bool</span> <span class="title">Equals</span>(<span class="params"><span class="keyword">object</span> obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Point2d p = obj <span class="keyword">as</span> Point2d;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">object</span>)p == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (x == p.x) &amp;&amp; (y == p.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"Hello, World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you may now, <a href="https://msdn.microsoft.com/en-US/library/ms173147(v=vs.80" target="_blank" rel="noopener">implementing equals is not trivial</a>.aspx). Not to mention that we would need to implement <code>GetHashCode</code>. In Scala we get the default implementation for free.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently, after three years of focusing mainly on the .NET platform, I’ve changed jobs. My current company uses Scala for server-side pro
      
    
    </summary>
    
      <category term="Other topics" scheme="https://codewithstyle.info/categories/Other-topics/"/>
    
      <category term="Scala" scheme="https://codewithstyle.info/categories/Other-topics/Scala/"/>
    
      <category term="Tutorials" scheme="https://codewithstyle.info/categories/Other-topics/Scala/Tutorials/"/>
    
    
      <category term="scala" scheme="https://codewithstyle.info/tags/scala/"/>
    
      <category term="csharp" scheme="https://codewithstyle.info/tags/csharp/"/>
    
  </entry>
  
  <entry>
    <title>Editable cells in Angular UI Grid not working</title>
    <link href="https://codewithstyle.info/editable-cells-in-angular-ui-grid-not-working/"/>
    <id>https://codewithstyle.info/editable-cells-in-angular-ui-grid-not-working/</id>
    <published>2015-10-17T13:38:00.000Z</published>
    <updated>2019-12-02T21:26:20.065Z</updated>
    
    <content type="html"><![CDATA[<p>This week at work I spent too much time on this small issue I had with <a href="http://ui-grid.info/" target="_blank" rel="noopener">UI Grid</a> so I thought I will share the solution. Angular <a href="http://ui-grid.info/docs/#/api/ui.grid.edit.api:ColumnDef" target="_blank" rel="noopener">documentation tells you that</a> it is possible to make a column editable by setting <code>enableCellEdit</code> to <code>true</code> in <code>columnDef</code>. What wasn’t obvious for me, is that for this to work you also need to load the <code>ui.grid.edit</code> module and add the <code>uiGridEdit</code> directive to the element on which you enabled <code>uiGrid</code>. Code example below.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$scope.gridOptions.columnDefs = [ </span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'name'</span>, <span class="attr">enableCellEdit</span>: <span class="literal">true</span> &#125;, </span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-grid</span>=<span class="string">"gridOptions"</span> <span class="attr">ui-grid-edit</span> <span class="attr">class</span>=<span class="string">"grid"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This week at work I spent too much time on this small issue I had with &lt;a href=&quot;http://ui-grid.info/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;UI G
      
    
    </summary>
    
      <category term="Angular" scheme="https://codewithstyle.info/categories/Angular/"/>
    
      <category term="Quick solutions" scheme="https://codewithstyle.info/categories/Angular/Quick-solutions/"/>
    
      <category term="Web" scheme="https://codewithstyle.info/categories/Angular/Quick-solutions/Web/"/>
    
    
      <category term="angularjs" scheme="https://codewithstyle.info/tags/angularjs/"/>
    
      <category term="ui-grid" scheme="https://codewithstyle.info/tags/ui-grid/"/>
    
  </entry>
  
  <entry>
    <title>Is array of Dogs an array of Animals? Covariance, contravariance and invariance explained - part 2</title>
    <link href="https://codewithstyle.info/is-array-of-dogs-an-array-of-animals-covariance-contravariance-and-invariance-explained-part-2/"/>
    <id>https://codewithstyle.info/is-array-of-dogs-an-array-of-animals-covariance-contravariance-and-invariance-explained-part-2/</id>
    <published>2015-10-15T16:15:00.000Z</published>
    <updated>2019-12-02T21:26:20.068Z</updated>
    
    <content type="html"><![CDATA[<p>This post is a continuation of <a href="/is-array-of-dogs-an-array-of-animals-covariance-contravariance-and-invariance-explained-part-1">Is array of Dogs an array of Animals? Covariance, contravariance and invariance explained - part 1</a>.</p><h2 id="Method-overriding"><a href="#Method-overriding" class="headerlink" title="Method overriding"></a>Method overriding</h2><p>Type variance is not just relevant to generics but also to ineritance of regular, not generic, classes. When overriding a method in a class you usually make sure that it has the same argument types and return type. Note that it is not always necessary. For example, it makes sense for the overriding method to return a subtype of the return type of the original method.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">AnimalList</span> &#123;</span><br><span class="line">    <span class="function">Animal <span class="title">getAnimal</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="literal">null</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">DogList</span> <span class="title">extends</span> <span class="title">AnimalList</span> &#123;</span><br><span class="line">    <span class="function">Dog <span class="title">getAnimal</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="literal">null</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The caller of <code>getAnimal</code> will expect an instance of <code>Animal</code>. Returning something more derived (a <code>Dog</code>) will be perfectly type safe. Therefore, we can say that return type of overriden method is <strong>covariant</strong>. Let’s now look at argument types.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Animal</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Dog</span> <span class="title">extends</span> <span class="title">Animal</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">DogComparator</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isLarger</span>(<span class="params">Dog x, Dog y</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">AdvancedDogComparator</span> <span class="title">extends</span> <span class="title">Comparator</span> &#123;</span><br><span class="line">    <span class="function">boor <span class="title">isLarger</span>(<span class="params">Dog x, Animal y</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AdvancedDogComparator</code> is a specialized version od <code>DogComparator</code>. Just as <code>DogComparator</code>, it can compare two <code>Dogs</code> but it can do more than that. So, <code>AdvancedDogComparator.isLarger</code> must take at least a <code>Dog</code>, but it can also take the supertype of <code>Dog</code> - an <code>Animal</code>. We can say that parameter types of the overriden method are <strong>contravariant</strong>. You may see an analogy here to how we deduced in the first post that it should be possible to make <code>MyList&lt;T&gt;</code> covariant as long as it does not have the <code>add</code> method. Return type covariance is supported both Java and C#. Argument type contravariance is not supported neither in Java nor C#. One more interesting case - if you create a covariant generic interface of type <code>T</code>, C# will not allow you to create a method that takes <code>T</code> in it.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">interface IMyList&lt;out T&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span>(<span class="params">T el</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MyList&lt;t&gt; : IMyList&lt;t&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span>(<span class="params">T el</span>) </span>&#123;</span><br><span class="line">        Console.write(el);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Compiler output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error CS1961: The covariant type parameter \`T&apos; must be contravariantly valid on \`IMyList.add(T)&apos;</span><br></pre></td></tr></table></figure><p>This is actually related to the contravariance of argument types when overriding methods. Any subtype of <code>IMyList</code> would have to override <code>add</code>. Therefore, the <code>T</code> would have to be contravariant but it is declared as covariant (the <code>out</code>) keyword which makes a contradiction.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This post is a continuation of &lt;a href=&quot;/is-array-of-dogs-an-array-of-animals-covariance-contravariance-and-invariance-explained-part-1&quot;&gt;
      
    
    </summary>
    
      <category term="Other topics" scheme="https://codewithstyle.info/categories/Other-topics/"/>
    
      <category term="Scala" scheme="https://codewithstyle.info/categories/Other-topics/Scala/"/>
    
      <category term="Tutorials" scheme="https://codewithstyle.info/categories/Other-topics/Scala/Tutorials/"/>
    
    
      <category term="csharp" scheme="https://codewithstyle.info/tags/csharp/"/>
    
      <category term="java" scheme="https://codewithstyle.info/tags/java/"/>
    
      <category term="covariance" scheme="https://codewithstyle.info/tags/covariance/"/>
    
  </entry>
  
  <entry>
    <title>Is array of Dogs an array of Animals? Covariance, contravariance and invariance explained - part 1</title>
    <link href="https://codewithstyle.info/is-array-of-dogs-an-array-of-animals-covariance-contravariance-and-invariance-explained-part-1/"/>
    <id>https://codewithstyle.info/is-array-of-dogs-an-array-of-animals-covariance-contravariance-and-invariance-explained-part-1/</id>
    <published>2015-10-10T03:16:00.000Z</published>
    <updated>2019-12-02T21:26:20.068Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to the first post on my blog. I would like to dedicate it to a topic that sounds quite intimidating but is in fact quite simple to understand. There are already good explanations of type variance to be found on other blogs or <a href="http://stackoverflow.com/" target="_blank" rel="noopener">Stack Overflow</a> but I would like to take a broader approach and look at how different programming languages deal with it.</p><h2 id="The-problem"><a href="#The-problem" class="headerlink" title="The problem"></a>The problem</h2><p>So, what is this cryptic title about? Let me start with this classic example in Java.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">MyList&lt;Dog&gt; dogs = <span class="keyword">new</span> MyList&lt;Dog&gt;();</span><br><span class="line">MyList&lt;Animal&gt; animals = dogs;</span><br></pre></td></tr></table></figure><p>Would you expect this piece of code to compile? The answer depends on what operations are available on <code>MyList</code>. Let’s assume that <code>MyList</code> is very similiar to <code>ArrayList</code> and it allows you to <code>get</code> and <code>add</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123; <span class="comment">/* get element at index */</span> &#125;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T element)</span> </span>&#123; <span class="comment">/* add at the end */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, assuming that the questioned piece of code would compile, it would be perfectly valid to add a Cat to the list of Animals which is in fact a list of Dogs. This is not something we would want the compiler to allow.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">animals.add(<span class="keyword">new</span> Cat());</span><br><span class="line">Dog dog = dogs.get(<span class="number">0</span>); <span class="comment">// we are expecting a Dog but we've got a Cat!</span></span><br></pre></td></tr></table></figure><p>In this case, <code>MyList&lt;Dog&gt;</code> is <strong>not</strong> (does not inherit from) <code>MyList&lt;Animal&gt;</code>. We call <code>MyList</code> <strong>invariant</strong>. This is the kind of behaviour that we get in Java. Let’s now assume that <code>MyList</code> is read-only and does not have an <code>add</code> method.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyList</span><span class="params">(List&lt;T&gt; original)</span> </span>&#123; <span class="comment">/* copy from original */</span> &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123; <span class="comment">/* get element at index */</span> &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, the previous issue is no longer the case. If we call <code>animals.get()</code> we can get either a <code>Dog</code> or a <code>Cat</code> an we are ok with this. In such case, it makes sense to allow the questioned piece to compile. Hence, <code>MyList&lt;Dog&gt;</code> <strong>is</strong> (does inherit from) <code>MyList&lt;Animal&gt;</code> and we call <code>MyList</code> <strong>covariant</strong>.</p><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>As stated before, in Java the below piece would not compile. In other words, generic types in Java are <strong>invariant</strong>. This is quite limiting when compared to other languages which allow you to specify variance for generics.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyList&lt;Dog&gt; dogs = <span class="keyword">new</span> MyList&lt;Dog&gt;();</span><br><span class="line">MyList&lt;Animal&gt; animals = dogs;</span><br></pre></td></tr></table></figure><p>Compiler output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HelloWorld.java:22: error: incompatible types</span><br></pre></td></tr></table></figure><p>However, there is an interesting exception to generic’s invariance in Java. The below code will compile:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dog[] dogs = <span class="keyword">new</span> Dog[];</span><br><span class="line">Animal[] animals = dogs;&lt;br&gt;</span><br></pre></td></tr></table></figure><p>So, what happens when we try do add a Cat to an array of Dogs? Java gives us an exception (of course this will happen on runtime and not on compile time). So, arrays are <strong>covariant</strong> in Java! This is not a very elegant situation and the reasons behind it are mainly historic. There is a good explanation of this on <a href="http://stackoverflow.com/questions/18666710/why-are-arrays-covariant-but-generics-are-invariant" target="_blank" rel="noopener">Stack Overflow</a>.</p><h2 id="C"><a href="#C" class="headerlink" title="C#"></a>C#</h2><p>Similarly to Java, C# would not allow us to compile below code:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class MyList&lt;T&gt; &#123; &#125;</span><br><span class="line"></span><br><span class="line">MyList&lt;Dog&gt; dogs = <span class="keyword">new</span> MyList&lt;Dog&gt;();</span><br><span class="line">MyList&lt;Animal&gt; animals = dogs;</span><br></pre></td></tr></table></figure><p>Compiler output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error CS0029: Cannot implicitly convert type \`MyList&apos; to \`MyList&apos;</span><br></pre></td></tr></table></figure><p>However, C# goes a step further and allows us to create variant generic interfaces. It is possible to mark a type parameter with the <code>in</code> keyword to make the generic interface covariant.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface IMyList&lt;out T&gt; &#123; &#125;</span><br><span class="line">class MyList&lt;T&gt; : IMyList&lt;T&gt; &#123; &#125;</span><br><span class="line"></span><br><span class="line">IMyList&lt;Dog&gt; dogs = <span class="keyword">new</span> MyList&lt;Dog&gt;();</span><br><span class="line">IMyList&lt;Animal&gt; animals = dogs;</span><br></pre></td></tr></table></figure><p>There are some nice examples of <strong>contravariance</strong> in C#. Since <strong>covariance</strong> means that you can use a more derived type than specified in type parameter, in <strong>contravariance</strong> you can use a more <strong>generic</strong> type than specified. It may seem a bit counterintuitive but let’s look at the <code>Action&lt;T&gt;</code> type which represents a function that takes a parameter of type T and does not return anything.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Action&lt;Base&gt; b = (target) =&gt; &#123; <span class="comment">/* do something with target */</span> &#125;;</span><br><span class="line">Action&lt;Derived&gt; d = b;</span><br><span class="line">d(<span class="keyword">new</span> Derived());</span><br></pre></td></tr></table></figure><p>In this case, it makes sense to say that <code>Action&lt;Base&gt;</code> is <code>Action&lt;Derived&gt;</code>. <code>Action&lt;Derived&gt;</code> requires a prameter of type <code>Derived</code> so giving it an instance of something more generic (<code>Base</code>) is ok. <a href="/is-array-of-dogs-an-array-of-animals-covariance-contravariance-and-invariance-explained-part-2">In the next post I will look at how variance is exploited in inheritance.</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to the first post on my blog. I would like to dedicate it to a topic that sounds quite intimidating but is in fact quite simple t
      
    
    </summary>
    
      <category term="Other topics" scheme="https://codewithstyle.info/categories/Other-topics/"/>
    
      <category term="Scala" scheme="https://codewithstyle.info/categories/Other-topics/Scala/"/>
    
      <category term="Tutorials" scheme="https://codewithstyle.info/categories/Other-topics/Scala/Tutorials/"/>
    
    
      <category term="csharp" scheme="https://codewithstyle.info/tags/csharp/"/>
    
      <category term="java" scheme="https://codewithstyle.info/tags/java/"/>
    
      <category term="covariance" scheme="https://codewithstyle.info/tags/covariance/"/>
    
  </entry>
  
</feed>
